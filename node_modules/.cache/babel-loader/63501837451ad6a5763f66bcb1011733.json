{"ast":null,"code":"/*! Built with http://stenciljs.com */\nimport { h } from \"./tag-library.core.js\";\n\nvar variableReplacer = function variableReplacer(e, t) {\n  if (t && e && e.length > 4 && e.indexOf(\"{{\") >= 0 && e.indexOf(\"}}\") >= 0) {\n    var n = /{{[A-Za-z0-9\\-\\_]+}}/gi;\n    return e.replace(n, function (e) {\n      var n = e.slice(2, -2);\n      var r = e;\n      return t.hasOwnProperty(n) && null == (r = t[n]) && (r = \"\"), r;\n    });\n  }\n\n  return e;\n},\n    nodeVariableReplacer = function nodeVariableReplacer(e, t) {\n  for (var n = 0; n < e.childNodes.length; n++) {\n    var r = e.childNodes[n];\n    domAttributeVariableReplacer(r, t), domTextContentReplacer(r, t), nodeVariableReplacer(r, t);\n  }\n\n  return domAttributeVariableReplacer(e, t), domTextContentReplacer(e, t), e;\n},\n    domTextContentReplacer = function domTextContentReplacer(e, t) {\n  if (e.textContent && 0 === e.childNodes.length) {\n    var n = getSavedBindingExpressionFromElement(e);\n    n || (n = e.textContent);\n    var r = variableReplacer(n, t);\n    e.textContent !== r && (saveBindingExpressionOnElement(e), e.textContent = r);\n  }\n},\n    saveBindingExpressionOnElement = function saveBindingExpressionOnElement(e) {\n  var t = e;\n  t.bind || (t.bind = e.textContent);\n},\n    getSavedBindingExpressionFromElement = function getSavedBindingExpressionFromElement(e) {\n  return e.bind;\n},\n    domAttributeVariableReplacer = function domAttributeVariableReplacer(e, t) {\n  if (e.attributes && e.attributes.length) for (var n = 0; n < e.attributes.length; n++) {\n    var r = e.attributes[n];\n    var a = getSavedBindingExpressionFromAttribute(r);\n    a || (a = r.value);\n    var i = variableReplacer(a, t);\n    a !== i && (saveBindingExpressionOnAttribute(r), e.setAttribute(r.name, i));\n  }\n  return e;\n},\n    saveBindingExpressionOnAttribute = function saveBindingExpressionOnAttribute(e) {\n  var t = e;\n  t.bind || (t.bind = e.value);\n},\n    getSavedBindingExpressionFromAttribute = function getSavedBindingExpressionFromAttribute(e) {\n  return e.bind;\n},\n    setElementFieldData = function setElementFieldData(e, t, n) {\n  var r = getRecord(t, n),\n      a = e.querySelectorAll(\"tag-field\");\n  setFieldData(a, r);\n  var i = e.querySelectorAll(\"tag-edit-field\");\n  setFieldData(i, r);\n},\n    setElementFieldReferences = function setElementFieldReferences(e, t, n) {\n  var r = getRecord(t, n);\n  nodeVariableReplacer(e, r);\n},\n    getRecord = function getRecord(e, t) {\n  return t && t.length - 1 >= e ? t[e] : void 0;\n},\n    setFieldData = function setFieldData(e, t) {\n  for (var n = 0; n < e.length; n++) {\n    var r = e[n],\n        a = r.getAttribute(\"name\"),\n        i = void 0 === t ? void 0 : t[a];\n    r.value = i, domAttributeVariableReplacer(r, t);\n  }\n};\n\nfunction convertNodeToVdom(e, t) {\n  return function n(r, a) {\n    if (\"TEMPLATE\" === a.nodeName) return r;\n    if (function (e) {\n      return !(\"STYLE\" !== e.nodeName && \"LINK\" !== e.nodeName || !t.has(e) && (t.add(e), 1));\n    }(a)) return r;\n    var i = null;\n    a.childNodes.length && (i = Array.from(a.childNodes).reduce(n, []));\n    var o = {};\n\n    if (1 === a.nodeType) {\n      var t_1 = a;\n      o = Array.from(t_1.attributes).reduce(function (t, n) {\n        var r = function (e, t) {\n          return \"style\" === e.toLocaleLowerCase() ? t.split(\";\").reduce(function (e, t) {\n            var n = t.indexOf(\":\");\n\n            if (-1 !== n) {\n              var r_1 = t.slice(0, n),\n                  a_1 = t.slice(n + 1);\n              e[r_1.trim()] = a_1;\n            }\n\n            return e;\n          }, {}) : t;\n        }(n.name, variableReplacer(n.value, e));\n\n        return t[n.name] = r, t;\n      }, {}), \"TAG-FIELD\" !== t_1.nodeName && \"TAG-EDIT-FIELD\" !== t_1.nodeName || void 0 !== o.value || (o.value = e[o.name]), \"TAG-POPOVER\" === t_1.nodeName && (o.data = e);\n    }\n\n    if (\"#text\" === a.nodeName) {\n      var t_2 = variableReplacer(a.textContent, e);\n      r.push(t_2);\n    }\n\n    return \"#comment\" === a.nodeName ? r : (\"#text\" !== a.nodeName && r.push(h(a.nodeName, o, i)), r);\n  };\n}\n\nexport { variableReplacer as a, convertNodeToVdom as b, setElementFieldData as c, setElementFieldReferences as d, nodeVariableReplacer as e, setFieldData as f };","map":null,"metadata":{},"sourceType":"module"}