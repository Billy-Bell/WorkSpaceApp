{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\n!function (t) {\n  if (!t.fetch) {\n    var e = {\n      searchParams: \"URLSearchParams\" in t,\n      iterable: \"Symbol\" in t && \"iterator\" in Symbol,\n      blob: \"FileReader\" in t && \"Blob\" in t && function () {\n        try {\n          return new Blob(), !0;\n        } catch (t) {\n          return !1;\n        }\n      }(),\n      formData: \"FormData\" in t,\n      arrayBuffer: \"ArrayBuffer\" in t\n    };\n    if (e.arrayBuffer) var r = [\"[object Int8Array]\", \"[object Uint8Array]\", \"[object Uint8ClampedArray]\", \"[object Int16Array]\", \"[object Uint16Array]\", \"[object Int32Array]\", \"[object Uint32Array]\", \"[object Float32Array]\", \"[object Float64Array]\"],\n        o = function o(t) {\n      return t && DataView.prototype.isPrototypeOf(t);\n    },\n        n = ArrayBuffer.isView || function (t) {\n      return t && r.indexOf(Object.prototype.toString.call(t)) > -1;\n    };\n    f.prototype.append = function (t, e) {\n      t = a(t), e = h(e);\n      var r = this.map[t];\n      this.map[t] = r ? r + \",\" + e : e;\n    }, f.prototype.delete = function (t) {\n      delete this.map[a(t)];\n    }, f.prototype.get = function (t) {\n      return t = a(t), this.has(t) ? this.map[t] : null;\n    }, f.prototype.has = function (t) {\n      return this.map.hasOwnProperty(a(t));\n    }, f.prototype.set = function (t, e) {\n      this.map[a(t)] = h(e);\n    }, f.prototype.forEach = function (t, e) {\n      for (var r in this.map) {\n        this.map.hasOwnProperty(r) && t.call(e, this.map[r], r, this);\n      }\n    }, f.prototype.keys = function () {\n      var t = [];\n      return this.forEach(function (e, r) {\n        t.push(r);\n      }), u(t);\n    }, f.prototype.values = function () {\n      var t = [];\n      return this.forEach(function (e) {\n        t.push(e);\n      }), u(t);\n    }, f.prototype.entries = function () {\n      var t = [];\n      return this.forEach(function (e, r) {\n        t.push([r, e]);\n      }), u(t);\n    }, e.iterable && (f.prototype[Symbol.iterator] = f.prototype.entries);\n    var i = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"];\n    b.prototype.clone = function () {\n      return new b(this, {\n        body: this._bodyInit\n      });\n    }, p.call(b.prototype), p.call(w.prototype), w.prototype.clone = function () {\n      return new w(this._bodyInit, {\n        status: this.status,\n        statusText: this.statusText,\n        headers: new f(this.headers),\n        url: this.url\n      });\n    }, w.error = function () {\n      var t = new w(null, {\n        status: 0,\n        statusText: \"\"\n      });\n      return t.type = \"error\", t;\n    };\n    var s = [301, 302, 303, 307, 308];\n    w.redirect = function (t, e) {\n      if (-1 === s.indexOf(e)) throw new RangeError(\"Invalid status code\");\n      return new w(null, {\n        status: e,\n        headers: {\n          location: t\n        }\n      });\n    }, t.Headers = f, t.Request = b, t.Response = w, t.fetch = function (t, r) {\n      return new Promise(function (o, n) {\n        var i = new b(t, r),\n            s = new XMLHttpRequest();\n        s.onload = function () {\n          var t,\n              e,\n              r = {\n            status: s.status,\n            statusText: s.statusText,\n            headers: (t = s.getAllResponseHeaders() || \"\", e = new f(), t.replace(/\\r?\\n[\\t ]+/g, \" \").split(/\\r?\\n/).forEach(function (t) {\n              var r = t.split(\":\"),\n                  o = r.shift().trim();\n\n              if (o) {\n                var n = r.join(\":\").trim();\n                e.append(o, n);\n              }\n            }), e)\n          };\n          r.url = \"responseURL\" in s ? s.responseURL : r.headers.get(\"X-Request-URL\");\n          var n = \"response\" in s ? s.response : s.responseText;\n          o(new w(n, r));\n        }, s.onerror = function () {\n          n(new TypeError(\"Network request failed\"));\n        }, s.ontimeout = function () {\n          n(new TypeError(\"Network request failed\"));\n        }, s.open(i.method, i.url, !0), \"include\" === i.credentials ? s.withCredentials = !0 : \"omit\" === i.credentials && (s.withCredentials = !1), \"responseType\" in s && e.blob && (s.responseType = \"blob\"), i.headers.forEach(function (t, e) {\n          s.setRequestHeader(e, t);\n        }), s.send(void 0 === i._bodyInit ? null : i._bodyInit);\n      });\n    }, t.fetch.polyfill = !0;\n  }\n\n  function a(t) {\n    if (\"string\" != typeof t && (t = String(t)), /[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(t)) throw new TypeError(\"Invalid character in header field name\");\n    return t.toLowerCase();\n  }\n\n  function h(t) {\n    return \"string\" != typeof t && (t = String(t)), t;\n  }\n\n  function u(t) {\n    var r = {\n      next: function next() {\n        var e = t.shift();\n        return {\n          done: void 0 === e,\n          value: e\n        };\n      }\n    };\n    return e.iterable && (r[Symbol.iterator] = function () {\n      return r;\n    }), r;\n  }\n\n  function f(t) {\n    this.map = {}, t instanceof f ? t.forEach(function (t, e) {\n      this.append(e, t);\n    }, this) : Array.isArray(t) ? t.forEach(function (t) {\n      this.append(t[0], t[1]);\n    }, this) : t && Object.getOwnPropertyNames(t).forEach(function (e) {\n      this.append(e, t[e]);\n    }, this);\n  }\n\n  function d(t) {\n    if (t.bodyUsed) return Promise.reject(new TypeError(\"Already read\"));\n    t.bodyUsed = !0;\n  }\n\n  function y(t) {\n    return new Promise(function (e, r) {\n      t.onload = function () {\n        e(t.result);\n      }, t.onerror = function () {\n        r(t.error);\n      };\n    });\n  }\n\n  function c(t) {\n    var e = new FileReader(),\n        r = y(e);\n    return e.readAsArrayBuffer(t), r;\n  }\n\n  function l(t) {\n    if (t.slice) return t.slice(0);\n    var e = new Uint8Array(t.byteLength);\n    return e.set(new Uint8Array(t)), e.buffer;\n  }\n\n  function p() {\n    return this.bodyUsed = !1, this._initBody = function (t) {\n      if (this._bodyInit = t, t) {\n        if (\"string\" == typeof t) this._bodyText = t;else if (e.blob && Blob.prototype.isPrototypeOf(t)) this._bodyBlob = t;else if (e.formData && FormData.prototype.isPrototypeOf(t)) this._bodyFormData = t;else if (e.searchParams && URLSearchParams.prototype.isPrototypeOf(t)) this._bodyText = t.toString();else if (e.arrayBuffer && e.blob && o(t)) this._bodyArrayBuffer = l(t.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);else {\n          if (!e.arrayBuffer || !ArrayBuffer.prototype.isPrototypeOf(t) && !n(t)) throw new Error(\"unsupported BodyInit type\");\n          this._bodyArrayBuffer = l(t);\n        }\n      } else this._bodyText = \"\";\n      this.headers.get(\"content-type\") || (\"string\" == typeof t ? this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\") : this._bodyBlob && this._bodyBlob.type ? this.headers.set(\"content-type\", this._bodyBlob.type) : e.searchParams && URLSearchParams.prototype.isPrototypeOf(t) && this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n    }, e.blob && (this.blob = function () {\n      var t = d(this);\n      if (t) return t;\n      if (this._bodyBlob) return Promise.resolve(this._bodyBlob);\n      if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n      if (this._bodyFormData) throw new Error(\"could not read FormData body as blob\");\n      return Promise.resolve(new Blob([this._bodyText]));\n    }, this.arrayBuffer = function () {\n      return this._bodyArrayBuffer ? d(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(c);\n    }), this.text = function () {\n      var t,\n          e,\n          r,\n          o = d(this);\n      if (o) return o;\n      if (this._bodyBlob) return t = this._bodyBlob, r = y(e = new FileReader()), e.readAsText(t), r;\n      if (this._bodyArrayBuffer) return Promise.resolve(function (t) {\n        for (var e = new Uint8Array(t), r = new Array(e.length), o = 0; o < e.length; o++) {\n          r[o] = String.fromCharCode(e[o]);\n        }\n\n        return r.join(\"\");\n      }(this._bodyArrayBuffer));\n      if (this._bodyFormData) throw new Error(\"could not read FormData body as text\");\n      return Promise.resolve(this._bodyText);\n    }, e.formData && (this.formData = function () {\n      return this.text().then(m);\n    }), this.json = function () {\n      return this.text().then(JSON.parse);\n    }, this;\n  }\n\n  function b(t, e) {\n    var r,\n        o,\n        n = (e = e || {}).body;\n\n    if (t instanceof b) {\n      if (t.bodyUsed) throw new TypeError(\"Already read\");\n      this.url = t.url, this.credentials = t.credentials, e.headers || (this.headers = new f(t.headers)), this.method = t.method, this.mode = t.mode, n || null == t._bodyInit || (n = t._bodyInit, t.bodyUsed = !0);\n    } else this.url = String(t);\n\n    if (this.credentials = e.credentials || this.credentials || \"omit\", !e.headers && this.headers || (this.headers = new f(e.headers)), this.method = (o = (r = e.method || this.method || \"GET\").toUpperCase(), i.indexOf(o) > -1 ? o : r), this.mode = e.mode || this.mode || null, this.referrer = null, (\"GET\" === this.method || \"HEAD\" === this.method) && n) throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n\n    this._initBody(n);\n  }\n\n  function m(t) {\n    var e = new FormData();\n    return t.trim().split(\"&\").forEach(function (t) {\n      if (t) {\n        var r = t.split(\"=\"),\n            o = r.shift().replace(/\\+/g, \" \"),\n            n = r.join(\"=\").replace(/\\+/g, \" \");\n        e.append(decodeURIComponent(o), decodeURIComponent(n));\n      }\n    }), e;\n  }\n\n  function w(t, e) {\n    e || (e = {}), this.type = \"default\", this.status = void 0 === e.status ? 200 : e.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = \"statusText\" in e ? e.statusText : \"OK\", this.headers = new f(e.headers), this.url = e.url || \"\", this._initBody(t);\n  }\n}(\"undefined\" != typeof self ? self : void 0);\n\nvar __awaiter = function __awaiter(t, e, r, o) {\n  return new (r || (r = Promise))(function (n, i) {\n    function s(t) {\n      try {\n        h(o.next(t));\n      } catch (t) {\n        i(t);\n      }\n    }\n\n    function a(t) {\n      try {\n        h(o.throw(t));\n      } catch (t) {\n        i(t);\n      }\n    }\n\n    function h(t) {\n      t.done ? n(t.value) : new r(function (e) {\n        e(t.value);\n      }).then(s, a);\n    }\n\n    h((o = o.apply(t, e || [])).next());\n  });\n};\n\nvar httpCall = function httpCall(t) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var e, r;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          e = {}, r = {\n            headers: t.headers || getDefaultHeaders(),\n            method: t.method || \"get\"\n          };\n          t.body && \"get\" !== t.method && (r.body = JSON.stringify(t.body));\n          return [4\n          /*yield*/\n          , fetch(t.path, r).then(function (t) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    e.status = t.status, e.ok = t.ok, e.headers = t.headers;\n                    _a = e;\n                    return [4\n                    /*yield*/\n                    , t.json()];\n\n                  case 1:\n                    _a.body = _b.sent();\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }).catch(function (t) {\n            e.ok = !1, console.error(\"error:\", t);\n          })];\n\n        case 1:\n          return [2\n          /*return*/\n          , (_a.sent(), e)];\n      }\n    });\n  });\n},\n    getDefaultHeaders = function getDefaultHeaders() {\n  return new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  });\n};\n\nexport { httpCall as a };","map":null,"metadata":{},"sourceType":"module"}