import { PureComponent, cloneElement, Component, createElement } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class TagComponentWrapper extends PureComponent {
    constructor(props) {
        super(props);
        this.wcReady = false;
    }
    componentDidMount() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.waitForWebComponent();
            // wire up the click event handler
            this.addEventListeners(this.props.eventListeners);
            if (this.props.componentDidMountCallback) {
                this.props.componentDidMountCallback(this.wc);
            }
        });
    }
    componentWillUnmount() {
        // remove the click event handler
        this.removeEventListeners(this.props.eventListeners);
    }
    render() {
        return cloneElement(this.props.children, {
            ref: (node) => {
                this.wc = node;
            },
        });
    }
    waitForWebComponent() {
        return new Promise(resolve => {
            if (this.wc && this.wcReady) {
                return resolve();
            }
            this.wcReadyInterval = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                if (this.wc) {
                    clearInterval(this.wcReadyInterval);
                    if (typeof this.wc.componentOnReady === 'function') {
                        yield this.wc.componentOnReady();
                    }
                    this.wcReady = true;
                    return resolve();
                }
            }), 10);
        });
    }
    addEventListeners(eventListeners = {}) {
        if (this.wc !== undefined) {
            Object.keys(eventListeners).forEach(key => {
                this.wc.addEventListener(key, eventListeners[key]);
            });
        }
    }
    removeEventListeners(eventListeners = {}) {
        if (this.wc !== undefined) {
            Object.keys(eventListeners).forEach(key => {
                this.wc.removeEventListener(key, eventListeners[key]);
            });
        }
    }
}

class TagText extends Component {
    constructor(props) {
        super(props);
    }
    render() {
        return createElement("tag-text", { text: this.props.text });
    }
}

export { TagComponentWrapper, TagText };
