import '../../stencil.core';
import { IHttpRequest } from '../../shared/http';
import { IPageRequestArgs } from '../../shared/types';
import { RequestMapper, ResponseMapper } from './tag-http.utils';
export declare class TagHttp {
    /**
     * Determines when the http request is made. The request is made when the component loads by default
     * The available events are load, submit, search, pageRequest, click, buttonClick, refresh
     * This prop can take a comma delimited list of event names where multiple events should trigger the request
     */
    requestEvents: string;
    /** The http method to use in the http request */
    method: 'get' | 'post' | 'put' | 'delete';
    /** The http path to use in the http request */
    path: string;
    /** Whether any error messages are output */
    displayError: boolean;
    /**
     * The function to call to map the request to the http request object
     */
    requestMapper: RequestMapper;
    /**
     * The function to call to map the data and paging info after it has been returned from the http request
     */
    responseMapper: ResponseMapper;
    /**
     * The event name to raise after a successful http call has been made
     * This will raise event with the name being the value of this prop
     */
    successEventName: string;
    /**
     * The event name to raise after a failed http call has been made
     * This will raise event with the name being the value of this prop
     */
    failureEventName: string;
    /**
     * The HTTP headers for the request
     */
    private requestHeaders;
    /**
     * The body for the request
     */
    private requestBody;
    /**
     * Whether a response mapper function has been attached.
     * This is used to fire the responseMapperAttached event
     */
    private responseMapperAttached;
    /** Generic Event raised on a response (component consumer can specify the event name) */
    private event;
    /** Event raised on a response */
    private responded;
    private haveError;
    private calling;
    /** Reference to the DOM element */
    private element;
    /**
     * Make the http request when the component has loaded if specified
     * Set the method to post if not specified and the request event is onSubmit
     */
    componentDidLoad(): Promise<any>;
    /**
     * Fire the responseMapperAttached event if a response mapper has just been attached
     */
    componentDidUpdate(): Promise<any>;
    /**
     * Adds or sets and existing request HTTP header value
     * @param {string} name - HTTP header name
     * @param {string} value - HTTP header value
     */
    setRequestHeader(name: string, value: string): Promise<void>;
    /**
     * Adds or sets and existing request HTTP header value
     * @param { [key: string]: string } headers - Object literal containing the headers
     */
    setRequestHeaders(headers: {
        [key: string]: string;
    }): Promise<void>;
    /**
     * Sets the request body
     * @param {any} body - The request body
     */
    setRequestBody(body: any): void;
    /** Makes the http request */
    makeHttpCall(args: IHttpRequest): Promise<any>;
    /**
     * Listens to the specified events
     * Note that the path and method in the event args will override this components props
     */
    handleSubmit(e: CustomEvent): void;
    handleSearch(e: CustomEvent): void;
    handlePageRequest(e: CustomEvent<IPageRequestArgs>): Promise<any>;
    handleClick(): void;
    handleButtonClick(): void;
    handleGenericEvent(e: CustomEvent): void;
    render(): JSX.Element;
    /** Checks whether the event passed is specified as a request event */
    private haveRequestEvent;
    private executePostEvents;
    /** Calls custom function to do any additional mapping for the request */
    private mapRequest;
    /** maps the response data */
    private mapResponse;
    /**
     * This pushes the http request result down any immediate child component that the relevant methods.
     * For child tag-form components, the IHttpResponse will be pushed to submitComplete() on tag-form.
     * For child data bound components such as tag-search and tag-list, the data in IHttpResponse
     * will be pushed to setData() on the child component
     */
    private pushResultToChildren;
    private getSearchCriteria;
}
