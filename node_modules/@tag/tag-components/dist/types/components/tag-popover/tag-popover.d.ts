import '../../stencil.core';
import { Accent } from '../../shared/types';
import { PopoverPosition } from './tag-popover.utils';
export declare class TagPopover {
    /** The CSS selector for the source element for the popover */
    popoverFor: string;
    /** Whether the popover is open */
    open: boolean;
    /** The colour of the arrow */
    arrowAccent: Accent;
    /** Whether to hide the close icon */
    suppressCloseIcon: boolean;
    /** Whether to always open the popover when clicked (rather than toggling opened / closed) */
    alwaysOpenWhenClick: boolean;
    /** How the popover should be positioned */
    position: PopoverPosition;
    /** Event raised when the popover is opened  */
    private opened;
    /** Event raised when the popover is closed  */
    private closed;
    /** The source element that the popover is for */
    private forElement;
    /** The root parent for the element */
    private parentElement;
    /** The position the element should return to when closing */
    private closePosition;
    /** The left offset position of the arrow */
    private arrowLeftOffset;
    private positionX;
    private positionY;
    /** Whether the popup arrow should be hidden (it is when the popover has been pushed up form the bottom of the screen) */
    private hideArrow;
    /** The host element in the DOM */
    private element;
    /** The arrow position direction */
    private arrowPosition;
    /** Flag used to stop a click from firing on buttons straight after Enter or Space is pressed */
    private suppressClick;
    clickHandler(evt: Event): void;
    /**
     * Handles when the open property changes
     * If open is being set to true the popover is made visible and animated in to the users view
     * When a popover is being opened, other popovers are closed
     * If open is being set to false the popover is hidden and animated out of the users view
     * @param {boolean} newShow  - The new value of the open property
     * @param {boolean} currentShow  - The current value of the open property
     */
    openHandler(newShow: boolean, currentShow: boolean): void;
    /** Attach the popover to the source element when the component has loaded */
    componentDidLoad(): void;
    /** Remove any event handlers */
    componentDidUnload(): void;
    render(): JSX.Element;
    /** Returns the CSS class for the arrow */
    private getArrowClass;
    /**
     * Gets the source element that opens the popover
     */
    private getSourceElement;
    /**
     * Gets the parent root element for the popover
     */
    private getParentRootElement;
    /**
     * Shows the popover and closes all other popover instances
     */
    private showPopover;
    /**
     * Closes the popover, animating it out
     */
    private closePopover;
    /**
     * Closes all other popover instances within the parent element
     */
    private closeAllOtherPopovers;
    /**
     * Handles click event on parent root element
     * Closes all popovers instances within the parent element including this one
     */
    private handleParentRootClick;
    /**
     * Handles click event on the source element
     * Opens the popover
     */
    private handleSourceClick;
    /**
     * Handles keydown event on the source element
     * Opens the popover if Space or Enter are pressed
     */
    private handleSourceKeydown;
    /**
     * Closes the popover when ESC is pressed
     */
    private handleKeyDown;
}
