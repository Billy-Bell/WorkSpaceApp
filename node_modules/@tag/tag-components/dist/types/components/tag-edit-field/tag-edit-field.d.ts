import '../../stencil.core';
import { DataType } from '../../shared/types';
import { IFieldValidator } from './tag-edit-field.utils';
/**
 * Encapsulates the rendering of a field including a label and a child component to render the value
 */
export declare class TagEditField {
    /** The id to be place on the input. This will tie the label to the input so that a screen reader can read it correctly */
    id: string;
    /** The name of the field. This is what will be posted as the field name to the http API */
    name: string;
    /** The field label */
    label?: string;
    /** The type of the field that is used for value conversion */
    dataType?: DataType;
    /** The formatting options */
    formattingOptions?: string;
    /** The position of the label */
    labelPosition?: string;
    /** The editor component that will be rendered */
    editor?: 'textbox' | 'multilinetextbox' | 'password' | 'email' | 'number' | 'dropdown' | 'combobox' | 'datepick' | 'checkbox' | 'radio' | 'hidden' | 'filepick' | 'slider';
    /** JSX style object in JSON to apply */
    containerStyle?: string;
    /** JSX style object in JSON to apply */
    labelStyle?: string;
    /** JSX style object in JSON to apply */
    editorStyle?: string;
    /** The placeholder text  */
    placeholder?: string;
    /** The rows for a MultilineTextbox  */
    rows?: number;
    /** The minimum value for a number or slider */
    min: number;
    /** The maximum value for a number or slider */
    max: number;
    /** The increment value for a number or slider */
    step: number;
    /** The default value */
    defaultValue: string;
    /** Whether the field should submit the form if return is pressed */
    allowSubmitOnReturn?: boolean;
    /** The field value */
    value: any;
    /** Whether the field is disabled */
    disabled: boolean;
    /** Whether the field is inline */
    inline: boolean;
    /** The maxlength of the field */
    maxLength?: number;
    /** The item array which is set when the component is loaded from a http call or nested tag-edit-field-option elements */
    private itemsArr;
    /** The validation rule object which is set when the component is loaded from nested tag-validation elements */
    private validationObj;
    /** The value before any conversion */
    private rawValue;
    /** Reference to the DOM element */
    private element;
    /** Event raised when a field changes */
    private valueChange;
    /** Event raised when a field is validated */
    private validated;
    /** The field validation errors  */
    private errors;
    /** Whether the form has been successfully submitted */
    private formSuccessfullySubmitted;
    /** A public method to set the field validation errors */
    setErrors(errors: string[]): void;
    /**
     * Validates the value in the field
     */
    validate(executeOnly?: 'valueChange' | 'blur'): Promise<string[]>;
    /** A public method to set the field value */
    setValue(value: any, suppressValidation?: boolean, suppressChangeEvent?: boolean): Promise<string[]>;
    /**
     * This is a public method to set the data for the field items.
     * If this component is used with a parent tag-http component, tag-http
     * will call this method with the response data.
     */
    setData(data: any): void;
    /** Sets default values for various properties when the component is loading */
    componentWillLoad(): void;
    /**
     * Sets the validation and drop down / radio options when the component had loaded
     * Note that doing this in componentWillLoad() causes unit tests to fail
     */
    componentDidLoad(): void;
    /**
     * Sets the default value from the default value text attribute
     * Called from the form when all the other fields have been loaded and everything has been injected
     */
    setDefaultValue(): void;
    /**
     * Allows the form to sets the submit state
     */
    setFormSuccessfullySubmitted(value: boolean): void;
    /**
     * Sets the focus to the editor
     */
    focusEditor(): void;
    /**
     * Selects the text in the editor
     */
    selectEditorText(): void;
    /**
     * A public method to allow the consumer to the validation rules for a field
     * @param {IFieldValidator[]} validation - An array of validation objects
     */
    setValidation(validation: IFieldValidator[]): void;
    render(): JSX.Element;
    /** Gets the CSS class for the container */
    private getContainerClass;
    /** Gets the CSS class for the label */
    private getLabelClass;
    /** Gets the CSS class for the input */
    private getInputClass;
    /** Gets the field is inline */
    private getInline;
    /** Gets the field label position */
    private getLabelPosition;
    /** Handles a change to a date picker */
    private handleDatePickerValueChange;
    /** Handles a change to file upload */
    private handleFileChange;
    /** Handles a change to an input */
    private handleInput;
    /** Handles a change to an input */
    private handleChange;
    /** Handles validation when blur is called on an input */
    private handleBlur;
    /** Handles a change to a checkbox */
    private handleCheckboxChange;
    /** Gets a reference to the parent form component */
    private getForm;
    /** Sets the type if not set from the editor */
    private setDataType;
    /** Sets the setAllowSubmitOnReturn property if not set from the editor */
    private setAllowSubmitOnReturn;
    /** Sets the field items to nested tag-edit-field-option elements */
    private setOptions;
    /** Sets the selected values within the field items */
    private setOptionsSelectValue;
    /** Sets the validation object from the tag-validation child components */
    private setValidationObject;
    /** The list index if the field is part of a list */
    private getListIndex;
    /**
     * A private central method for setting the field value,
     * doing any value conversion and raising the necessary events
     */
    private internalSetValue;
}
