import '../../stencil.core';
import { Accent, Icon } from '../../shared/types';
import { SortStates } from './sort-machine';
import { IDataTableColumn } from './tag-table.utils';
export declare class TagTable {
    /** The data for the table */
    data: any[];
    /** The current page number  */
    page: number;
    /** The page size. Note that this might not be passed if there is no paging  */
    pageSize?: number;
    /** The total number of pages. Note that this might not be passed if the number of pages is unknown  */
    pageCount?: number;
    /** The total number of records. Note that this might not be passed if the number of records is unknown  */
    recordCount?: number;
    /** The columns for the table */
    columns: IDataTableColumn[];
    /** JSX style object in JSON to apply */
    rowFieldStyle: string;
    /** A button to do an operation on the row */
    button?: string;
    /** The icon for the button */
    buttonIcon?: Icon;
    /** The colour of the button */
    buttonAccent?: Accent;
    /** JSX style object in JSON to apply */
    tableStyle: string;
    height: string;
    sortMap: Map<string, SortStates>;
    /** The root DOM element  */
    private element;
    /** Event raised when a button is clicked  */
    private buttonClick;
    _handleSort(key: string): void;
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http or tag-search component, the parent component
     * will call this method with the response data.
     * @param {IPagedData | any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data: any): void;
    componentDidLoad(): void;
    render(): JSX.Element;
    /**
     * Get the alignment columns and cells
     * @param {string} dataType  - The data type
     */
    private getAlignment;
    /**
     * Get the margin alignment for sortable columns    * @param {string} dataType  - The data type
     */
    private getAlignmentMarginLeft;
    /**
     * Get the margin alignment for sortable columns    * @param {string} dataType  - The data type
     */
    private getAlignmentMarginRight;
    private getColumns;
    /**
     * Get the html for a column header
     * @param {IDataTableColumn} column  - The definition for the column
     */
    private getHeader;
    /**
     * Get the html for the rows
     * @param {IDataTableColumn[]} columns  - The columns for the table
     * @param {any[]} data  - The data for the rows
     */
    private getRows;
    /**
     * Get the html for the cell
     * @param {IDataTableColumn} column  - The column definition
     * @param {any} row  - The data row
     */
    private getCell;
    /**
     * Set the data, page, pageSize and pageCount props from the IPagedData parameter
     * @param {IPagedData} pagedData  - The paged data
     */
    private setPagedData;
    private getTable;
    /**
     * Handles the button click event
     * @param {any} e - The click event args
     * @param {any} row - The data for the row
     */
    private handleButtonClick;
}
