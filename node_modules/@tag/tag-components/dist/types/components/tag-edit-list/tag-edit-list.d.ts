import '../../stencil.core';
import { IListItemSetValue } from './tag-edit-list.utils';
export declare class TagEditList {
    /**
     * The name of the list.
     * During the submission process, the data in this list will be posted under this name
     */
    name: string;
    /**
     * The data that drives the component.
     * This prop is expected to be an array of objects.
     * This prop can be set directly via javascript or via the setData() method
     */
    data: any[];
    /**
     * The class name for the item container.
     * Any utility class can be referenced
     */
    itemContainerClassName?: string;
    /**
     * The class name for the list container.
     * Any utility class can be referenced
     */
    containerClassName?: string;
    /** The min height of the list */
    minHeight?: string;
    /**
     * The height of the list.
     * If this is set, a scrollbar will show when the items go beyond the height
     */
    height?: string;
    /**
     * The max height of the list.
     * If this is set, a scrollbar will show when the items go beyond the height
     */
    maxHeight?: string;
    private element;
    /** Event raised when a value in a list item is changes  */
    private listItemChanged;
    private changedData;
    /** Process the item template when the component loads */
    componentDidLoad(): void;
    /** Process the item template when the component updates */
    componentDidUpdate(): void;
    /**
     * This is a public method to set the data for this component.
     * If this component is used with a parent tag-http, it will call this method with the response data.
     * @param {any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data: any): void;
    /** Subscribe to field value change events and raises the listItemChanged event */
    changeHandler(e: CustomEvent): void;
    /**
     * This is a public method to set a field value.
     * This will push the value down to tag-edit-field
     * @param {IListItemSetValue} args - Contains the the field name, the value, the list item index and whether to suppress validation and the change events
     */
    setValue(args: IListItemSetValue): void;
    render(): JSX.Element;
    private processItemTemplate;
    private setElementFieldListIndexes;
    /** Clears the content in a list item */
    private clearListItemChildren;
    /**
     * Gets the list item nodes.
     * When the app is running normally we get the items from shadowRoot.
     * When the unit tests are running we get the items element.
     */
    private getListItemNodes;
}
