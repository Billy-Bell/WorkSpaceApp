import '../../stencil.core';
import { Accent, DataType, Icon } from '../../shared/types';
import './template-polyfill.js';
export declare class TagList {
    /** Whether multiple items can be selected  */
    multiCheck: boolean;
    /** Whether the checkbox is on the left or right  */
    multiCheckAlign: 'left' | 'right';
    /** The size of the checkbox  */
    multiCheckSize: 'normal' | 'large';
    /** Whether the checkbox is rounded  */
    multiCheckRounded: boolean;
    /** Suppresses select all checkbox */
    multiCheckSuppressSelectAll: boolean;
    /**
     * The data that drives the list.
     * This prop is expected to be an array of objects.
     * This prop can be set directly via javascript or via the setData() method.
     * The primaryField, secondaryField, imageField, leftIconField and rightIconField
     * props should reference properties in each object in this array
     */
    data: any[];
    /** The current page number  */
    page: number;
    /** The page size. Note that this might not be passed if there is no paging  */
    pageSize?: number;
    /** The total number of pages. Note that this might not be passed if the number of pages is unknown  */
    pageCount?: number;
    /** The total number of records. Note that this might not be passed if the number of records is unknown  */
    recordCount?: number;
    /** The field in the data array prop that gives an image path */
    imageField: string;
    /** The height of the image */
    imageHeight: string;
    /** The width of the image */
    imageWidth: string;
    /** The border radius of the image */
    imageBorderRadius: string;
    /** The border radius of the image */
    imageObjectFit: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
    /** The field in the data array prop that gives an avatar source */
    avatarSrcField: string;
    /** The field in the data array prop that gives an avatar placeholder */
    avatarPlaceholderField: string;
    /** The size of the avatar */
    avatarSize: string;
    /** The left icon name. Use if the icon is the same for all list items */
    leftIcon: Icon;
    /** The field in the data array prop that gives an icon name for an icon on the left */
    leftIconField: string;
    /** The left icon size */
    leftIconSize: number;
    /** The left icon color */
    leftIconAccent: Accent;
    /** The field in the data array prop that gives the left icon color */
    leftIconAccentField: string;
    /** The right icon name. Use if the icon is the same for all list items */
    rightIcon: Icon;
    /** The field in the data array prop that gives an icon name for an icon on the right */
    rightIconField: string;
    /** The right icon size */
    rightIconSize: number;
    /** The right icon color */
    rightIconAccent: Accent;
    /** The field in the data array prop that gives the right icon color */
    rightIconAccentField: string;
    /** The field in the data array prop that gives the primary value */
    primaryField: string;
    /** Whether the primary field should be inline */
    primaryFieldInline?: boolean;
    /** The field in the data array prop that gives the secondary value */
    secondaryField?: string;
    /** An icon to appear next to the secondary field */
    secondaryFieldIcon?: Icon;
    /** The accent for the secondary icon */
    secondaryFieldIconAccent?: Accent;
    /** Whether the secondary field should be inline */
    secondaryFieldInline?: boolean;
    /** The label for left field 1 */
    leftLabel1?: string;
    /** The field in the data array prop that gives the value under the secondary value */
    leftField1?: string;
    /** An icon to appear next to the left field 1 */
    leftField1Icon?: Icon;
    /** The accent for the left field 1 icon */
    leftField1IconAccent?: Accent;
    /** Whether left field 1 should be inline */
    leftField1Inline?: boolean;
    /** The label for left field 2 */
    leftLabel2?: string;
    /** The field under leftField1 */
    leftField2?: string;
    /** An icon to appear next to the left field 2 */
    leftField2Icon?: Icon;
    /** The accent for the left field 2 icon */
    leftField2IconAccent?: Accent;
    /** Whether left field 2 should be inline */
    leftField2Inline?: boolean;
    /** The label for left field 3 */
    leftLabel3?: string;
    /** The field under leftField2 */
    leftField3?: string;
    /** An icon to appear next to the left field 3 */
    leftField3Icon?: Icon;
    /** The accent for the left field 3 icon */
    leftField3IconAccent?: Accent;
    /** Whether left field 3 should be inline */
    leftField3Inline?: boolean;
    /** The label for left field 4 */
    leftLabel4?: string;
    /** The field under leftField3 */
    leftField4?: string;
    /** An icon to appear next to the left field 4 */
    leftField4Icon?: Icon;
    /** The accent for the left field 4 icon */
    leftField4IconAccent?: Accent;
    /** Whether left field 4 should be inline */
    leftField4Inline?: boolean;
    /** The label for left field 5 */
    leftLabel5?: string;
    /** The field under leftField4 */
    leftField5?: string;
    /** An icon to appear next to the left field 5 */
    leftField5Icon?: Icon;
    /** The accent for the left field 5 icon */
    leftField5IconAccent?: Accent;
    /** Whether left field 5 should be inline */
    leftField5Inline?: boolean;
    /** The label for right field 1 */
    rightLabel1?: string;
    /** The field in the data array prop that appears at the right of the list */
    rightField1?: string;
    /** An icon to appear next to the right field 1 */
    rightField1Icon?: Icon;
    /** The accent for the right field 1 icon */
    rightField1IconAccent?: Accent;
    /** Whether right field 1 should be inline */
    rightField1Inline?: boolean;
    /** The label for right field 2 */
    rightLabel2?: string;
    /** The field under rightField1 */
    rightField2?: string;
    /** An icon to appear next to the right field 2 */
    rightField2Icon?: Icon;
    /** The accent for the right field 2 icon */
    rightField2IconAccent?: Accent;
    /** Whether right field 2 should be inline */
    rightField2Inline?: boolean;
    /** The label for right field 3 */
    rightLabel3?: string;
    /** The field under rightField2 */
    rightField3?: string;
    /** An icon to appear next to the right field 3 */
    rightField3Icon?: Icon;
    /** The accent for the right field 3 icon */
    rightField3IconAccent?: Accent;
    /** Whether right field 3 should be inline */
    rightField3Inline?: boolean;
    /** The label for right field 4 */
    rightLabel4?: string;
    /** The field under rightField3 */
    rightField4?: string;
    /** An icon to appear next to the right field 4 */
    rightField4Icon?: Icon;
    /** The accent for the right field 4 icon */
    rightField4IconAccent?: Accent;
    /** Whether right field 4 should be inline */
    rightField4Inline?: boolean;
    /** The label for right field 5 */
    rightLabel5?: string;
    /** The field under rightField4 */
    rightField5?: string;
    /** An icon to appear next to the right field 5 */
    rightField5Icon?: Icon;
    /** The accent for the right field 5 icon */
    rightField5IconAccent?: Accent;
    /** Whether right field 5 should be inline */
    rightField5Inline?: boolean;
    /** The primary field data type */
    primaryFieldType: DataType;
    /** The secondary field data type */
    secondaryFieldType?: DataType;
    /** The left field 1 field data type */
    leftField1Type?: DataType;
    /** The left field 2 field data type */
    leftField2Type?: DataType;
    /** The left field 3 field data type */
    leftField3Type?: DataType;
    /** The left field 4 field data type */
    leftField4Type?: DataType;
    /** The left field 5 field data type */
    leftField5Type?: DataType;
    /** The right field 1 field data type */
    rightField1Type?: DataType;
    /** The right field 2 field data type */
    rightField2Type?: DataType;
    /** The right field 3 field data type */
    rightField3Type?: DataType;
    /** The right field 4 field data type */
    rightField4Type?: DataType;
    /** The right field 5 field data type */
    rightField5Type?: DataType;
    /** JSX style object in JSON to apply to the primary field */
    primaryFieldStyle: string;
    /** JSX style object in JSON to apply to the secondary field */
    secondaryFieldStyle?: string;
    /** JSX style object in JSON to apply */
    leftLabel1Style?: string;
    /** JSX style object in JSON to apply */
    leftLabel2Style?: string;
    /** JSX style object in JSON to apply */
    leftLabel3Style?: string;
    /** JSX style object in JSON to apply */
    leftLabel4Style?: string;
    /** JSX style object in JSON to apply */
    leftLabel5Style?: string;
    /** JSX style object in JSON to apply */
    rightLabel1Style?: string;
    /** JSX style object in JSON to apply */
    rightLabel2Style?: string;
    /** JSX style object in JSON to apply */
    rightLabel3Style?: string;
    /** JSX style object in JSON to apply */
    rightLabel4Style?: string;
    /** JSX style object in JSON to apply */
    rightLabel5Style?: string;
    /** JSX style object in JSON to apply */
    leftField1Style?: string;
    /** JSX style object in JSON to apply */
    leftField2Style?: string;
    /** JSX style object in JSON to apply */
    leftField3Style?: string;
    /** JSX style object in JSON to apply */
    leftField4Style?: string;
    /** JSX style object in JSON to apply */
    leftField5Style?: string;
    /** JSX style object in JSON to apply */
    rightField1Style?: string;
    /** JSX style object in JSON to apply */
    rightField2Style?: string;
    /** JSX style object in JSON to apply */
    rightField3Style?: string;
    /** JSX style object in JSON to apply */
    rightField4Style?: string;
    /** JSX style object in JSON to apply */
    rightField5Style?: string;
    /** JSX style object in JSON to apply */
    primaryFieldStyleField?: string;
    /** JSX style object in JSON to apply */
    secondaryFieldStyleField?: string;
    /** JSX style object in JSON to apply */
    leftField1StyleField?: string;
    /** JSX style object in JSON to apply */
    leftField2StyleField?: string;
    /** JSX style object in JSON to apply */
    leftField3StyleField?: string;
    /** JSX style object in JSON to apply */
    leftField4StyleField?: string;
    /** JSX style object in JSON to apply */
    leftField5StyleField?: string;
    /** JSX style object in JSON to apply */
    rightField1StyleField?: string;
    /** JSX style object in JSON to apply */
    rightField2StyleField?: string;
    /** JSX style object in JSON to apply */
    rightField3StyleField?: string;
    /** JSX style object in JSON to apply */
    rightField4StyleField?: string;
    /** JSX style object in JSON to apply */
    rightField5StyleField?: string;
    /** button to do an operation on the list item */
    button1?: string;
    /** The icon for the button */
    button1Icon?: Icon;
    /** The colour of the button */
    button1Accent?: Accent;
    /** Whether the button is rounded */
    button1Rounded?: boolean;
    /** Whether the button is squared */
    button1Squared?: boolean;
    /** 2nd button to do an operation on the list item */
    button2?: string;
    /** The icon for the 2nd button */
    button2Icon?: Icon;
    /** The colour of the 2nd button */
    button2Accent?: Accent;
    /** Whether the button is rounded */
    button2Rounded?: boolean;
    /** Whether the button is squared */
    button2Squared?: boolean;
    /** 3rd button to do an operation on the list item */
    button3?: string;
    /** The icon for the 3rd button */
    button3Icon?: Icon;
    /** The colour of the 3rd button */
    button3Accent?: Accent;
    /** Whether the button is rounded */
    button3Rounded?: boolean;
    /** Whether the button is squared */
    button3Squared?: boolean;
    /** 4th button to do an operation on the list item */
    button4?: string;
    /** The icon for the 4th button */
    button4Icon?: Icon;
    /** The colour of the 4th button */
    button4Accent?: Accent;
    /** Whether the button is rounded */
    button4Rounded?: boolean;
    /** Whether the button is squared */
    button4Squared?: boolean;
    /** 5th button to do an operation on the list item */
    button5?: string;
    /** The icon for the 5th button */
    button5Icon?: Icon;
    /** The colour of the 5th button */
    button5Accent?: Accent;
    /** Whether the button is rounded */
    button5Rounded?: boolean;
    /** Whether the button is squared */
    button5Squared?: boolean;
    /** The min height of the list */
    minHeight?: string;
    /**
     * The height of the list.
     * If this is set, a scrollbar will show when the items go beyond the height
     */
    height?: string;
    /**
     * The max height of the list.
     * If this is set, a scrollbar will show when the items go beyond the height
     */
    maxHeight?: string;
    /**
     * The class name for the container.
     */
    containerClassName?: string;
    /**
     * JSX style object in JSON to apply to the container for the list, pager and multi-select container.
     */
    containerStyle?: string;
    /**
     * JSX style object in JSON to apply to the container for the list.
     */
    listContainerStyle?: string;
    /**
     * The class name for the item container.
     */
    itemContainerClassName?: string;
    /**
     * The field to get the style for the item container.
     */
    itemContainerStyleField?: string;
    /**
     * JSX style object in JSON to apply to the list items.
     */
    itemContainerStyle?: string;
    /**
     * Whether items in the list can be selected and allow the listItemSelected event to be raised
     */
    selectable: boolean;
    /** The index of the list item that is selected */
    private selectedIndex;
    /** The checked items */
    private checkedItems;
    private selectAllChecked;
    /** Function returned if a template if present when the component loads */
    private templateBuilder;
    /** Set to store link and style tags so they are only rendered once */
    private stylingElements;
    /** Event raised when a list item is selected  */
    private listItemSelected;
    /** Event raised when a list item or list items are checked  */
    private listItemsChecked;
    /** Event raised when a button is clicked  */
    private buttonClick;
    private element;
    /** Handler that resets the selected item when the data prop is set */
    dataChangeHandler(): void;
    /** Process the list template when the component loads */
    componentDidLoad(): void;
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http or tag-search component, the parent component
     * will call this method with the response data.
     * @param {IPagedData | any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data: any): void;
    /**
     * This is a public method to set the selected item in the list
     * @param {any} item - The data item to select
     * @param {boolean} suppressItemSelectedEvent - Whether the "listItemSelected" event should not trigger. Note that "listItemSelected" will only trigger anyway if "selectable" is true
     */
    select(item: any, suppressItemSelectedEvent: boolean): void;
    /**
     * This is a public method to get the checked items
     */
    getCheckedItems(): any[];
    /**
     * This is a public method to set the checked items
     */
    setCheckedItems(items: any[]): void;
    /** This a public method to toggle all selected checkboxes */
    toggleCheckedItems(checked: boolean): void;
    render(): JSX.Element;
    /**
     * Renders the left and right icons
     * Note that the icon and accent coming from the data will override the static setting
     */
    private renderIcon;
    private renderField;
    /** Gets the styles for the list container */
    private getListContainerStyle;
    /** Gets the styles for the list item container */
    private getItemContainerStyle;
    /** Gets the CSS class for list items */
    private getListItemClassList;
    private processListTemplate;
    /**
     * Set the data, page, pageSize and pageCount props from the IPagedData parameter
     * @param {IPagedData} pagedData  - The paged data
     */
    private setPagedData;
    /** Gets the index of the list item in the list */
    private getListIndex;
    private resetSelectedIndex;
    /**
     * Handles a list item click
     * @param {any} item - The data for the list item
     * @param {any} e - The arguments from the click event
     */
    private handleClick;
    /**
     * Handles a list item keydown
     * @param {any} item - The data for the list item
     * @param {any} e - The arguments from the keydown event
     */
    private handleKeydown;
    /**
     * Selects a list item
     * @param {any} item - The data for the list item
     * @param {any} listItemElement - The LI item to select
     */
    private selectItem;
    /**
     * Creates a new data array with a property for whether
     * each item is selected or not
     */
    private createDataWithSelected;
    private handleButtonClick;
    /** Handles a change to a checkbox */
    private handleCheckboxChange;
    private getItemIndex;
    private removeCheckedItem;
    private addCheckedItem;
    private isChecked;
}
