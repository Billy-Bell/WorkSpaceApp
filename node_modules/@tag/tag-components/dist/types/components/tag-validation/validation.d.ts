import { IHttpResponse } from '../../shared/http';
import { IFieldValidator } from '../tag-edit-field/tag-edit-field.utils';
import { IFormErrors, IFormValues } from '../tag-form/formInterfaces';
/**
 * Converts a tag-validation elements to an array of IFieldValidator objects
 * @param {HTMLTagValidationElement[]} validationTags - The tag-validation elements
 * @returns {IFieldValidator[]} An array of the validation rules in object format
 */
export declare const convertTagValidationToObject: (validationTags: HTMLTagValidationElement[]) => IFieldValidator[];
interface IValidateFieldResult {
    valid: boolean;
    errors: string[];
}
/**
 * Validates a field
 * @param {string} fieldName - The field name
 * @param {IFieldValidator[]} validations - The validation rules to apply
 * @param {IFormValues} values - All the values on the form
 * @returns {Promise<IValidateFieldResult>} - The result of the validation check
 */
export declare const validateField: (fieldName: string, validations: IFieldValidator[], values: IFormValues, executeOnly?: "blur" | "valueChange") => Promise<IValidateFieldResult>;
/**
 * Checks whether there are any validation rules that need to execute when the value is changed
 * @param {IFieldValidator[]} validations - The validation rules to check
 * @returns {boolean} - Whether there are validation rules that need to execute when the value is changed
 */
export declare const haveValueChangeValidation: (validations: IFieldValidator[]) => boolean;
export interface IServerErrors {
    [key: string]: string[];
}
/**
 * Maps an ASP.NET server validation error object (IServerErrors) to our errors object (IFormErrors)
 * @param {response} errors - The full http response
 * @param {string[]} fieldNames - The field names on the form
 */
export declare const mapServerValidation: (response: IHttpResponse, fieldNames: string[]) => IFormErrors;
/**
 * Validates that the value has been populated
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const required: (values: IFormValues, fieldName: string) => string;
/**
 * Validates that the value is a correctly formatted email
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const isEmail: (values: IFormValues, fieldName: string) => string;
/**
 * Validates that the value is a correctly formatted URL
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const isUrl: (values: IFormValues, fieldName: string) => string;
/**
 * Validates that the value hasn't exceeded a certain amount of characters
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {number} length - The length to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const maxLength: (values: IFormValues, fieldName: string, length: number) => string;
/**
 * Validates that the value is at least a certain amount of characters
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {number} length - The length to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const minLength: (values: IFormValues, fieldName: string, length: number) => string;
/**
 * Validates that the value is in an array
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {any[]} array - The array to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const inArray: (values: IFormValues, fieldName: string, array: any[]) => string;
/**
 * Validates that the value is not in an array
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {any[]} array - The array to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const notInArray: (values: IFormValues, fieldName: string, array: any[]) => string;
/**
 * Validates that the value matches the specified regex format
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {string} regex - The regular expression to check
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const matches: (values: IFormValues, fieldName: string, regex: string) => string;
/**
 * Validates that the value is greater than the specified value
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {any} limit - The value the field value must be greater than
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const greaterThan: (values: IFormValues, fieldName: string, limit: any) => string;
/**
 * Validates that the value is greater than or equal to the specified value
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {any} limit - The value the field value must be greater than or equal to
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const greaterThanOrEqualTo: (values: IFormValues, fieldName: string, limit: any) => string;
/**
 * Validates that the value is less than the specified value
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {any} limit - The value the field value must be less than
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const lessThan: (values: IFormValues, fieldName: string, limit: any) => string;
/**
 * Validates that the value is less than or equal to the specified value
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {any} limit - The value the field value must be less than or equal to
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const lessThanOrEqualTo: (values: IFormValues, fieldName: string, limit: any) => string;
/**
 * Validates that the value is in an http response
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {string | {path: string, responseBodyArrayProp: string, objectProp?: string}} path - The http api path to call and the response property to look in
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const inHttpResponse: (values: IFormValues, fieldName: string, args: string | {
    path: string;
    responseBodyArrayProp: string;
    objectProp?: string;
}) => Promise<string>;
/**
 * Validates that the value is in an http response
 * @param {IFormValues} values - The form field values
 * @param {string} fieldName - The field name to check
 * @param {string | {path: string, responseBodyArrayProp: string, objectProp?: string}} path - The http api path to call and the response property to look in
 * @returns {string} - An empty string (if valid) or the error message (if invalid)
 */
export declare const notInHttpResponse: (values: IFormValues, fieldName: string, args: string | {
    path: string;
    responseBodyArrayProp: string;
    objectProp?: string;
}) => Promise<string>;
export {};
