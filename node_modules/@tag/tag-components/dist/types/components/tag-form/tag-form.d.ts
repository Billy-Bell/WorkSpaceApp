import '../../stencil.core';
import { IHttpResponse } from '../../shared/http';
import { Accent, Icon } from '../../shared/types';
import { IFormErrors, IFormValues } from './formInterfaces';
export declare class TagForm {
    /** The form type. By default this is a generic 'form'  */
    type: string;
    /** Whether the fields in the form are inline */
    inline: boolean;
    submitButtonText: string;
    submitButtonIcon: Icon;
    submitButtonIconAccent: Accent;
    submitButtonAccent: Accent;
    submitButtonDisabled: boolean;
    submitSuccessMessage: string;
    submitFailureMessage: string;
    submitValidationMessage: string;
    /**
     * A function that can be called when the submission process starts to set any additional values.
     */
    submitStarting: (values: IFormValues) => Promise<{
        values: IFormValues;
        cancel: boolean;
    }>;
    /**
     * A function that maps server validation errors to IFormErrors which is the format this component expects.
     * By default the ASP.NET MVC mapper is used
     */
    serverValidationMapper: (response: IHttpResponse, fieldNames: string[]) => IFormErrors;
    formStyle: string;
    /** The errors for each field in this form */
    private errors;
    /** The state of a submit operation */
    private submitState;
    /** The values for each field in this form  */
    private values;
    /** Reference to the DOM element */
    private element;
    /** Event that can be subscribed to handle a form submission */
    private submit;
    watchHandler(newValue: boolean, oldValue: boolean): void;
    /** Public method to get the field values */
    getFieldValues(): IFormValues;
    /** Public method to get a field value */
    getFieldValue(fieldName: string): any;
    /** Public method to set field values */
    setFieldValues(values: IFormValues): void;
    /** Public method to set a field value */
    setFieldValue(fieldName: string, value: any): void;
    /** Public method to set a validation error */
    setError(fieldName: string, errors: string[]): void;
    /** Subscribe to field value change events  */
    changeHandler(e: CustomEvent): Promise<any>;
    /** Subscribe to field validated events  */
    validatedHandler(e: CustomEvent): Promise<any>;
    submitComplete(response: IHttpResponse): void;
    render(): JSX.Element;
    /** Set any field default values and request field items after the component has loaded */
    /** Gets references to field DOM elements */
    private getFields;
    /** Sets the default values on all the fields on the form */
    /** Validates all the fields on the form */
    private validateForm;
    /** Returns whether there are any validation errors on the form */
    private haveErrors;
    /** Handles a key press on the form */
    private handleKeyPress;
    /**
     * Handles the form submission
     * This may be handled manually by subscribing to the onSubmit event
     * When handled automatically, the form values will be posted to the specified http API endpoint
     */
    private handleSubmit;
    private emptySubmitStarting;
}
