import '../../stencil.core';
export declare class TagSearch {
    /** The placeholder on the search input */
    placeholder?: string;
    /** The delay in milliseconds after the user stops typing before the search is invoked */
    delay?: number;
    /** Whether the search box should have a border */
    borderless?: boolean;
    /** Whether we are viewing the data as a list or record by record */
    private viewMode;
    /** The search result data */
    private data;
    /** Whether data is being loaded */
    private isLoading;
    /** Whether there was an error loading data */
    private haveError;
    /** Reference to the tag-search DOM element */
    private element;
    /** Event raised when the search is invoked  */
    private search;
    /** Show the nested list and hide the nested record and map any data when the component has loaded */
    componentDidLoad(): void;
    /** This is a public method to get the search criteria */
    getSearch(): string;
    /**
     * This is a public method to set the search criteria
     * @param {string} search - The search criteria
     * @param {boolean} suppressSearch - Whether the search event is suppresed
     */
    setSearch(search: string, suppressSearch?: boolean): void;
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http, tag-http
     * will call this method with the response data.
     * This method pushes data down to immediate child tag-list and tag-record components by
     * calling their setData method.
     * @param {IPagedData | any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data: any): void;
    /**
     * Sets the state in this component when a search is occurring
     * Note that the higher level tag-http will pick up this event as well and do the search
     */
    handleSearch(): Promise<any>;
    /** handles changes to the selected record */
    handleItemSelected(e: CustomEvent): void;
    render(): JSX.Element;
    /** Gets the nested tag-list component */
    private getList;
    /** Gets the nested tag-record component */
    private getRecord;
    /** Gets the nested tag-list component */
    private getTable;
    /** Shows the nested list and hides the nested record */
    private showListView;
    /** Shows the nested record and hides the nested list */
    private showRecordView;
    /** Set the component ready to slide in */
    private setSlideOn;
    /** Turns the slide transition off the component */
    private setSlideOff;
    /** Handles record view click */
    private handleRecordViewClick;
    /** Handles list view click */
    private handleListViewClick;
    private haveMultipleViews;
    /** Returns a reference to tag-searchbox */
    private getSearchBox;
    /** Returns a reference to tag-search box input */
    private getSearchBoxInput;
    /** Whether there is any data */
    private haveData;
}
