/**
 * Replaces variable references in a string with their real values
 * Variables are in {{}}
 * @param {string} text - The text that contains variable references
 * @param {any} context - An object containing the variable values
 */
export declare const variableReplacer: (text: string, context: any) => string;
/**
 * Replaces variable references in a node and its child nodes
 * Variables are in {{}}
 * @param {Element} element - The element that contains variable references
 * @param {any} context - An object containing the variable values
 */
export declare const nodeVariableReplacer: (element: Element, context: any) => Element;
/**
 * Replaces variable references in the text content of a DOM node
 * Variables are in {{}}
 * A safe copy of the binding expression is saved in a property called "bind"
 * @param {Element} element - The element that contains variable references
 * @param {any} context - An object containing the variable values
 */
export declare const domTextContentReplacer: (element: Element, context: any) => void;
/**
 * Replaces variable references in attributes in a DOM node
 * Variables are in {{}}
 * A safe copy of the binding expression is saved in a property called "bind"
 * @param {HTMLElement} element - The element that contains variable references
 * @param {any} context - An object containing the variable values
 */
export declare const domAttributeVariableReplacer: (element: HTMLElement, context: any) => HTMLElement;
/** Sets the data in list item fields */
export declare const setElementFieldData: (itemFragment: DocumentFragment, itemIndex: number, data: any[]) => void;
/** Process field references in the template */
export declare const setElementFieldReferences: (itemFragment: DocumentFragment, itemIndex: number, data: any[]) => void;
/**
 * Sets values on tag-field given a data record
 * @param {NodeListOf<HTMLTagFieldElement>} fieldNodes - The tag-fields
 * @param {any} data - The data record
 */
export declare const setFieldData: (fieldNodes: NodeListOf<HTMLTagFieldElement> | NodeListOf<HTMLTagEditFieldElement> | HTMLTagFieldElement[], record: any) => void;
/**
 * A reducer function that takes a list of vdom to reduce to and a list of nodes to parse
 * @param vdom reducer function previous parameter
 * @param node item to be parsed
 */
export declare function convertNodeToVdom(item: any, stylingElements: Set<Node>): (vdom: any[], node: Node) => any;
