import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import './stencil.core';


import {
  Accent,
  AlertType,
  ButtonSize,
  DataType,
  IChangeArgs,
  Icon,
  IEvent,
  IFileChange,
  IPageRequestArgs,
  IRecordRequestArgs,
  IValidatedArgs,
  TextType,
} from './shared/types';
import {
  EventEmitter,
} from './stencil.core';
import {
  ICardProfileButtonClick,
} from './components/tag-card-profile/tag-card-profile.utils';
import {
  ICheckboxChangeArgs,
} from './components/tag-checkbox/tag-checkbox.utils';
import {
  IComboChangeArgs,
  IComboFilterResult,
} from './components/tag-combobox/tag-combobox.utils';
import {
  IDatePickerChangeArgs,
} from './components/tag-date-picker/tag-date-picker.utils';
import {
  IFieldValidator,
} from './components/tag-edit-field/tag-edit-field.utils';
import {
  IListItemChanged,
  IListItemSetValue,
} from './components/tag-edit-list/tag-edit-list.utils';
import {
  IFormErrors,
  IFormValues,
  ISubmitArgs,
} from './components/tag-form/formInterfaces';
import {
  IHttpRequest,
  IHttpResponse,
} from './shared/http';
import {
  TagEditField,
} from './components/tag-edit-field/tag-edit-field';
import {
  RequestMapper,
  ResponseMapper,
} from './components/tag-http/tag-http.utils';
import {
  IListItemButtonClick,
  IListItemsChecked,
  IListItemSelected,
} from './components/tag-list/tag-list.utils';
import {
  IModalButtonClick,
} from './components/tag-modal/tag-modal.utils';
import {
  PopoverPosition,
} from './components/tag-popover/tag-popover.utils';
import {
  ISliderChangeArgs,
} from './components/tag-slider/tag-slider.utils';
import {
  IDataTableColumn,
  IRowButtonClick,
} from './components/tag-table/tag-table.utils';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface TagAccessLogo {
      /**
       * The height of the logo 
       */
      'height': string;
      /**
       * Whether to include "access" 
       */
      'name': boolean;
    }

    interface TagAlert {
      /**
       * JSX style object in JSON to apply to the alert 
       */
      'alertStyle': string;
      /**
       * The alert type to display 
       */
      'alertType': 'alert' | 'toast' | 'product';
      /**
       * Whether the alert can be closed 
       */
      'closeable': boolean;
      'hide': () => void;
      /**
       * The product image source, when using product alert types 
       */
      'iconSrc': string;
      /**
       * Whether the text in the alert should be on the same line as the icon (true) or underneath it 
       */
      'inline': boolean;
      /**
       * the product title to display, when using product alert types 
       */
      'productTitle': string;
      'show': () => void;
      /**
       * The number of milliseconds before the alert is closed 
       */
      'showDuration': number;
      /**
       * The text in the alert 
       */
      'text': string;
      /**
       * The type of the alert 
       */
      'type': AlertType;
      /**
       * Whether the alert is visible 
       */
      'visible': boolean;
      /**
       * The width of the alert 
       */
      'width': string;
    }

    interface TagAppHeader {
      /**
       * The accent colour for top border of the header as well as the icon 
       */
      'accent': Accent;
      /**
       * The title for the app 
       */
      'heading': string;
      /**
       * The colour of the title text 
       */
      'headingAccent': Accent;
      /**
       * The icon for the app 
       */
      'icon': Icon;
      /**
       * The colour of the icon background 
       */
      'iconAccent': Accent;
    }

    interface TagAvatar {
      /**
       * JSX style object in JSON to apply to the primary field 
       */
      'avatarStyle': string;
      /**
       * The text to display in the button badge 
       */
      'badge': string;
      /**
       * The text to display in the button badge 
       */
      'badgeAccent': Accent;
      /**
       * placeholder text when there is no image 
       */
      'placeholder': string;
      /**
       * size of the avatar 
       */
      'size': string;
      /**
       * source of the avatar image 
       */
      'src': string;
    }

    interface TagBadge {
      /**
       * The accent colour 
       */
      'accent': Accent;
      /**
       * The size of the badge 
       */
      'size': string;
      /**
       * The value on the badge 
       */
      'value': string;
    }

    interface TagBar {
      /**
       * The accent colour 
       */
      'accent': Accent;
      /**
       * The height of the container 
       */
      'height': string;
      /**
       * Whether the text is on the same line as the bar 
       */
      'inline': boolean;
      /**
       * The text to display 
       */
      'text': string;
      /**
       * The % value of the bar 
       */
      'value': number;
      /**
       * The width of the container 
       */
      'width': string;
    }

    interface TagButton {
      /**
       * Colour of the button 
       */
      'accent': Accent;
      /**
       * The text to display in the button badge 
       */
      'badge': string;
      /**
       * The text to display in the button badge 
       */
      'badgeAccent': Accent;
      /**
       * If set to true displays badge inline next to button text, else the badge is displayed top right 
       */
      'badgeInline': boolean;
      /**
       * Whether the button is disabled 
       */
      'disabled': boolean;
      /**
       * The icon to display in the button 
       */
      'icon': Icon;
      /**
       * The icon accent 
       */
      'iconAccent': Accent;
      /**
       * The button minimum width 
       */
      'minWidth': string;
      /**
       * Whether the button is rounded  
       */
      'rounded': boolean;
      /**
       * The Size of the button 
       */
      'size': ButtonSize;
      /**
       * Whether the button is squared  
       */
      'squared': boolean;
      /**
       * The button text 
       */
      'text': string;
      /**
       * The type of the button 
       */
      'type': 'button' | 'submit' | 'reset';
    }

    interface TagCardKpi {
      /**
       * The background colour for the KPI 
       */
      'accent': Accent;
      /**
       * The label for the KPI 
       */
      'label': string;
      /**
       * Whether the value is under the label (vertical) or at the side (horizontal) 
       */
      'orientation': 'vertical' | 'horizontal';
      /**
       * The KPI value 
       */
      'value': string;
    }

    interface TagCardOkr {
      /**
       * Highlight the left border with an access colour 
       */
      'accent': Accent;
      /**
       * A string to be displayed by the date label 
       */
      'date': string;
      /**
       * The heading for the OKR which is usually the objective 
       */
      'heading': string;
      /**
       * The heading type 
       */
      'headingType': TextType;
      /**
       * Name of the person who owns the OKR 
       */
      'person': string;
      /**
       * The size of the progress donut 
       */
      'progressSize': string;
      /**
       * Percentage complete of the OKR 
       */
      'progressValue': number;
    }

    interface TagCardProfile {
      /**
       * The icon of the 1st option 
       */
      'button1Icon': Icon;
      /**
       * The icon of the 2nd option 
       */
      'button2Icon': Icon;
      /**
       * The icon of the 3rd option 
       */
      'button3Icon': Icon;
      /**
       * The icon of the 4th option 
       */
      'button4Icon': Icon;
      /**
       * The icon of the 5th option 
       */
      'button5Icon': Icon;
      /**
       * The heading for the card 
       */
      'heading': string;
      /**
       * The heading type 
       */
      'headingType': TextType;
      /**
       * source of the profile image 
       */
      'image': string;
      /**
       * The href for link 1 
       */
      'linkHref1': string;
      /**
       * The href for link 2 
       */
      'linkHref2': string;
      /**
       * A link displayed under the titles 
       */
      'linkText1': string;
      /**
       * A link displayed under link 1 
       */
      'linkText2': string;
      /**
       * placeholder text when there is no image 
       */
      'placeholder': string;
      /**
       * A string to be displayed under the heading 
       */
      'subTitle1': string;
      /**
       * The subtitle1 type 
       */
      'subTitle1Type': TextType;
      /**
       * A string to be displayed under subTitle1 
       */
      'subTitle2': string;
      /**
       * The subtitle2 type 
       */
      'subTitle2Type': TextType;
      /**
       * A string to be displayed under the titles 
       */
      'text1': string;
      /**
       * The text1 type 
       */
      'text1Type': TextType;
      /**
       * A string to be displayed under text1 
       */
      'text2': string;
      /**
       * The text2 type 
       */
      'text2Type': TextType;
      /**
       * width of the card 
       */
      'width': string;
    }

    interface TagCard {
      /**
       * The colour of the left border 
       */
      'accent': Accent;
      /**
       * The path to an avatar 
       */
      'avatar': string;
      /**
       * The background colour 
       */
      'backgroundAccent': Accent;
      /**
       * The background image on the card 
       */
      'backgroundImage': string;
      /**
       * An button to show 
       */
      'button': string;
      /**
       * The button accent  
       */
      'buttonAccent': Accent;
      /**
       * Whether the button is disabled  
       */
      'buttonDisabled': boolean;
      /**
       * The button icon  
       */
      'buttonIcon': Icon;
      /**
       * The button size  
       */
      'buttonSize': ButtonSize;
      /**
       * Heading text 
       */
      'heading': string;
      /**
       * The heading type 
       */
      'headingType': TextType;
      /**
       * An icon to show 
       */
      'icon': Icon;
      /**
       * The icon accent  
       */
      'iconAccent': Accent;
      /**
       * The icon size  
       */
      'iconSize': number;
      /**
       * The text to display in the card 
       */
      'text': string;
      /**
       * The text type 
       */
      'textType': TextType;
      /**
       * The version of the card 
       */
      'version': '1' | '2';
    }

    interface TagCheckbox {
      /**
       * The accent  
       */
      'accent': Accent;
      /**
       * Whether the checkbox is checked  
       */
      'checked': boolean;
      /**
       * Whether the checkbox is disabled  
       */
      'disabled': boolean;
      /**
       * Sets the focus to the checkbox
       */
      'focusCheckbox': () => void;
      /**
       * The id of the input  
       */
      'id': string;
      /**
       * The label  
       */
      'label': string;
      /**
       * The name of the input  
       */
      'name': string;
      /**
       * Rounded checkbox  
       */
      'rounded': boolean;
      /**
       * The size  
       */
      'size': 'normal' | 'large';
      'textAlign': 'left' | 'right';
    }

    interface TagCode {
      /**
       * Property description 
       */
      'code': string;
      'language': string;
    }

    interface TagCombobox {
      /**
       * Whether the input has a border 
       */
      'borderless': boolean;
      /**
       * The data that drives the list
       */
      'data': any[];
      /**
       * The delay in milliseconds after the user stops typing before the filter is invoked 
       */
      'delay': number;
      /**
       * Whether the component is disabled 
       */
      'disabled': boolean;
      /**
       * Whether the component should search for the value based on what the user has entered 
       */
      'doNotSuggest': boolean;
      /**
       * The function to call to filter the data
       */
      'filter': (criteria: string, data: any[]) => IComboFilterResult;
      /**
       * Sets the focus to the combobox
       */
      'focusInput': () => void;
      /**
       * The id of the input 
       */
      'id': string;
      /**
       * The field in the data array prop that gives an image path 
       */
      'imageField': string;
      /**
       * Whether the input is disabled 
       */
      'inputDisabled': boolean;
      /**
       * The styles to apply to the input 
       */
      'inputStyle': string;
      /**
       * The field in the data array prop that gives the value under the secondary value 
       */
      'leftField1': string;
      /**
       * An icon to appear next to the left field 1 
       */
      'leftField1Icon': Icon;
      /**
       * The accent for the left field 1 icon 
       */
      'leftField1IconAccent': Accent;
      /**
       * Whether left field 1 should be inline 
       */
      'leftField1Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1StyleField': string;
      /**
       * The left field 1 field data type 
       */
      'leftField1Type': DataType;
      /**
       * The field under leftField1 
       */
      'leftField2': string;
      /**
       * An icon to appear next to the left field 2 
       */
      'leftField2Icon': Icon;
      /**
       * The accent for the left field 2 icon 
       */
      'leftField2IconAccent': Accent;
      /**
       * Whether left field 2 should be inline 
       */
      'leftField2Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2StyleField': string;
      /**
       * The left field 2 field data type 
       */
      'leftField2Type': DataType;
      /**
       * The field under leftField2 
       */
      'leftField3': string;
      /**
       * An icon to appear next to the left field 3 
       */
      'leftField3Icon': Icon;
      /**
       * The accent for the left field 3 icon 
       */
      'leftField3IconAccent': Accent;
      /**
       * Whether left field 3 should be inline 
       */
      'leftField3Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3StyleField': string;
      /**
       * The left field 3 field data type 
       */
      'leftField3Type': DataType;
      /**
       * The field under leftField3 
       */
      'leftField4': string;
      /**
       * An icon to appear next to the left field 4 
       */
      'leftField4Icon': Icon;
      /**
       * The accent for the left field 1 icon 
       */
      'leftField4IconAccent': Accent;
      /**
       * Whether left field 4 should be inline 
       */
      'leftField4Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4StyleField': string;
      /**
       * The left field 4 field data type 
       */
      'leftField4Type': DataType;
      /**
       * The field under leftField4 
       */
      'leftField5': string;
      /**
       * An icon to appear next to the left field 5 
       */
      'leftField5Icon': Icon;
      /**
       * The accent for the left field 5 icon 
       */
      'leftField5IconAccent': Accent;
      /**
       * Whether left field 5 should be inline 
       */
      'leftField5Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5StyleField': string;
      /**
       * The left field 5 field data type 
       */
      'leftField5Type': DataType;
      /**
       * The left icon name. Use if the icon is the same for all list items 
       */
      'leftIcon': Icon;
      /**
       * The left icon color 
       */
      'leftIconAccent': Accent;
      /**
       * The field in the data array prop that gives an icon name for an icon on the left 
       */
      'leftIconField': string;
      /**
       * The left icon size 
       */
      'leftIconSize': number;
      /**
       * The label for left field 1 
       */
      'leftLabel1': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel1Style': string;
      /**
       * The label for left field 2 
       */
      'leftLabel2': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel2Style': string;
      /**
       * The label for left field 3 
       */
      'leftLabel3': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel3Style': string;
      /**
       * The label for left field 4 
       */
      'leftLabel4': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel4Style': string;
      /**
       * The label for left field 5 
       */
      'leftLabel5': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel5Style': string;
      /**
       * The name of the input 
       */
      'name': string;
      /**
       * The placeholder on the combobox 
       */
      'placeholder': string;
      /**
       * The field in the data array prop that gives the primary value 
       */
      'primaryField': string;
      /**
       * Whether the primary field should be inline 
       */
      'primaryFieldInline': boolean;
      /**
       * JSX style object in JSON to apply to the primary field container 
       */
      'primaryFieldStyle': string;
      /**
       * JSX style object in JSON to apply 
       */
      'primaryFieldStyleField': string;
      /**
       * The primary field data type 
       */
      'primaryFieldType': DataType;
      /**
       * The field in the data array prop that appears at the right of the list 
       */
      'rightField1': string;
      /**
       * An icon to appear next to the right field 1 
       */
      'rightField1Icon': Icon;
      /**
       * The accent for the right field 1 icon 
       */
      'rightField1IconAccent': Accent;
      /**
       * Whether right field 1 should be inline 
       */
      'rightField1Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1StyleField': string;
      /**
       * The right field 1 field data type 
       */
      'rightField1Type': DataType;
      /**
       * The field under rightField1 
       */
      'rightField2': string;
      /**
       * An icon to appear next to the right field 2 
       */
      'rightField2Icon': Icon;
      /**
       * The accent for the right field 2 icon 
       */
      'rightField2IconAccent': Accent;
      /**
       * Whether right field 2 should be inline 
       */
      'rightField2Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2StyleField': string;
      /**
       * The right field 2 field data type 
       */
      'rightField2Type': DataType;
      /**
       * The field under rightField2 
       */
      'rightField3': string;
      /**
       * An icon to appear next to the right field 3 
       */
      'rightField3Icon': Icon;
      /**
       * The accent for the right field 3 icon 
       */
      'rightField3IconAccent': Accent;
      /**
       * Whether right field 3 should be inline 
       */
      'rightField3Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3StyleField': string;
      /**
       * The right field 3 field data type 
       */
      'rightField3Type': DataType;
      /**
       * The field under rightField3 
       */
      'rightField4': string;
      /**
       * An icon to appear next to the right field 4 
       */
      'rightField4Icon': Icon;
      /**
       * The accent for the right field 4 icon 
       */
      'rightField4IconAccent': Accent;
      /**
       * Whether right field 4 should be inline 
       */
      'rightField4Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4StyleField': string;
      /**
       * The right field 4 field data type 
       */
      'rightField4Type': DataType;
      /**
       * The field under rightField4 
       */
      'rightField5': string;
      /**
       * An icon to appear next to the right field 5 
       */
      'rightField5Icon': Icon;
      /**
       * The accent for the right field 5 icon 
       */
      'rightField5IconAccent': Accent;
      /**
       * Whether right field 5 should be inline 
       */
      'rightField5Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5StyleField': string;
      /**
       * The right field 5 field data type 
       */
      'rightField5Type': DataType;
      /**
       * The right icon name. Use if the icon is the same for all list items 
       */
      'rightIcon': Icon;
      /**
       * The right icon color 
       */
      'rightIconAccent': Accent;
      /**
       * The field in the data array prop that gives an icon name for an icon on the right 
       */
      'rightIconField': string;
      /**
       * The right icon size 
       */
      'rightIconSize': number;
      /**
       * The label for right field 1 
       */
      'rightLabel1': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel1Style': string;
      /**
       * The label for right field 2 
       */
      'rightLabel2': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel2Style': string;
      /**
       * The label for right field 3 
       */
      'rightLabel3': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel3Style': string;
      /**
       * The label for right field 4 
       */
      'rightLabel4': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel4Style': string;
      /**
       * The label for right field 5 
       */
      'rightLabel5': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel5Style': string;
      /**
       * The field in the data array prop that gives the secondary value 
       */
      'secondaryField': string;
      /**
       * An icon to appear next to the secondary field 
       */
      'secondaryFieldIcon': Icon;
      /**
       * The accent for the secondary icon 
       */
      'secondaryFieldIconAccent': Accent;
      /**
       * Whether the secondary field should be inline 
       */
      'secondaryFieldInline': boolean;
      /**
       * JSX style object in JSON to apply to the secondary field 
       */
      'secondaryFieldStyle': string;
      /**
       * JSX style object in JSON to apply 
       */
      'secondaryFieldStyleField': string;
      /**
       * The secondary field data type 
       */
      'secondaryFieldType': DataType;
      /**
       * Selects the text in the input
       */
      'select': () => void;
      /**
       * This is a public method to set the data and paging information for this component. If this component is used with a parent tag-http or tag-search component, the parent component will call this method with the response data.
       */
      'setData': (data: any) => void;
      'setValue': (value: any, suppressChangeEvent: boolean) => void;
      /**
       * The field in the data array prop that gives the value to show in the input 
       */
      'textField': string;
      /**
       * The selected value 
       */
      'value': any;
      /**
       * The field in the data array prop that gives the actual value put in the value prop 
       */
      'valueField': string;
    }

    interface TagConfirm {
      'cancelButton': string;
      /**
       * The title of the dialog 
       */
      'heading': string;
      /**
       * The height of the dialog 
       */
      'height': string;
      'hide': () => void;
      'primaryButton': string;
      /**
       * Shows the dialog 
       */
      'show': () => void;
      /**
       * The text to display as the confirmation dialog 
       */
      'text': string;
      /**
       * The The type of the dialog 
       */
      'type': AlertType;
      /**
       * Whether the dialog is shown 
       */
      'visible': boolean;
      /**
       * The width of the dialog 
       */
      'width': 'small' | 'medium' | 'large' | 'full-screen';
    }

    interface TagDatePicker {
      /**
       * Whether the input has a border 
       */
      'borderless': boolean;
      /**
       * Whether the component is disabled 
       */
      'disabled': boolean;
      /**
       * The first day of the week. 0 is sunday 
       */
      'firstDayOfWeek': number;
      /**
       * Sets the focus to the combobox
       */
      'focusInput': () => void;
      /**
       * The date formatting options 
       */
      'formattingOptions': string;
      /**
       * The id of the input 
       */
      'id': string;
      /**
       * Whether the input is disabled 
       */
      'inputDisabled': boolean;
      /**
       * The styles to apply to the input 
       */
      'inputStyle': string;
      /**
       * The locale for the date formatting 
       */
      'locale': string;
      /**
       * The name of the input 
       */
      'name': string;
      /**
       * The placeholder on the input 
       */
      'placeholder': string;
      /**
       * Selects the text in the input
       */
      'select': () => void;
      /**
       * The current value 
       */
      'value': Date;
    }

    interface TagEditFieldOption {
      /**
       * whether the option is selected 
       */
      'selected': boolean;
      /**
       * The value for the option 
       */
      'value': string;
    }

    interface TagEditField {
      /**
       * Whether the field should submit the form if return is pressed 
       */
      'allowSubmitOnReturn': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'containerStyle': string;
      /**
       * The type of the field that is used for value conversion 
       */
      'dataType': DataType;
      /**
       * The default value 
       */
      'defaultValue': string;
      /**
       * Whether the field is disabled 
       */
      'disabled': boolean;
      /**
       * The editor component that will be rendered 
       */
      'editor': 'textbox'
    | 'multilinetextbox'
    | 'password'
    | 'email'
    | 'number'
    | 'dropdown'
    | 'combobox'
    | 'datepick'
    | 'checkbox'
    | 'radio'
    | 'hidden'
    | 'filepick'
    | 'slider';
      /**
       * JSX style object in JSON to apply 
       */
      'editorStyle': string;
      /**
       * Sets the focus to the editor
       */
      'focusEditor': () => void;
      /**
       * The formatting options 
       */
      'formattingOptions': string;
      /**
       * The id to be place on the input. This will tie the label to the input so that a screen reader can read it correctly 
       */
      'id': string;
      /**
       * Whether the field is inline 
       */
      'inline': boolean;
      /**
       * The field label 
       */
      'label': string;
      /**
       * The position of the label 
       */
      'labelPosition': string;
      /**
       * JSX style object in JSON to apply 
       */
      'labelStyle': string;
      /**
       * The maximum value for a number or slider 
       */
      'max': number;
      /**
       * The maxlength of the field 
       */
      'maxLength': number;
      /**
       * The minimum value for a number or slider 
       */
      'min': number;
      /**
       * The name of the field. This is what will be posted as the field name to the http API 
       */
      'name': string;
      /**
       * The placeholder text  
       */
      'placeholder': string;
      /**
       * The rows for a MultilineTextbox  
       */
      'rows': number;
      /**
       * Selects the text in the editor
       */
      'selectEditorText': () => void;
      /**
       * This is a public method to set the data for the field items. If this component is used with a parent tag-http component, tag-http will call this method with the response data.
       */
      'setData': (data: any) => void;
      /**
       * Sets the default value from the default value text attribute Called from the form when all the other fields have been loaded and everything has been injected
       */
      'setDefaultValue': () => void;
      /**
       * A public method to set the field validation errors 
       */
      'setErrors': (errors: string[]) => void;
      /**
       * Allows the form to sets the submit state
       */
      'setFormSuccessfullySubmitted': (value: boolean) => void;
      /**
       * A public method to allow the consumer to the validation rules for a field
       */
      'setValidation': (validation: IFieldValidator[]) => void;
      /**
       * A public method to set the field value 
       */
      'setValue': (value: any, suppressValidation?: boolean, suppressChangeEvent?: boolean) => Promise<string[]>;
      /**
       * The increment value for a number or slider 
       */
      'step': number;
      /**
       * Validates the value in the field
       */
      'validate': (executeOnly?: "valueChange" | "blur") => Promise<string[]>;
      /**
       * The field value 
       */
      'value': any;
    }

    interface TagEditList {
      /**
       * The class name for the list container. Any utility class can be referenced
       */
      'containerClassName': string;
      /**
       * The data that drives the component. This prop is expected to be an array of objects. This prop can be set directly via javascript or via the setData() method
       */
      'data': any[];
      /**
       * The height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'height': string;
      /**
       * The class name for the item container. Any utility class can be referenced
       */
      'itemContainerClassName': string;
      /**
       * The max height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'maxHeight': string;
      /**
       * The min height of the list 
       */
      'minHeight': string;
      /**
       * The name of the list. During the submission process, the data in this list will be posted under this name
       */
      'name': string;
      /**
       * This is a public method to set the data for this component. If this component is used with a parent tag-http, it will call this method with the response data.
       */
      'setData': (data: any) => void;
      /**
       * This is a public method to set a field value. This will push the value down to tag-edit-field
       */
      'setValue': (args: IListItemSetValue) => void;
    }

    interface TagField {
      /**
       * JSX style object in JSON to apply 
       */
      'containerStyle': string;
      /**
       * The type of the field that is used for value formatting 
       */
      'dataType': DataType;
      /**
       * The formatting options 
       */
      'formattingOptions': string;
      /**
       * The field label 
       */
      'label': string;
      /**
       * JSX style object in JSON to apply 
       */
      'labelStyle': string;
      /**
       * The name of the field 
       */
      'name': string;
      /**
       * The field value 
       */
      'value': any;
      /**
       * JSX style object in JSON to apply 
       */
      'valueStyle': string;
    }

    interface TagFilePicker {
      /**
       * Whether a drag drop area is rendered 
       */
      'allowDragDrop': boolean;
      /**
       * The default text to display on the button 
       */
      'buttonText': string;
      /**
       * Whether the component is disabled 
       */
      'disabled': boolean;
      /**
       * The message to display in the drop area  
       */
      'dragDropMessage': string;
      /**
       * Sets the focus to the file picker button
       */
      'focusButton': () => void;
      /**
       * The id of the file input This is important if there are multiple uploads on the page
       */
      'id': string;
      /**
       * Whether a large drag drop area is rendered 
       */
      'large': boolean;
      /**
       * Whether multiple files can be uploaded 
       */
      'multiple': boolean;
      /**
       * The template text to display when files have been selected 
       */
      'multipleFilesCaption': string;
    }

    interface TagFormGroup {
      /**
       * Whether the bottom border is suppressed 
       */
      'borderless': boolean;
      /**
       * Whether the fields inside the group are inline 
       */
      'inline': boolean;
    }

    interface TagForm {
      'formStyle': string;
      /**
       * Public method to get a field value 
       */
      'getFieldValue': (fieldName: string) => any;
      /**
       * Public method to get the field values 
       */
      'getFieldValues': () => IFormValues;
      /**
       * Whether the fields in the form are inline 
       */
      'inline': boolean;
      /**
       * A function that maps server validation errors to IFormErrors which is the format this component expects. By default the ASP.NET MVC mapper is used
       */
      'serverValidationMapper': (
    response: IHttpResponse,
    fieldNames: string[],
  ) => IFormErrors;
      /**
       * Public method to set a validation error 
       */
      'setError': (fieldName: string, errors: string[]) => void;
      /**
       * Public method to set a field value 
       */
      'setFieldValue': (fieldName: string, value: any) => void;
      /**
       * Public method to set field values 
       */
      'setFieldValues': (values: IFormValues) => void;
      'submitButtonAccent': Accent;
      'submitButtonDisabled': boolean;
      'submitButtonIcon': Icon;
      'submitButtonIconAccent': Accent;
      'submitButtonText': string;
      'submitComplete': (response: IHttpResponse) => void;
      'submitFailureMessage': string;
      /**
       * A function that can be called when the submission process starts to set any additional values.
       */
      'submitStarting': (
    values: IFormValues,
  ) => Promise<{ values: IFormValues; cancel: boolean }>;
      'submitSuccessMessage': string;
      'submitValidationMessage': string;
      /**
       * The form type. By default this is a generic 'form'  
       */
      'type': string;
    }

    interface TagHttp {
      /**
       * Whether any error messages are output 
       */
      'displayError': boolean;
      /**
       * The event name to raise after a failed http call has been made This will raise event with the name being the value of this prop
       */
      'failureEventName': string;
      /**
       * Makes the http request 
       */
      'makeHttpCall': (args: IHttpRequest) => Promise<any>;
      /**
       * The http method to use in the http request 
       */
      'method': 'get' | 'post' | 'put' | 'delete';
      /**
       * The http path to use in the http request 
       */
      'path': string;
      /**
       * Determines when the http request is made. The request is made when the component loads by default The available events are load, submit, search, pageRequest, click, buttonClick, refresh This prop can take a comma delimited list of event names where multiple events should trigger the request
       */
      'requestEvents': string;
      /**
       * The function to call to map the request to the http request object
       */
      'requestMapper': RequestMapper;
      /**
       * The function to call to map the data and paging info after it has been returned from the http request
       */
      'responseMapper': ResponseMapper;
      /**
       * Sets the request body
       */
      'setRequestBody': (body: any) => void;
      /**
       * Adds or sets and existing request HTTP header value
       */
      'setRequestHeader': (name: string, value: string) => Promise<void>;
      /**
       * Adds or sets and existing request HTTP header value
       */
      'setRequestHeaders': (headers: { [key: string]: string; }) => Promise<void>;
      /**
       * The event name to raise after a successful http call has been made This will raise event with the name being the value of this prop
       */
      'successEventName': string;
    }

    interface TagIconSvg {
      /**
       * Set the fill colour of the icon 
       */
      'accent': Accent;
      /**
       * The name of the icon 
       */
      'icon': Icon;
      /**
       * The size of the icon 
       */
      'size': number;
    }

    interface TagIcon {
      /**
       * Set the fill colour of the icon 
       */
      'accent': Accent;
      /**
       * The name of the icon 
       */
      'icon': Icon;
      /**
       * The size of the icon 
       */
      'size': number;
    }

    interface TagLayoutSidenav {

    }

    interface TagLink {
      /**
       * The accent for the text 
       */
      'accent': Accent;
      /**
       * The href for the link 
       */
      'href': string;
      /**
       * The styles to apply to the link 
       */
      'linkStyle': string;
      /**
       * The target for the link 
       */
      'target': string;
      /**
       * The text for the link  
       */
      'text': string;
    }

    interface TagList {
      /**
       * The field in the data array prop that gives an avatar placeholder 
       */
      'avatarPlaceholderField': string;
      /**
       * The size of the avatar 
       */
      'avatarSize': string;
      /**
       * The field in the data array prop that gives an avatar source 
       */
      'avatarSrcField': string;
      /**
       * button to do an operation on the list item 
       */
      'button1': string;
      /**
       * The colour of the button 
       */
      'button1Accent': Accent;
      /**
       * The icon for the button 
       */
      'button1Icon': Icon;
      /**
       * Whether the button is rounded 
       */
      'button1Rounded': boolean;
      /**
       * Whether the button is squared 
       */
      'button1Squared': boolean;
      /**
       * 2nd button to do an operation on the list item 
       */
      'button2': string;
      /**
       * The colour of the 2nd button 
       */
      'button2Accent': Accent;
      /**
       * The icon for the 2nd button 
       */
      'button2Icon': Icon;
      /**
       * Whether the button is rounded 
       */
      'button2Rounded': boolean;
      /**
       * Whether the button is squared 
       */
      'button2Squared': boolean;
      /**
       * 3rd button to do an operation on the list item 
       */
      'button3': string;
      /**
       * The colour of the 3rd button 
       */
      'button3Accent': Accent;
      /**
       * The icon for the 3rd button 
       */
      'button3Icon': Icon;
      /**
       * Whether the button is rounded 
       */
      'button3Rounded': boolean;
      /**
       * Whether the button is squared 
       */
      'button3Squared': boolean;
      /**
       * 4th button to do an operation on the list item 
       */
      'button4': string;
      /**
       * The colour of the 4th button 
       */
      'button4Accent': Accent;
      /**
       * The icon for the 4th button 
       */
      'button4Icon': Icon;
      /**
       * Whether the button is rounded 
       */
      'button4Rounded': boolean;
      /**
       * Whether the button is squared 
       */
      'button4Squared': boolean;
      /**
       * 5th button to do an operation on the list item 
       */
      'button5': string;
      /**
       * The colour of the 5th button 
       */
      'button5Accent': Accent;
      /**
       * The icon for the 5th button 
       */
      'button5Icon': Icon;
      /**
       * Whether the button is rounded 
       */
      'button5Rounded': boolean;
      /**
       * Whether the button is squared 
       */
      'button5Squared': boolean;
      /**
       * The class name for the container.
       */
      'containerClassName': string;
      /**
       * JSX style object in JSON to apply to the container for the list, pager and multi-select container.
       */
      'containerStyle': string;
      /**
       * The data that drives the list. This prop is expected to be an array of objects. This prop can be set directly via javascript or via the setData() method. The primaryField, secondaryField, imageField, leftIconField and rightIconField props should reference properties in each object in this array
       */
      'data': any[];
      /**
       * This is a public method to get the checked items
       */
      'getCheckedItems': () => any[];
      /**
       * The height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'height': string;
      /**
       * The border radius of the image 
       */
      'imageBorderRadius': string;
      /**
       * The field in the data array prop that gives an image path 
       */
      'imageField': string;
      /**
       * The height of the image 
       */
      'imageHeight': string;
      /**
       * The border radius of the image 
       */
      'imageObjectFit': 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
      /**
       * The width of the image 
       */
      'imageWidth': string;
      /**
       * The class name for the item container.
       */
      'itemContainerClassName': string;
      /**
       * JSX style object in JSON to apply to the list items.
       */
      'itemContainerStyle': string;
      /**
       * The field to get the style for the item container.
       */
      'itemContainerStyleField': string;
      /**
       * The field in the data array prop that gives the value under the secondary value 
       */
      'leftField1': string;
      /**
       * An icon to appear next to the left field 1 
       */
      'leftField1Icon': Icon;
      /**
       * The accent for the left field 1 icon 
       */
      'leftField1IconAccent': Accent;
      /**
       * Whether left field 1 should be inline 
       */
      'leftField1Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1StyleField': string;
      /**
       * The left field 1 field data type 
       */
      'leftField1Type': DataType;
      /**
       * The field under leftField1 
       */
      'leftField2': string;
      /**
       * An icon to appear next to the left field 2 
       */
      'leftField2Icon': Icon;
      /**
       * The accent for the left field 2 icon 
       */
      'leftField2IconAccent': Accent;
      /**
       * Whether left field 2 should be inline 
       */
      'leftField2Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2StyleField': string;
      /**
       * The left field 2 field data type 
       */
      'leftField2Type': DataType;
      /**
       * The field under leftField2 
       */
      'leftField3': string;
      /**
       * An icon to appear next to the left field 3 
       */
      'leftField3Icon': Icon;
      /**
       * The accent for the left field 3 icon 
       */
      'leftField3IconAccent': Accent;
      /**
       * Whether left field 3 should be inline 
       */
      'leftField3Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3StyleField': string;
      /**
       * The left field 3 field data type 
       */
      'leftField3Type': DataType;
      /**
       * The field under leftField3 
       */
      'leftField4': string;
      /**
       * An icon to appear next to the left field 4 
       */
      'leftField4Icon': Icon;
      /**
       * The accent for the left field 4 icon 
       */
      'leftField4IconAccent': Accent;
      /**
       * Whether left field 4 should be inline 
       */
      'leftField4Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4StyleField': string;
      /**
       * The left field 4 field data type 
       */
      'leftField4Type': DataType;
      /**
       * The field under leftField4 
       */
      'leftField5': string;
      /**
       * An icon to appear next to the left field 5 
       */
      'leftField5Icon': Icon;
      /**
       * The accent for the left field 5 icon 
       */
      'leftField5IconAccent': Accent;
      /**
       * Whether left field 5 should be inline 
       */
      'leftField5Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5StyleField': string;
      /**
       * The left field 5 field data type 
       */
      'leftField5Type': DataType;
      /**
       * The left icon name. Use if the icon is the same for all list items 
       */
      'leftIcon': Icon;
      /**
       * The left icon color 
       */
      'leftIconAccent': Accent;
      /**
       * The field in the data array prop that gives the left icon color 
       */
      'leftIconAccentField': string;
      /**
       * The field in the data array prop that gives an icon name for an icon on the left 
       */
      'leftIconField': string;
      /**
       * The left icon size 
       */
      'leftIconSize': number;
      /**
       * The label for left field 1 
       */
      'leftLabel1': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel1Style': string;
      /**
       * The label for left field 2 
       */
      'leftLabel2': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel2Style': string;
      /**
       * The label for left field 3 
       */
      'leftLabel3': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel3Style': string;
      /**
       * The label for left field 4 
       */
      'leftLabel4': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel4Style': string;
      /**
       * The label for left field 5 
       */
      'leftLabel5': string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel5Style': string;
      /**
       * JSX style object in JSON to apply to the container for the list.
       */
      'listContainerStyle': string;
      /**
       * The max height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'maxHeight': string;
      /**
       * The min height of the list 
       */
      'minHeight': string;
      /**
       * Whether multiple items can be selected  
       */
      'multiCheck': boolean;
      /**
       * Whether the checkbox is on the left or right  
       */
      'multiCheckAlign': 'left' | 'right';
      /**
       * Whether the checkbox is rounded  
       */
      'multiCheckRounded': boolean;
      /**
       * The size of the checkbox  
       */
      'multiCheckSize': 'normal' | 'large';
      /**
       * Suppresses select all checkbox 
       */
      'multiCheckSuppressSelectAll': boolean;
      /**
       * The current page number  
       */
      'page': number;
      /**
       * The total number of pages. Note that this might not be passed if the number of pages is unknown  
       */
      'pageCount': number;
      /**
       * The page size. Note that this might not be passed if there is no paging  
       */
      'pageSize': number;
      /**
       * The field in the data array prop that gives the primary value 
       */
      'primaryField': string;
      /**
       * Whether the primary field should be inline 
       */
      'primaryFieldInline': boolean;
      /**
       * JSX style object in JSON to apply to the primary field 
       */
      'primaryFieldStyle': string;
      /**
       * JSX style object in JSON to apply 
       */
      'primaryFieldStyleField': string;
      /**
       * The primary field data type 
       */
      'primaryFieldType': DataType;
      /**
       * The total number of records. Note that this might not be passed if the number of records is unknown  
       */
      'recordCount': number;
      /**
       * The field in the data array prop that appears at the right of the list 
       */
      'rightField1': string;
      /**
       * An icon to appear next to the right field 1 
       */
      'rightField1Icon': Icon;
      /**
       * The accent for the right field 1 icon 
       */
      'rightField1IconAccent': Accent;
      /**
       * Whether right field 1 should be inline 
       */
      'rightField1Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1StyleField': string;
      /**
       * The right field 1 field data type 
       */
      'rightField1Type': DataType;
      /**
       * The field under rightField1 
       */
      'rightField2': string;
      /**
       * An icon to appear next to the right field 2 
       */
      'rightField2Icon': Icon;
      /**
       * The accent for the right field 2 icon 
       */
      'rightField2IconAccent': Accent;
      /**
       * Whether right field 2 should be inline 
       */
      'rightField2Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2StyleField': string;
      /**
       * The right field 2 field data type 
       */
      'rightField2Type': DataType;
      /**
       * The field under rightField2 
       */
      'rightField3': string;
      /**
       * An icon to appear next to the right field 3 
       */
      'rightField3Icon': Icon;
      /**
       * The accent for the right field 3 icon 
       */
      'rightField3IconAccent': Accent;
      /**
       * Whether right field 3 should be inline 
       */
      'rightField3Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3StyleField': string;
      /**
       * The right field 3 field data type 
       */
      'rightField3Type': DataType;
      /**
       * The field under rightField3 
       */
      'rightField4': string;
      /**
       * An icon to appear next to the right field 4 
       */
      'rightField4Icon': Icon;
      /**
       * The accent for the right field 4 icon 
       */
      'rightField4IconAccent': Accent;
      /**
       * Whether right field 4 should be inline 
       */
      'rightField4Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4StyleField': string;
      /**
       * The right field 4 field data type 
       */
      'rightField4Type': DataType;
      /**
       * The field under rightField4 
       */
      'rightField5': string;
      /**
       * An icon to appear next to the right field 5 
       */
      'rightField5Icon': Icon;
      /**
       * The accent for the right field 5 icon 
       */
      'rightField5IconAccent': Accent;
      /**
       * Whether right field 5 should be inline 
       */
      'rightField5Inline': boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5Style': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5StyleField': string;
      /**
       * The right field 5 field data type 
       */
      'rightField5Type': DataType;
      /**
       * The right icon name. Use if the icon is the same for all list items 
       */
      'rightIcon': Icon;
      /**
       * The right icon color 
       */
      'rightIconAccent': Accent;
      /**
       * The field in the data array prop that gives the right icon color 
       */
      'rightIconAccentField': string;
      /**
       * The field in the data array prop that gives an icon name for an icon on the right 
       */
      'rightIconField': string;
      /**
       * The right icon size 
       */
      'rightIconSize': number;
      /**
       * The label for right field 1 
       */
      'rightLabel1': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel1Style': string;
      /**
       * The label for right field 2 
       */
      'rightLabel2': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel2Style': string;
      /**
       * The label for right field 3 
       */
      'rightLabel3': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel3Style': string;
      /**
       * The label for right field 4 
       */
      'rightLabel4': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel4Style': string;
      /**
       * The label for right field 5 
       */
      'rightLabel5': string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel5Style': string;
      /**
       * The field in the data array prop that gives the secondary value 
       */
      'secondaryField': string;
      /**
       * An icon to appear next to the secondary field 
       */
      'secondaryFieldIcon': Icon;
      /**
       * The accent for the secondary icon 
       */
      'secondaryFieldIconAccent': Accent;
      /**
       * Whether the secondary field should be inline 
       */
      'secondaryFieldInline': boolean;
      /**
       * JSX style object in JSON to apply to the secondary field 
       */
      'secondaryFieldStyle': string;
      /**
       * JSX style object in JSON to apply 
       */
      'secondaryFieldStyleField': string;
      /**
       * The secondary field data type 
       */
      'secondaryFieldType': DataType;
      /**
       * This is a public method to set the selected item in the list
       */
      'select': (item: any, suppressItemSelectedEvent: boolean) => void;
      /**
       * Whether items in the list can be selected and allow the listItemSelected event to be raised
       */
      'selectable': boolean;
      /**
       * This is a public method to set the checked items
       */
      'setCheckedItems': (items: any[]) => void;
      /**
       * This is a public method to set the data and paging information for this component. If this component is used with a parent tag-http or tag-search component, the parent component will call this method with the response data.
       */
      'setData': (data: any) => void;
      /**
       * This a public method to toggle all selected checkboxes 
       */
      'toggleCheckedItems': (checked: boolean) => void;
    }

    interface TagMainHeader {
      'accent': Accent;
    }

    interface TagMenuItem {
      /**
       * An icon reference to display in the item 
       */
      'icon': Icon;
      /**
       * The unique name of the item 
       */
      'name': string;
      /**
       * The text to display in the item 
       */
      'text': string;
    }

    interface TagMenu {
      'icon': Icon;
      'text': string;
    }

    interface TagMessage {
      /**
       * The title of the dialog 
       */
      'heading': string;
      /**
       * The height of the dialog 
       */
      'height': string;
      'hide': () => void;
      'primaryButton': string;
      /**
       * Shows the dialog 
       */
      'show': () => void;
      /**
       * The text to display as the confirmation dialog 
       */
      'text': string;
      /**
       * The The type of the dialog 
       */
      'type': AlertType;
      /**
       * Whether the dialog is shown 
       */
      'visible': boolean;
      /**
       * The width of the dialog 
       */
      'width': 'small' | 'medium' | 'large' | 'full-screen';
    }

    interface TagModal {
      /**
       * The background colour 
       */
      'backgroundAccent': Accent;
      /**
       * The border colour 
       */
      'borderAccent': Accent;
      /**
       * The cancel button text 
       */
      'cancelButton': string;
      /**
       * The class name to add to the content 
       */
      'contentClassName': string;
      /**
       * JSX style object in JSON to apply to the content slot 
       */
      'contentStyle': string;
      /**
       * The title of the dialog 
       */
      'heading': string;
      /**
       * The heading colour 
       */
      'headingAccent': Accent;
      /**
       * The backround colour of the header 
       */
      'headingBackgroundAccent': Accent;
      /**
       * The class name to add to the heading 
       */
      'headingClassName': string;
      /**
       * An icon that appears to the left of the title 
       */
      'headingIcon': Icon;
      /**
       * The icon colour 
       */
      'headingIconAccent': Accent;
      /**
       * JSX style object in JSON to apply to the header 
       */
      'headingStyle': string;
      /**
       * The text type for the heading 
       */
      'headingType': TextType;
      /**
       * The height of the dialog 
       */
      'height': string;
      'hide': () => void;
      /**
       * The primary button text 
       */
      'primaryButton': string;
      /**
       * The accent of the primary button 
       */
      'primaryButtonAccent': Accent;
      'show': () => void;
      /**
       * Whether the dialog is shown 
       */
      'visible': boolean;
      /**
       * The width of the dialog 
       */
      'width': 'small' | 'medium' | 'large' | 'full-screen';
    }

    interface TagPager {
      /**
       * The current page number  
       */
      'page': number;
      /**
       * The total number of pages. Note that this might not be passed if the number of pages is unknown  
       */
      'pageCount': number;
    }

    interface TagPopover {
      /**
       * Whether to always open the popover when clicked (rather than toggling opened / closed) 
       */
      'alwaysOpenWhenClick': boolean;
      /**
       * The colour of the arrow 
       */
      'arrowAccent': Accent;
      /**
       * Whether the popover is open 
       */
      'open': boolean;
      /**
       * The CSS selector for the source element for the popover 
       */
      'popoverFor': string;
      /**
       * How the popover should be positioned 
       */
      'position': PopoverPosition;
      /**
       * Whether to hide the close icon 
       */
      'suppressCloseIcon': boolean;
    }

    interface TagProgressDonut {
      /**
       * The fill colour 
       */
      'accent': Accent;
      /**
       * Whether to display theshadow 
       */
      'shadow': boolean;
      /**
       * The stroke width of the component 
       */
      'strokeWidth': number;
      /**
       * The styles to apply to the text 
       */
      'textStyle': string;
      /**
       * The percentage the donut is filled in 
       */
      'value': number;
      /**
       * The width of the component 
       */
      'width': string;
    }

    interface TagProgressIndeterminate {
      /**
       * The colour of the progress indicator 
       */
      'accent': Accent;
      /**
       * Whether the progress indicator overlays the whole screen 
       */
      'full': boolean;
      /**
       * The text to display under the progress indicator 
       */
      'text': string;
    }

    interface TagRecordNav {
      /**
       * The current record number  
       */
      'record': number;
      /**
       * The total number of record  
       */
      'recordCount': number;
    }

    interface TagRecord {
      /**
       * The class name for the container. Any utility class can be referenced The class name for the container The default class is "container" which gives a 1px border with 10px padding
       */
      'containerClassName': string;
      /**
       * The data that the view is bound to. This can be an array (which makes navigation through the records available). This can be also be an object.
       */
      'data': any;
      /**
       * The index of the selected record in the array
       */
      'selectedIndex': number;
      /**
       * This is a public method to set the data and paging information for this component. If this component is used with a parent tag-http or tag-search component, the parent component will call this method with the response data.
       */
      'setData': (data: any) => void;
    }

    interface TagSearch {
      /**
       * Whether the search box should have a border 
       */
      'borderless': boolean;
      /**
       * The delay in milliseconds after the user stops typing before the search is invoked 
       */
      'delay': number;
      /**
       * This is a public method to get the search criteria 
       */
      'getSearch': () => string;
      /**
       * The placeholder on the search input 
       */
      'placeholder': string;
      /**
       * This is a public method to set the data and paging information for this component. If this component is used with a parent tag-http, tag-http will call this method with the response data. This method pushes data down to immediate child tag-list and tag-record components by calling their setData method.
       */
      'setData': (data: any) => void;
      /**
       * This is a public method to set the search criteria
       */
      'setSearch': (search: string, suppressSearch?: boolean) => void;
    }

    interface TagSearchbox {
      /**
       * Whether the search box should have a border 
       */
      'borderless': boolean;
      /**
       * The delay in milliseconds after the user stops typing before the search is invoked 
       */
      'delay': number;
      /**
       * This is a public method to get the search criteria 
       */
      'getSearch': () => string;
      /**
       * The placeholder on the search input 
       */
      'placeholder': string;
      /**
       * This is a public method to set the search criteria
       */
      'setSearch': (search: string, suppressSearch?: boolean) => void;
      /**
       * The search criteria value 
       */
      'value': string;
    }

    interface TagSlider {
      /**
       * The increment value 
       */
      'accent': Accent;
      /**
       * The type of the field that is used for value formatting 
       */
      'dataType': DataType;
      /**
       * Whether the slider is disabled  
       */
      'disabled': boolean;
      /**
       * Sets the focus to the slider
       */
      'focusSlider': () => void;
      /**
       * The formatting options 
       */
      'formattingOptions': string;
      /**
       * The id of the input 
       */
      'id': string;
      /**
       * The maximum value 
       */
      'max': number;
      /**
       * The minimum value 
       */
      'min': number;
      /**
       * The name of the input 
       */
      'name': string;
      /**
       * The increment value when using the keyboard arrow buttons 
       */
      'step': number;
      /**
       * The value 
       */
      'value': number;
    }

    interface TagStat {
      /**
       * The background colour for the KPI 
       */
      'accent': Accent;
      /**
       * The label for the KPI 
       */
      'label': string;
      /**
       * Whether the value is under the label (vertical) or at the side (horizontal) 
       */
      'orientation': 'vertical' | 'horizontal';
      /**
       * The KPI value 
       */
      'value': string;
    }

    interface TagStats {
      /**
       * The text colour 
       */
      'accent': Accent;
      /**
       * The data 
       */
      'data': any[];
      /**
       * The heading 
       */
      'heading': string;
      /**
       * The field to get the labels from 
       */
      'labelField': string;
      /**
       * The sub heading 
       */
      'subHeading': string;
      /**
       * The field to get the values from 
       */
      'valueField': string;
    }

    interface TagTableColumn {
      /**
       * The caption for the column 
       */
      'caption': string;
      /**
       * The field that gives the accent colour for the cell text 
       */
      'cellAccentField': string;
      /**
       * JSX style object in JSON to apply 
       */
      'cellFieldStyle': string;
      /**
       * The height of the cell element 
       */
      'cellHeight': string;
      /**
       * The width of the cell element 
       */
      'cellWidth': string;
      /**
       * The data type for the column 
       */
      'dataType': DataType;
      /**
       * The formatting options 
       */
      'formattingOptions': string;
      /**
       * The name of the column 
       */
      'name': string;
      /**
       * Whether the field can be sorted on 
       */
      'sortable': string;
    }

    interface TagTable {
      /**
       * A button to do an operation on the row 
       */
      'button': string;
      /**
       * The colour of the button 
       */
      'buttonAccent': Accent;
      /**
       * The icon for the button 
       */
      'buttonIcon': Icon;
      /**
       * The columns for the table 
       */
      'columns': IDataTableColumn[];
      /**
       * The data for the table 
       */
      'data': any[];
      'height': string;
      /**
       * The current page number  
       */
      'page': number;
      /**
       * The total number of pages. Note that this might not be passed if the number of pages is unknown  
       */
      'pageCount': number;
      /**
       * The page size. Note that this might not be passed if there is no paging  
       */
      'pageSize': number;
      /**
       * The total number of records. Note that this might not be passed if the number of records is unknown  
       */
      'recordCount': number;
      /**
       * JSX style object in JSON to apply 
       */
      'rowFieldStyle': string;
      /**
       * This is a public method to set the data and paging information for this component. If this component is used with a parent tag-http or tag-search component, the parent component will call this method with the response data.
       */
      'setData': (data: any) => void;
      /**
       * JSX style object in JSON to apply 
       */
      'tableStyle': string;
    }

    interface TagTab {
      'caption': string;
      'hidden': boolean;
      'key': string;
    }

    interface TagTabs {
      /**
       * The accent colour for the selected tab 
       */
      'accent': Accent;
      /**
       * JSX style object in JSON to apply to the tab header 
       */
      'headerStyle': string;
      /**
       * JSX style object in JSON to apply to the tab content 
       */
      'panelStyle': string;
      /**
       * Selects a tab
       */
      'select': (key: string) => void;
      /**
       * The type of tabs to render 
       */
      'type': 'block' | 'underline';
    }

    interface TagText {
      /**
       * The colour of the text 
       */
      'accent': Accent;
      /**
       * The type of the field that is used for value formatting 
       */
      'dataType': DataType;
      /**
       * The formatting options 
       */
      'formattingOptions': string;
      /**
       * Treat text as inline and remove block and margin from text 
       */
      'inline': boolean;
      /**
       * The text  
       */
      'text': string;
      /**
       * The styles to apply to the text 
       */
      'textStyle': string;
      /**
       * The type of the string  
       */
      'type': TextType;
    }

    interface TagToast {
      /**
       * The position of the toast 
       */
      'position': 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';
    }

    interface TagTopNavbar {
      /**
       * The name to appear to the right of the logo  
       */
      'name': string;
    }

    interface TagValidation {
      /**
       * The arguments that are to be passed into the validation rule function 
       */
      'args': any;
      /**
       * When the validation rule should be executed 
       */
      'executeOn': 'valueChange' | 'blur';
      /**
       * The message to display if validation fails 
       */
      'message': string;
      /**
       * The validation rule name 
       */
      'rule': string;
    }

    interface TagWizardStep {
      /**
       * Whether the finish button is visible or not 
       */
      'finishVisible': boolean;
      /**
       * The step name 
       */
      'name': string;
      /**
       * Whether the next button is enabled or not 
       */
      'nextEnabled': boolean;
      /**
       * The next step name if not the one directly after 
       */
      'nextStep': string;
      /**
       * Whether the next button is visible or not 
       */
      'nextVisible': boolean;
      /**
       * Whether the previous button is enabled or not 
       */
      'previousEnabled': boolean;
      /**
       * The previous step name if not the one directly before 
       */
      'previousStep': string;
      /**
       * Whether the previous button is visible or not 
       */
      'previousVisible': boolean;
    }

    interface TagWizard {
      'height': string;
      /**
       * A function that maps server validation errors to IFormErrors which is the format this component expects. By default the ASP.NET MVC mapper is used
       */
      'serverValidationMapper': (
    response: IHttpResponse,
    fieldNames: string[],
  ) => { [key: string]: string[] };
      'submitComplete': (response: IHttpResponse) => void;
      'submitFailureMessage': string;
      'submitSuccessMessage': string;
      'submitValidationMessage': string;
    }
  }


    interface HTMLTagAccessLogoElement extends StencilComponents.TagAccessLogo, HTMLStencilElement {}

    var HTMLTagAccessLogoElement: {
      prototype: HTMLTagAccessLogoElement;
      new (): HTMLTagAccessLogoElement;
    };
    

    interface HTMLTagAlertElement extends StencilComponents.TagAlert, HTMLStencilElement {}

    var HTMLTagAlertElement: {
      prototype: HTMLTagAlertElement;
      new (): HTMLTagAlertElement;
    };
    

    interface HTMLTagAppHeaderElement extends StencilComponents.TagAppHeader, HTMLStencilElement {}

    var HTMLTagAppHeaderElement: {
      prototype: HTMLTagAppHeaderElement;
      new (): HTMLTagAppHeaderElement;
    };
    

    interface HTMLTagAvatarElement extends StencilComponents.TagAvatar, HTMLStencilElement {}

    var HTMLTagAvatarElement: {
      prototype: HTMLTagAvatarElement;
      new (): HTMLTagAvatarElement;
    };
    

    interface HTMLTagBadgeElement extends StencilComponents.TagBadge, HTMLStencilElement {}

    var HTMLTagBadgeElement: {
      prototype: HTMLTagBadgeElement;
      new (): HTMLTagBadgeElement;
    };
    

    interface HTMLTagBarElement extends StencilComponents.TagBar, HTMLStencilElement {}

    var HTMLTagBarElement: {
      prototype: HTMLTagBarElement;
      new (): HTMLTagBarElement;
    };
    

    interface HTMLTagButtonElement extends StencilComponents.TagButton, HTMLStencilElement {}

    var HTMLTagButtonElement: {
      prototype: HTMLTagButtonElement;
      new (): HTMLTagButtonElement;
    };
    

    interface HTMLTagCardKpiElement extends StencilComponents.TagCardKpi, HTMLStencilElement {}

    var HTMLTagCardKpiElement: {
      prototype: HTMLTagCardKpiElement;
      new (): HTMLTagCardKpiElement;
    };
    

    interface HTMLTagCardOkrElement extends StencilComponents.TagCardOkr, HTMLStencilElement {}

    var HTMLTagCardOkrElement: {
      prototype: HTMLTagCardOkrElement;
      new (): HTMLTagCardOkrElement;
    };
    

    interface HTMLTagCardProfileElement extends StencilComponents.TagCardProfile, HTMLStencilElement {}

    var HTMLTagCardProfileElement: {
      prototype: HTMLTagCardProfileElement;
      new (): HTMLTagCardProfileElement;
    };
    

    interface HTMLTagCardElement extends StencilComponents.TagCard, HTMLStencilElement {}

    var HTMLTagCardElement: {
      prototype: HTMLTagCardElement;
      new (): HTMLTagCardElement;
    };
    

    interface HTMLTagCheckboxElement extends StencilComponents.TagCheckbox, HTMLStencilElement {}

    var HTMLTagCheckboxElement: {
      prototype: HTMLTagCheckboxElement;
      new (): HTMLTagCheckboxElement;
    };
    

    interface HTMLTagCodeElement extends StencilComponents.TagCode, HTMLStencilElement {}

    var HTMLTagCodeElement: {
      prototype: HTMLTagCodeElement;
      new (): HTMLTagCodeElement;
    };
    

    interface HTMLTagComboboxElement extends StencilComponents.TagCombobox, HTMLStencilElement {}

    var HTMLTagComboboxElement: {
      prototype: HTMLTagComboboxElement;
      new (): HTMLTagComboboxElement;
    };
    

    interface HTMLTagConfirmElement extends StencilComponents.TagConfirm, HTMLStencilElement {}

    var HTMLTagConfirmElement: {
      prototype: HTMLTagConfirmElement;
      new (): HTMLTagConfirmElement;
    };
    

    interface HTMLTagDatePickerElement extends StencilComponents.TagDatePicker, HTMLStencilElement {}

    var HTMLTagDatePickerElement: {
      prototype: HTMLTagDatePickerElement;
      new (): HTMLTagDatePickerElement;
    };
    

    interface HTMLTagEditFieldOptionElement extends StencilComponents.TagEditFieldOption, HTMLStencilElement {}

    var HTMLTagEditFieldOptionElement: {
      prototype: HTMLTagEditFieldOptionElement;
      new (): HTMLTagEditFieldOptionElement;
    };
    

    interface HTMLTagEditFieldElement extends StencilComponents.TagEditField, HTMLStencilElement {}

    var HTMLTagEditFieldElement: {
      prototype: HTMLTagEditFieldElement;
      new (): HTMLTagEditFieldElement;
    };
    

    interface HTMLTagEditListElement extends StencilComponents.TagEditList, HTMLStencilElement {}

    var HTMLTagEditListElement: {
      prototype: HTMLTagEditListElement;
      new (): HTMLTagEditListElement;
    };
    

    interface HTMLTagFieldElement extends StencilComponents.TagField, HTMLStencilElement {}

    var HTMLTagFieldElement: {
      prototype: HTMLTagFieldElement;
      new (): HTMLTagFieldElement;
    };
    

    interface HTMLTagFilePickerElement extends StencilComponents.TagFilePicker, HTMLStencilElement {}

    var HTMLTagFilePickerElement: {
      prototype: HTMLTagFilePickerElement;
      new (): HTMLTagFilePickerElement;
    };
    

    interface HTMLTagFormGroupElement extends StencilComponents.TagFormGroup, HTMLStencilElement {}

    var HTMLTagFormGroupElement: {
      prototype: HTMLTagFormGroupElement;
      new (): HTMLTagFormGroupElement;
    };
    

    interface HTMLTagFormElement extends StencilComponents.TagForm, HTMLStencilElement {}

    var HTMLTagFormElement: {
      prototype: HTMLTagFormElement;
      new (): HTMLTagFormElement;
    };
    

    interface HTMLTagHttpElement extends StencilComponents.TagHttp, HTMLStencilElement {}

    var HTMLTagHttpElement: {
      prototype: HTMLTagHttpElement;
      new (): HTMLTagHttpElement;
    };
    

    interface HTMLTagIconSvgElement extends StencilComponents.TagIconSvg, HTMLStencilElement {}

    var HTMLTagIconSvgElement: {
      prototype: HTMLTagIconSvgElement;
      new (): HTMLTagIconSvgElement;
    };
    

    interface HTMLTagIconElement extends StencilComponents.TagIcon, HTMLStencilElement {}

    var HTMLTagIconElement: {
      prototype: HTMLTagIconElement;
      new (): HTMLTagIconElement;
    };
    

    interface HTMLTagLayoutSidenavElement extends StencilComponents.TagLayoutSidenav, HTMLStencilElement {}

    var HTMLTagLayoutSidenavElement: {
      prototype: HTMLTagLayoutSidenavElement;
      new (): HTMLTagLayoutSidenavElement;
    };
    

    interface HTMLTagLinkElement extends StencilComponents.TagLink, HTMLStencilElement {}

    var HTMLTagLinkElement: {
      prototype: HTMLTagLinkElement;
      new (): HTMLTagLinkElement;
    };
    

    interface HTMLTagListElement extends StencilComponents.TagList, HTMLStencilElement {}

    var HTMLTagListElement: {
      prototype: HTMLTagListElement;
      new (): HTMLTagListElement;
    };
    

    interface HTMLTagMainHeaderElement extends StencilComponents.TagMainHeader, HTMLStencilElement {}

    var HTMLTagMainHeaderElement: {
      prototype: HTMLTagMainHeaderElement;
      new (): HTMLTagMainHeaderElement;
    };
    

    interface HTMLTagMenuItemElement extends StencilComponents.TagMenuItem, HTMLStencilElement {}

    var HTMLTagMenuItemElement: {
      prototype: HTMLTagMenuItemElement;
      new (): HTMLTagMenuItemElement;
    };
    

    interface HTMLTagMenuElement extends StencilComponents.TagMenu, HTMLStencilElement {}

    var HTMLTagMenuElement: {
      prototype: HTMLTagMenuElement;
      new (): HTMLTagMenuElement;
    };
    

    interface HTMLTagMessageElement extends StencilComponents.TagMessage, HTMLStencilElement {}

    var HTMLTagMessageElement: {
      prototype: HTMLTagMessageElement;
      new (): HTMLTagMessageElement;
    };
    

    interface HTMLTagModalElement extends StencilComponents.TagModal, HTMLStencilElement {}

    var HTMLTagModalElement: {
      prototype: HTMLTagModalElement;
      new (): HTMLTagModalElement;
    };
    

    interface HTMLTagPagerElement extends StencilComponents.TagPager, HTMLStencilElement {}

    var HTMLTagPagerElement: {
      prototype: HTMLTagPagerElement;
      new (): HTMLTagPagerElement;
    };
    

    interface HTMLTagPopoverElement extends StencilComponents.TagPopover, HTMLStencilElement {}

    var HTMLTagPopoverElement: {
      prototype: HTMLTagPopoverElement;
      new (): HTMLTagPopoverElement;
    };
    

    interface HTMLTagProgressDonutElement extends StencilComponents.TagProgressDonut, HTMLStencilElement {}

    var HTMLTagProgressDonutElement: {
      prototype: HTMLTagProgressDonutElement;
      new (): HTMLTagProgressDonutElement;
    };
    

    interface HTMLTagProgressIndeterminateElement extends StencilComponents.TagProgressIndeterminate, HTMLStencilElement {}

    var HTMLTagProgressIndeterminateElement: {
      prototype: HTMLTagProgressIndeterminateElement;
      new (): HTMLTagProgressIndeterminateElement;
    };
    

    interface HTMLTagRecordNavElement extends StencilComponents.TagRecordNav, HTMLStencilElement {}

    var HTMLTagRecordNavElement: {
      prototype: HTMLTagRecordNavElement;
      new (): HTMLTagRecordNavElement;
    };
    

    interface HTMLTagRecordElement extends StencilComponents.TagRecord, HTMLStencilElement {}

    var HTMLTagRecordElement: {
      prototype: HTMLTagRecordElement;
      new (): HTMLTagRecordElement;
    };
    

    interface HTMLTagSearchElement extends StencilComponents.TagSearch, HTMLStencilElement {}

    var HTMLTagSearchElement: {
      prototype: HTMLTagSearchElement;
      new (): HTMLTagSearchElement;
    };
    

    interface HTMLTagSearchboxElement extends StencilComponents.TagSearchbox, HTMLStencilElement {}

    var HTMLTagSearchboxElement: {
      prototype: HTMLTagSearchboxElement;
      new (): HTMLTagSearchboxElement;
    };
    

    interface HTMLTagSliderElement extends StencilComponents.TagSlider, HTMLStencilElement {}

    var HTMLTagSliderElement: {
      prototype: HTMLTagSliderElement;
      new (): HTMLTagSliderElement;
    };
    

    interface HTMLTagStatElement extends StencilComponents.TagStat, HTMLStencilElement {}

    var HTMLTagStatElement: {
      prototype: HTMLTagStatElement;
      new (): HTMLTagStatElement;
    };
    

    interface HTMLTagStatsElement extends StencilComponents.TagStats, HTMLStencilElement {}

    var HTMLTagStatsElement: {
      prototype: HTMLTagStatsElement;
      new (): HTMLTagStatsElement;
    };
    

    interface HTMLTagTableColumnElement extends StencilComponents.TagTableColumn, HTMLStencilElement {}

    var HTMLTagTableColumnElement: {
      prototype: HTMLTagTableColumnElement;
      new (): HTMLTagTableColumnElement;
    };
    

    interface HTMLTagTableElement extends StencilComponents.TagTable, HTMLStencilElement {}

    var HTMLTagTableElement: {
      prototype: HTMLTagTableElement;
      new (): HTMLTagTableElement;
    };
    

    interface HTMLTagTabElement extends StencilComponents.TagTab, HTMLStencilElement {}

    var HTMLTagTabElement: {
      prototype: HTMLTagTabElement;
      new (): HTMLTagTabElement;
    };
    

    interface HTMLTagTabsElement extends StencilComponents.TagTabs, HTMLStencilElement {}

    var HTMLTagTabsElement: {
      prototype: HTMLTagTabsElement;
      new (): HTMLTagTabsElement;
    };
    

    interface HTMLTagTextElement extends StencilComponents.TagText, HTMLStencilElement {}

    var HTMLTagTextElement: {
      prototype: HTMLTagTextElement;
      new (): HTMLTagTextElement;
    };
    

    interface HTMLTagToastElement extends StencilComponents.TagToast, HTMLStencilElement {}

    var HTMLTagToastElement: {
      prototype: HTMLTagToastElement;
      new (): HTMLTagToastElement;
    };
    

    interface HTMLTagTopNavbarElement extends StencilComponents.TagTopNavbar, HTMLStencilElement {}

    var HTMLTagTopNavbarElement: {
      prototype: HTMLTagTopNavbarElement;
      new (): HTMLTagTopNavbarElement;
    };
    

    interface HTMLTagValidationElement extends StencilComponents.TagValidation, HTMLStencilElement {}

    var HTMLTagValidationElement: {
      prototype: HTMLTagValidationElement;
      new (): HTMLTagValidationElement;
    };
    

    interface HTMLTagWizardStepElement extends StencilComponents.TagWizardStep, HTMLStencilElement {}

    var HTMLTagWizardStepElement: {
      prototype: HTMLTagWizardStepElement;
      new (): HTMLTagWizardStepElement;
    };
    

    interface HTMLTagWizardElement extends StencilComponents.TagWizard, HTMLStencilElement {}

    var HTMLTagWizardElement: {
      prototype: HTMLTagWizardElement;
      new (): HTMLTagWizardElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'tag-access-logo': JSXElements.TagAccessLogoAttributes;
    'tag-alert': JSXElements.TagAlertAttributes;
    'tag-app-header': JSXElements.TagAppHeaderAttributes;
    'tag-avatar': JSXElements.TagAvatarAttributes;
    'tag-badge': JSXElements.TagBadgeAttributes;
    'tag-bar': JSXElements.TagBarAttributes;
    'tag-button': JSXElements.TagButtonAttributes;
    'tag-card-kpi': JSXElements.TagCardKpiAttributes;
    'tag-card-okr': JSXElements.TagCardOkrAttributes;
    'tag-card-profile': JSXElements.TagCardProfileAttributes;
    'tag-card': JSXElements.TagCardAttributes;
    'tag-checkbox': JSXElements.TagCheckboxAttributes;
    'tag-code': JSXElements.TagCodeAttributes;
    'tag-combobox': JSXElements.TagComboboxAttributes;
    'tag-confirm': JSXElements.TagConfirmAttributes;
    'tag-date-picker': JSXElements.TagDatePickerAttributes;
    'tag-edit-field-option': JSXElements.TagEditFieldOptionAttributes;
    'tag-edit-field': JSXElements.TagEditFieldAttributes;
    'tag-edit-list': JSXElements.TagEditListAttributes;
    'tag-field': JSXElements.TagFieldAttributes;
    'tag-file-picker': JSXElements.TagFilePickerAttributes;
    'tag-form-group': JSXElements.TagFormGroupAttributes;
    'tag-form': JSXElements.TagFormAttributes;
    'tag-http': JSXElements.TagHttpAttributes;
    'tag-icon-svg': JSXElements.TagIconSvgAttributes;
    'tag-icon': JSXElements.TagIconAttributes;
    'tag-layout-sidenav': JSXElements.TagLayoutSidenavAttributes;
    'tag-link': JSXElements.TagLinkAttributes;
    'tag-list': JSXElements.TagListAttributes;
    'tag-main-header': JSXElements.TagMainHeaderAttributes;
    'tag-menu-item': JSXElements.TagMenuItemAttributes;
    'tag-menu': JSXElements.TagMenuAttributes;
    'tag-message': JSXElements.TagMessageAttributes;
    'tag-modal': JSXElements.TagModalAttributes;
    'tag-pager': JSXElements.TagPagerAttributes;
    'tag-popover': JSXElements.TagPopoverAttributes;
    'tag-progress-donut': JSXElements.TagProgressDonutAttributes;
    'tag-progress-indeterminate': JSXElements.TagProgressIndeterminateAttributes;
    'tag-record-nav': JSXElements.TagRecordNavAttributes;
    'tag-record': JSXElements.TagRecordAttributes;
    'tag-search': JSXElements.TagSearchAttributes;
    'tag-searchbox': JSXElements.TagSearchboxAttributes;
    'tag-slider': JSXElements.TagSliderAttributes;
    'tag-stat': JSXElements.TagStatAttributes;
    'tag-stats': JSXElements.TagStatsAttributes;
    'tag-table-column': JSXElements.TagTableColumnAttributes;
    'tag-table': JSXElements.TagTableAttributes;
    'tag-tab': JSXElements.TagTabAttributes;
    'tag-tabs': JSXElements.TagTabsAttributes;
    'tag-text': JSXElements.TagTextAttributes;
    'tag-toast': JSXElements.TagToastAttributes;
    'tag-top-navbar': JSXElements.TagTopNavbarAttributes;
    'tag-validation': JSXElements.TagValidationAttributes;
    'tag-wizard-step': JSXElements.TagWizardStepAttributes;
    'tag-wizard': JSXElements.TagWizardAttributes;
    }
  }

  namespace JSXElements {

    export interface TagAccessLogoAttributes extends HTMLAttributes {
      /**
       * The height of the logo 
       */
      'height'?: string;
      /**
       * Whether to include "access" 
       */
      'name'?: boolean;
    }

    export interface TagAlertAttributes extends HTMLAttributes {
      /**
       * JSX style object in JSON to apply to the alert 
       */
      'alertStyle'?: string;
      /**
       * The alert type to display 
       */
      'alertType'?: 'alert' | 'toast' | 'product';
      /**
       * Whether the alert can be closed 
       */
      'closeable'?: boolean;
      /**
       * The product image source, when using product alert types 
       */
      'iconSrc'?: string;
      /**
       * Whether the text in the alert should be on the same line as the icon (true) or underneath it 
       */
      'inline'?: boolean;
      /**
       * the product title to display, when using product alert types 
       */
      'productTitle'?: string;
      /**
       * The number of milliseconds before the alert is closed 
       */
      'showDuration'?: number;
      /**
       * The text in the alert 
       */
      'text'?: string;
      /**
       * The type of the alert 
       */
      'type'?: AlertType;
      /**
       * Whether the alert is visible 
       */
      'visible'?: boolean;
      /**
       * The width of the alert 
       */
      'width'?: string;
    }

    export interface TagAppHeaderAttributes extends HTMLAttributes {
      /**
       * The accent colour for top border of the header as well as the icon 
       */
      'accent'?: Accent;
      /**
       * The title for the app 
       */
      'heading'?: string;
      /**
       * The colour of the title text 
       */
      'headingAccent'?: Accent;
      /**
       * The icon for the app 
       */
      'icon'?: Icon;
      /**
       * The colour of the icon background 
       */
      'iconAccent'?: Accent;
    }

    export interface TagAvatarAttributes extends HTMLAttributes {
      /**
       * JSX style object in JSON to apply to the primary field 
       */
      'avatarStyle'?: string;
      /**
       * The text to display in the button badge 
       */
      'badge'?: string;
      /**
       * The text to display in the button badge 
       */
      'badgeAccent'?: Accent;
      /**
       * placeholder text when there is no image 
       */
      'placeholder'?: string;
      /**
       * size of the avatar 
       */
      'size'?: string;
      /**
       * source of the avatar image 
       */
      'src'?: string;
    }

    export interface TagBadgeAttributes extends HTMLAttributes {
      /**
       * The accent colour 
       */
      'accent'?: Accent;
      /**
       * The size of the badge 
       */
      'size'?: string;
      /**
       * The value on the badge 
       */
      'value'?: string;
    }

    export interface TagBarAttributes extends HTMLAttributes {
      /**
       * The accent colour 
       */
      'accent'?: Accent;
      /**
       * The height of the container 
       */
      'height'?: string;
      /**
       * Whether the text is on the same line as the bar 
       */
      'inline'?: boolean;
      /**
       * The text to display 
       */
      'text'?: string;
      /**
       * The % value of the bar 
       */
      'value'?: number;
      /**
       * The width of the container 
       */
      'width'?: string;
    }

    export interface TagButtonAttributes extends HTMLAttributes {
      /**
       * Colour of the button 
       */
      'accent'?: Accent;
      /**
       * The text to display in the button badge 
       */
      'badge'?: string;
      /**
       * The text to display in the button badge 
       */
      'badgeAccent'?: Accent;
      /**
       * If set to true displays badge inline next to button text, else the badge is displayed top right 
       */
      'badgeInline'?: boolean;
      /**
       * Whether the button is disabled 
       */
      'disabled'?: boolean;
      /**
       * The icon to display in the button 
       */
      'icon'?: Icon;
      /**
       * The icon accent 
       */
      'iconAccent'?: Accent;
      /**
       * The button minimum width 
       */
      'minWidth'?: string;
      /**
       * Event raised when the button is clicked  
       */
      'onButtonClick'?: (event: CustomEvent) => void;
      /**
       * Whether the button is rounded  
       */
      'rounded'?: boolean;
      /**
       * The Size of the button 
       */
      'size'?: ButtonSize;
      /**
       * Whether the button is squared  
       */
      'squared'?: boolean;
      /**
       * The button text 
       */
      'text'?: string;
      /**
       * The type of the button 
       */
      'type'?: 'button' | 'submit' | 'reset';
    }

    export interface TagCardKpiAttributes extends HTMLAttributes {
      /**
       * The background colour for the KPI 
       */
      'accent'?: Accent;
      /**
       * The label for the KPI 
       */
      'label'?: string;
      /**
       * Whether the value is under the label (vertical) or at the side (horizontal) 
       */
      'orientation'?: 'vertical' | 'horizontal';
      /**
       * The KPI value 
       */
      'value'?: string;
    }

    export interface TagCardOkrAttributes extends HTMLAttributes {
      /**
       * Highlight the left border with an access colour 
       */
      'accent'?: Accent;
      /**
       * A string to be displayed by the date label 
       */
      'date'?: string;
      /**
       * The heading for the OKR which is usually the objective 
       */
      'heading'?: string;
      /**
       * The heading type 
       */
      'headingType'?: TextType;
      /**
       * Name of the person who owns the OKR 
       */
      'person'?: string;
      /**
       * The size of the progress donut 
       */
      'progressSize'?: string;
      /**
       * Percentage complete of the OKR 
       */
      'progressValue'?: number;
    }

    export interface TagCardProfileAttributes extends HTMLAttributes {
      /**
       * The icon of the 1st option 
       */
      'button1Icon'?: Icon;
      /**
       * The icon of the 2nd option 
       */
      'button2Icon'?: Icon;
      /**
       * The icon of the 3rd option 
       */
      'button3Icon'?: Icon;
      /**
       * The icon of the 4th option 
       */
      'button4Icon'?: Icon;
      /**
       * The icon of the 5th option 
       */
      'button5Icon'?: Icon;
      /**
       * The heading for the card 
       */
      'heading'?: string;
      /**
       * The heading type 
       */
      'headingType'?: TextType;
      /**
       * source of the profile image 
       */
      'image'?: string;
      /**
       * The href for link 1 
       */
      'linkHref1'?: string;
      /**
       * The href for link 2 
       */
      'linkHref2'?: string;
      /**
       * A link displayed under the titles 
       */
      'linkText1'?: string;
      /**
       * A link displayed under link 1 
       */
      'linkText2'?: string;
      /**
       * Event raised when a button is clicked  
       */
      'onButtonClick'?: (event: CustomEvent<ICardProfileButtonClick>) => void;
      /**
       * placeholder text when there is no image 
       */
      'placeholder'?: string;
      /**
       * A string to be displayed under the heading 
       */
      'subTitle1'?: string;
      /**
       * The subtitle1 type 
       */
      'subTitle1Type'?: TextType;
      /**
       * A string to be displayed under subTitle1 
       */
      'subTitle2'?: string;
      /**
       * The subtitle2 type 
       */
      'subTitle2Type'?: TextType;
      /**
       * A string to be displayed under the titles 
       */
      'text1'?: string;
      /**
       * The text1 type 
       */
      'text1Type'?: TextType;
      /**
       * A string to be displayed under text1 
       */
      'text2'?: string;
      /**
       * The text2 type 
       */
      'text2Type'?: TextType;
      /**
       * width of the card 
       */
      'width'?: string;
    }

    export interface TagCardAttributes extends HTMLAttributes {
      /**
       * The colour of the left border 
       */
      'accent'?: Accent;
      /**
       * The path to an avatar 
       */
      'avatar'?: string;
      /**
       * The background colour 
       */
      'backgroundAccent'?: Accent;
      /**
       * The background image on the card 
       */
      'backgroundImage'?: string;
      /**
       * An button to show 
       */
      'button'?: string;
      /**
       * The button accent  
       */
      'buttonAccent'?: Accent;
      /**
       * Whether the button is disabled  
       */
      'buttonDisabled'?: boolean;
      /**
       * The button icon  
       */
      'buttonIcon'?: Icon;
      /**
       * The button size  
       */
      'buttonSize'?: ButtonSize;
      /**
       * Heading text 
       */
      'heading'?: string;
      /**
       * The heading type 
       */
      'headingType'?: TextType;
      /**
       * An icon to show 
       */
      'icon'?: Icon;
      /**
       * The icon accent  
       */
      'iconAccent'?: Accent;
      /**
       * The icon size  
       */
      'iconSize'?: number;
      /**
       * The text to display in the card 
       */
      'text'?: string;
      /**
       * The text type 
       */
      'textType'?: TextType;
      /**
       * The version of the card 
       */
      'version'?: '1' | '2';
    }

    export interface TagCheckboxAttributes extends HTMLAttributes {
      /**
       * The accent  
       */
      'accent'?: Accent;
      /**
       * Whether the checkbox is checked  
       */
      'checked'?: boolean;
      /**
       * Whether the checkbox is disabled  
       */
      'disabled'?: boolean;
      /**
       * The id of the input  
       */
      'id'?: string;
      /**
       * The label  
       */
      'label'?: string;
      /**
       * The name of the input  
       */
      'name'?: string;
      /**
       * Event raised when a checkbox is checked / unchecked 
       */
      'onValueChange'?: (event: CustomEvent<ICheckboxChangeArgs>) => void;
      /**
       * Rounded checkbox  
       */
      'rounded'?: boolean;
      /**
       * The size  
       */
      'size'?: 'normal' | 'large';
      'textAlign'?: 'left' | 'right';
    }

    export interface TagCodeAttributes extends HTMLAttributes {
      /**
       * Property description 
       */
      'code'?: string;
      'language'?: string;
    }

    export interface TagComboboxAttributes extends HTMLAttributes {
      /**
       * Whether the input has a border 
       */
      'borderless'?: boolean;
      /**
       * The data that drives the list
       */
      'data'?: any[];
      /**
       * The delay in milliseconds after the user stops typing before the filter is invoked 
       */
      'delay'?: number;
      /**
       * Whether the component is disabled 
       */
      'disabled'?: boolean;
      /**
       * Whether the component should search for the value based on what the user has entered 
       */
      'doNotSuggest'?: boolean;
      /**
       * The function to call to filter the data
       */
      'filter'?: (criteria: string, data: any[]) => IComboFilterResult;
      /**
       * The id of the input 
       */
      'id'?: string;
      /**
       * The field in the data array prop that gives an image path 
       */
      'imageField'?: string;
      /**
       * Whether the input is disabled 
       */
      'inputDisabled'?: boolean;
      /**
       * The styles to apply to the input 
       */
      'inputStyle'?: string;
      /**
       * The field in the data array prop that gives the value under the secondary value 
       */
      'leftField1'?: string;
      /**
       * An icon to appear next to the left field 1 
       */
      'leftField1Icon'?: Icon;
      /**
       * The accent for the left field 1 icon 
       */
      'leftField1IconAccent'?: Accent;
      /**
       * Whether left field 1 should be inline 
       */
      'leftField1Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1StyleField'?: string;
      /**
       * The left field 1 field data type 
       */
      'leftField1Type'?: DataType;
      /**
       * The field under leftField1 
       */
      'leftField2'?: string;
      /**
       * An icon to appear next to the left field 2 
       */
      'leftField2Icon'?: Icon;
      /**
       * The accent for the left field 2 icon 
       */
      'leftField2IconAccent'?: Accent;
      /**
       * Whether left field 2 should be inline 
       */
      'leftField2Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2StyleField'?: string;
      /**
       * The left field 2 field data type 
       */
      'leftField2Type'?: DataType;
      /**
       * The field under leftField2 
       */
      'leftField3'?: string;
      /**
       * An icon to appear next to the left field 3 
       */
      'leftField3Icon'?: Icon;
      /**
       * The accent for the left field 3 icon 
       */
      'leftField3IconAccent'?: Accent;
      /**
       * Whether left field 3 should be inline 
       */
      'leftField3Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3StyleField'?: string;
      /**
       * The left field 3 field data type 
       */
      'leftField3Type'?: DataType;
      /**
       * The field under leftField3 
       */
      'leftField4'?: string;
      /**
       * An icon to appear next to the left field 4 
       */
      'leftField4Icon'?: Icon;
      /**
       * The accent for the left field 1 icon 
       */
      'leftField4IconAccent'?: Accent;
      /**
       * Whether left field 4 should be inline 
       */
      'leftField4Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4StyleField'?: string;
      /**
       * The left field 4 field data type 
       */
      'leftField4Type'?: DataType;
      /**
       * The field under leftField4 
       */
      'leftField5'?: string;
      /**
       * An icon to appear next to the left field 5 
       */
      'leftField5Icon'?: Icon;
      /**
       * The accent for the left field 5 icon 
       */
      'leftField5IconAccent'?: Accent;
      /**
       * Whether left field 5 should be inline 
       */
      'leftField5Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5StyleField'?: string;
      /**
       * The left field 5 field data type 
       */
      'leftField5Type'?: DataType;
      /**
       * The left icon name. Use if the icon is the same for all list items 
       */
      'leftIcon'?: Icon;
      /**
       * The left icon color 
       */
      'leftIconAccent'?: Accent;
      /**
       * The field in the data array prop that gives an icon name for an icon on the left 
       */
      'leftIconField'?: string;
      /**
       * The left icon size 
       */
      'leftIconSize'?: number;
      /**
       * The label for left field 1 
       */
      'leftLabel1'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel1Style'?: string;
      /**
       * The label for left field 2 
       */
      'leftLabel2'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel2Style'?: string;
      /**
       * The label for left field 3 
       */
      'leftLabel3'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel3Style'?: string;
      /**
       * The label for left field 4 
       */
      'leftLabel4'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel4Style'?: string;
      /**
       * The label for left field 5 
       */
      'leftLabel5'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel5Style'?: string;
      /**
       * The name of the input 
       */
      'name'?: string;
      /**
       * Event raised when a field changes 
       */
      'onValueChange'?: (event: CustomEvent<IComboChangeArgs>) => void;
      /**
       * The placeholder on the combobox 
       */
      'placeholder'?: string;
      /**
       * The field in the data array prop that gives the primary value 
       */
      'primaryField'?: string;
      /**
       * Whether the primary field should be inline 
       */
      'primaryFieldInline'?: boolean;
      /**
       * JSX style object in JSON to apply to the primary field container 
       */
      'primaryFieldStyle'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'primaryFieldStyleField'?: string;
      /**
       * The primary field data type 
       */
      'primaryFieldType'?: DataType;
      /**
       * The field in the data array prop that appears at the right of the list 
       */
      'rightField1'?: string;
      /**
       * An icon to appear next to the right field 1 
       */
      'rightField1Icon'?: Icon;
      /**
       * The accent for the right field 1 icon 
       */
      'rightField1IconAccent'?: Accent;
      /**
       * Whether right field 1 should be inline 
       */
      'rightField1Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1StyleField'?: string;
      /**
       * The right field 1 field data type 
       */
      'rightField1Type'?: DataType;
      /**
       * The field under rightField1 
       */
      'rightField2'?: string;
      /**
       * An icon to appear next to the right field 2 
       */
      'rightField2Icon'?: Icon;
      /**
       * The accent for the right field 2 icon 
       */
      'rightField2IconAccent'?: Accent;
      /**
       * Whether right field 2 should be inline 
       */
      'rightField2Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2StyleField'?: string;
      /**
       * The right field 2 field data type 
       */
      'rightField2Type'?: DataType;
      /**
       * The field under rightField2 
       */
      'rightField3'?: string;
      /**
       * An icon to appear next to the right field 3 
       */
      'rightField3Icon'?: Icon;
      /**
       * The accent for the right field 3 icon 
       */
      'rightField3IconAccent'?: Accent;
      /**
       * Whether right field 3 should be inline 
       */
      'rightField3Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3StyleField'?: string;
      /**
       * The right field 3 field data type 
       */
      'rightField3Type'?: DataType;
      /**
       * The field under rightField3 
       */
      'rightField4'?: string;
      /**
       * An icon to appear next to the right field 4 
       */
      'rightField4Icon'?: Icon;
      /**
       * The accent for the right field 4 icon 
       */
      'rightField4IconAccent'?: Accent;
      /**
       * Whether right field 4 should be inline 
       */
      'rightField4Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4StyleField'?: string;
      /**
       * The right field 4 field data type 
       */
      'rightField4Type'?: DataType;
      /**
       * The field under rightField4 
       */
      'rightField5'?: string;
      /**
       * An icon to appear next to the right field 5 
       */
      'rightField5Icon'?: Icon;
      /**
       * The accent for the right field 5 icon 
       */
      'rightField5IconAccent'?: Accent;
      /**
       * Whether right field 5 should be inline 
       */
      'rightField5Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5StyleField'?: string;
      /**
       * The right field 5 field data type 
       */
      'rightField5Type'?: DataType;
      /**
       * The right icon name. Use if the icon is the same for all list items 
       */
      'rightIcon'?: Icon;
      /**
       * The right icon color 
       */
      'rightIconAccent'?: Accent;
      /**
       * The field in the data array prop that gives an icon name for an icon on the right 
       */
      'rightIconField'?: string;
      /**
       * The right icon size 
       */
      'rightIconSize'?: number;
      /**
       * The label for right field 1 
       */
      'rightLabel1'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel1Style'?: string;
      /**
       * The label for right field 2 
       */
      'rightLabel2'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel2Style'?: string;
      /**
       * The label for right field 3 
       */
      'rightLabel3'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel3Style'?: string;
      /**
       * The label for right field 4 
       */
      'rightLabel4'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel4Style'?: string;
      /**
       * The label for right field 5 
       */
      'rightLabel5'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel5Style'?: string;
      /**
       * The field in the data array prop that gives the secondary value 
       */
      'secondaryField'?: string;
      /**
       * An icon to appear next to the secondary field 
       */
      'secondaryFieldIcon'?: Icon;
      /**
       * The accent for the secondary icon 
       */
      'secondaryFieldIconAccent'?: Accent;
      /**
       * Whether the secondary field should be inline 
       */
      'secondaryFieldInline'?: boolean;
      /**
       * JSX style object in JSON to apply to the secondary field 
       */
      'secondaryFieldStyle'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'secondaryFieldStyleField'?: string;
      /**
       * The secondary field data type 
       */
      'secondaryFieldType'?: DataType;
      /**
       * The field in the data array prop that gives the value to show in the input 
       */
      'textField'?: string;
      /**
       * The selected value 
       */
      'value'?: any;
      /**
       * The field in the data array prop that gives the actual value put in the value prop 
       */
      'valueField'?: string;
    }

    export interface TagConfirmAttributes extends HTMLAttributes {
      'cancelButton'?: string;
      /**
       * The title of the dialog 
       */
      'heading'?: string;
      /**
       * The height of the dialog 
       */
      'height'?: string;
      'primaryButton'?: string;
      /**
       * The text to display as the confirmation dialog 
       */
      'text'?: string;
      /**
       * The The type of the dialog 
       */
      'type'?: AlertType;
      /**
       * Whether the dialog is shown 
       */
      'visible'?: boolean;
      /**
       * The width of the dialog 
       */
      'width'?: 'small' | 'medium' | 'large' | 'full-screen';
    }

    export interface TagDatePickerAttributes extends HTMLAttributes {
      /**
       * Whether the input has a border 
       */
      'borderless'?: boolean;
      /**
       * Whether the component is disabled 
       */
      'disabled'?: boolean;
      /**
       * The first day of the week. 0 is sunday 
       */
      'firstDayOfWeek'?: number;
      /**
       * The date formatting options 
       */
      'formattingOptions'?: string;
      /**
       * The id of the input 
       */
      'id'?: string;
      /**
       * Whether the input is disabled 
       */
      'inputDisabled'?: boolean;
      /**
       * The styles to apply to the input 
       */
      'inputStyle'?: string;
      /**
       * The locale for the date formatting 
       */
      'locale'?: string;
      /**
       * The name of the input 
       */
      'name'?: string;
      /**
       * Event raised when a field changes 
       */
      'onValueChange'?: (event: CustomEvent<IDatePickerChangeArgs>) => void;
      /**
       * The placeholder on the input 
       */
      'placeholder'?: string;
      /**
       * The current value 
       */
      'value'?: Date;
    }

    export interface TagEditFieldOptionAttributes extends HTMLAttributes {
      /**
       * whether the option is selected 
       */
      'selected'?: boolean;
      /**
       * The value for the option 
       */
      'value'?: string;
    }

    export interface TagEditFieldAttributes extends HTMLAttributes {
      /**
       * Whether the field should submit the form if return is pressed 
       */
      'allowSubmitOnReturn'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'containerStyle'?: string;
      /**
       * The type of the field that is used for value conversion 
       */
      'dataType'?: DataType;
      /**
       * The default value 
       */
      'defaultValue'?: string;
      /**
       * Whether the field is disabled 
       */
      'disabled'?: boolean;
      /**
       * The editor component that will be rendered 
       */
      'editor'?: 'textbox'
    | 'multilinetextbox'
    | 'password'
    | 'email'
    | 'number'
    | 'dropdown'
    | 'combobox'
    | 'datepick'
    | 'checkbox'
    | 'radio'
    | 'hidden'
    | 'filepick'
    | 'slider';
      /**
       * JSX style object in JSON to apply 
       */
      'editorStyle'?: string;
      /**
       * The formatting options 
       */
      'formattingOptions'?: string;
      /**
       * The id to be place on the input. This will tie the label to the input so that a screen reader can read it correctly 
       */
      'id'?: string;
      /**
       * Whether the field is inline 
       */
      'inline'?: boolean;
      /**
       * The field label 
       */
      'label'?: string;
      /**
       * The position of the label 
       */
      'labelPosition'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'labelStyle'?: string;
      /**
       * The maximum value for a number or slider 
       */
      'max'?: number;
      /**
       * The maxlength of the field 
       */
      'maxLength'?: number;
      /**
       * The minimum value for a number or slider 
       */
      'min'?: number;
      /**
       * The name of the field. This is what will be posted as the field name to the http API 
       */
      'name'?: string;
      /**
       * Event raised when a field is validated 
       */
      'onValidated'?: (event: CustomEvent<IValidatedArgs>) => void;
      /**
       * Event raised when a field changes 
       */
      'onValueChange'?: (event: CustomEvent<IChangeArgs>) => void;
      /**
       * The placeholder text  
       */
      'placeholder'?: string;
      /**
       * The rows for a MultilineTextbox  
       */
      'rows'?: number;
      /**
       * The increment value for a number or slider 
       */
      'step'?: number;
      /**
       * The field value 
       */
      'value'?: any;
    }

    export interface TagEditListAttributes extends HTMLAttributes {
      /**
       * The class name for the list container. Any utility class can be referenced
       */
      'containerClassName'?: string;
      /**
       * The data that drives the component. This prop is expected to be an array of objects. This prop can be set directly via javascript or via the setData() method
       */
      'data'?: any[];
      /**
       * The height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'height'?: string;
      /**
       * The class name for the item container. Any utility class can be referenced
       */
      'itemContainerClassName'?: string;
      /**
       * The max height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'maxHeight'?: string;
      /**
       * The min height of the list 
       */
      'minHeight'?: string;
      /**
       * The name of the list. During the submission process, the data in this list will be posted under this name
       */
      'name'?: string;
      /**
       * Event raised when a value in a list item is changes  
       */
      'onListItemChanged'?: (event: CustomEvent<IListItemChanged>) => void;
    }

    export interface TagFieldAttributes extends HTMLAttributes {
      /**
       * JSX style object in JSON to apply 
       */
      'containerStyle'?: string;
      /**
       * The type of the field that is used for value formatting 
       */
      'dataType'?: DataType;
      /**
       * The formatting options 
       */
      'formattingOptions'?: string;
      /**
       * The field label 
       */
      'label'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'labelStyle'?: string;
      /**
       * The name of the field 
       */
      'name'?: string;
      /**
       * The field value 
       */
      'value'?: any;
      /**
       * JSX style object in JSON to apply 
       */
      'valueStyle'?: string;
    }

    export interface TagFilePickerAttributes extends HTMLAttributes {
      /**
       * Whether a drag drop area is rendered 
       */
      'allowDragDrop'?: boolean;
      /**
       * The default text to display on the button 
       */
      'buttonText'?: string;
      /**
       * Whether the component is disabled 
       */
      'disabled'?: boolean;
      /**
       * The message to display in the drop area  
       */
      'dragDropMessage'?: string;
      /**
       * The id of the file input This is important if there are multiple uploads on the page
       */
      'id'?: string;
      /**
       * Whether a large drag drop area is rendered 
       */
      'large'?: boolean;
      /**
       * Whether multiple files can be uploaded 
       */
      'multiple'?: boolean;
      /**
       * The template text to display when files have been selected 
       */
      'multipleFilesCaption'?: string;
      /**
       * Event raised when a file is selected  
       */
      'onFileChange'?: (event: CustomEvent<IFileChange>) => void;
    }

    export interface TagFormGroupAttributes extends HTMLAttributes {
      /**
       * Whether the bottom border is suppressed 
       */
      'borderless'?: boolean;
      /**
       * Whether the fields inside the group are inline 
       */
      'inline'?: boolean;
    }

    export interface TagFormAttributes extends HTMLAttributes {
      'formStyle'?: string;
      /**
       * Whether the fields in the form are inline 
       */
      'inline'?: boolean;
      /**
       * Event that can be subscribed to handle a form submission 
       */
      'onSubmit'?: (event: CustomEvent<ISubmitArgs>) => void;
      /**
       * A function that maps server validation errors to IFormErrors which is the format this component expects. By default the ASP.NET MVC mapper is used
       */
      'serverValidationMapper'?: (
    response: IHttpResponse,
    fieldNames: string[],
  ) => IFormErrors;
      'submitButtonAccent'?: Accent;
      'submitButtonDisabled'?: boolean;
      'submitButtonIcon'?: Icon;
      'submitButtonIconAccent'?: Accent;
      'submitButtonText'?: string;
      'submitFailureMessage'?: string;
      /**
       * A function that can be called when the submission process starts to set any additional values.
       */
      'submitStarting'?: (
    values: IFormValues,
  ) => Promise<{ values: IFormValues; cancel: boolean }>;
      'submitSuccessMessage'?: string;
      'submitValidationMessage'?: string;
      /**
       * The form type. By default this is a generic 'form'  
       */
      'type'?: string;
    }

    export interface TagHttpAttributes extends HTMLAttributes {
      /**
       * Whether any error messages are output 
       */
      'displayError'?: boolean;
      /**
       * The event name to raise after a failed http call has been made This will raise event with the name being the value of this prop
       */
      'failureEventName'?: string;
      /**
       * The http method to use in the http request 
       */
      'method'?: 'get' | 'post' | 'put' | 'delete';
      /**
       * Generic Event raised on a response (component consumer can specify the event name) 
       */
      'onEvent'?: (event: CustomEvent<IEvent>) => void;
      /**
       * Event raised on a response 
       */
      'onResponded'?: (event: CustomEvent<IHttpResponse>) => void;
      /**
       * The http path to use in the http request 
       */
      'path'?: string;
      /**
       * Determines when the http request is made. The request is made when the component loads by default The available events are load, submit, search, pageRequest, click, buttonClick, refresh This prop can take a comma delimited list of event names where multiple events should trigger the request
       */
      'requestEvents'?: string;
      /**
       * The function to call to map the request to the http request object
       */
      'requestMapper'?: RequestMapper;
      /**
       * The function to call to map the data and paging info after it has been returned from the http request
       */
      'responseMapper'?: ResponseMapper;
      /**
       * The event name to raise after a successful http call has been made This will raise event with the name being the value of this prop
       */
      'successEventName'?: string;
    }

    export interface TagIconSvgAttributes extends HTMLAttributes {
      /**
       * Set the fill colour of the icon 
       */
      'accent'?: Accent;
      /**
       * The name of the icon 
       */
      'icon'?: Icon;
      /**
       * The size of the icon 
       */
      'size'?: number;
    }

    export interface TagIconAttributes extends HTMLAttributes {
      /**
       * Set the fill colour of the icon 
       */
      'accent'?: Accent;
      /**
       * The name of the icon 
       */
      'icon'?: Icon;
      /**
       * The size of the icon 
       */
      'size'?: number;
    }

    export interface TagLayoutSidenavAttributes extends HTMLAttributes {

    }

    export interface TagLinkAttributes extends HTMLAttributes {
      /**
       * The accent for the text 
       */
      'accent'?: Accent;
      /**
       * The href for the link 
       */
      'href'?: string;
      /**
       * The styles to apply to the link 
       */
      'linkStyle'?: string;
      /**
       * The target for the link 
       */
      'target'?: string;
      /**
       * The text for the link  
       */
      'text'?: string;
    }

    export interface TagListAttributes extends HTMLAttributes {
      /**
       * The field in the data array prop that gives an avatar placeholder 
       */
      'avatarPlaceholderField'?: string;
      /**
       * The size of the avatar 
       */
      'avatarSize'?: string;
      /**
       * The field in the data array prop that gives an avatar source 
       */
      'avatarSrcField'?: string;
      /**
       * button to do an operation on the list item 
       */
      'button1'?: string;
      /**
       * The colour of the button 
       */
      'button1Accent'?: Accent;
      /**
       * The icon for the button 
       */
      'button1Icon'?: Icon;
      /**
       * Whether the button is rounded 
       */
      'button1Rounded'?: boolean;
      /**
       * Whether the button is squared 
       */
      'button1Squared'?: boolean;
      /**
       * 2nd button to do an operation on the list item 
       */
      'button2'?: string;
      /**
       * The colour of the 2nd button 
       */
      'button2Accent'?: Accent;
      /**
       * The icon for the 2nd button 
       */
      'button2Icon'?: Icon;
      /**
       * Whether the button is rounded 
       */
      'button2Rounded'?: boolean;
      /**
       * Whether the button is squared 
       */
      'button2Squared'?: boolean;
      /**
       * 3rd button to do an operation on the list item 
       */
      'button3'?: string;
      /**
       * The colour of the 3rd button 
       */
      'button3Accent'?: Accent;
      /**
       * The icon for the 3rd button 
       */
      'button3Icon'?: Icon;
      /**
       * Whether the button is rounded 
       */
      'button3Rounded'?: boolean;
      /**
       * Whether the button is squared 
       */
      'button3Squared'?: boolean;
      /**
       * 4th button to do an operation on the list item 
       */
      'button4'?: string;
      /**
       * The colour of the 4th button 
       */
      'button4Accent'?: Accent;
      /**
       * The icon for the 4th button 
       */
      'button4Icon'?: Icon;
      /**
       * Whether the button is rounded 
       */
      'button4Rounded'?: boolean;
      /**
       * Whether the button is squared 
       */
      'button4Squared'?: boolean;
      /**
       * 5th button to do an operation on the list item 
       */
      'button5'?: string;
      /**
       * The colour of the 5th button 
       */
      'button5Accent'?: Accent;
      /**
       * The icon for the 5th button 
       */
      'button5Icon'?: Icon;
      /**
       * Whether the button is rounded 
       */
      'button5Rounded'?: boolean;
      /**
       * Whether the button is squared 
       */
      'button5Squared'?: boolean;
      /**
       * The class name for the container.
       */
      'containerClassName'?: string;
      /**
       * JSX style object in JSON to apply to the container for the list, pager and multi-select container.
       */
      'containerStyle'?: string;
      /**
       * The data that drives the list. This prop is expected to be an array of objects. This prop can be set directly via javascript or via the setData() method. The primaryField, secondaryField, imageField, leftIconField and rightIconField props should reference properties in each object in this array
       */
      'data'?: any[];
      /**
       * The height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'height'?: string;
      /**
       * The border radius of the image 
       */
      'imageBorderRadius'?: string;
      /**
       * The field in the data array prop that gives an image path 
       */
      'imageField'?: string;
      /**
       * The height of the image 
       */
      'imageHeight'?: string;
      /**
       * The border radius of the image 
       */
      'imageObjectFit'?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
      /**
       * The width of the image 
       */
      'imageWidth'?: string;
      /**
       * The class name for the item container.
       */
      'itemContainerClassName'?: string;
      /**
       * JSX style object in JSON to apply to the list items.
       */
      'itemContainerStyle'?: string;
      /**
       * The field to get the style for the item container.
       */
      'itemContainerStyleField'?: string;
      /**
       * The field in the data array prop that gives the value under the secondary value 
       */
      'leftField1'?: string;
      /**
       * An icon to appear next to the left field 1 
       */
      'leftField1Icon'?: Icon;
      /**
       * The accent for the left field 1 icon 
       */
      'leftField1IconAccent'?: Accent;
      /**
       * Whether left field 1 should be inline 
       */
      'leftField1Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField1StyleField'?: string;
      /**
       * The left field 1 field data type 
       */
      'leftField1Type'?: DataType;
      /**
       * The field under leftField1 
       */
      'leftField2'?: string;
      /**
       * An icon to appear next to the left field 2 
       */
      'leftField2Icon'?: Icon;
      /**
       * The accent for the left field 2 icon 
       */
      'leftField2IconAccent'?: Accent;
      /**
       * Whether left field 2 should be inline 
       */
      'leftField2Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField2StyleField'?: string;
      /**
       * The left field 2 field data type 
       */
      'leftField2Type'?: DataType;
      /**
       * The field under leftField2 
       */
      'leftField3'?: string;
      /**
       * An icon to appear next to the left field 3 
       */
      'leftField3Icon'?: Icon;
      /**
       * The accent for the left field 3 icon 
       */
      'leftField3IconAccent'?: Accent;
      /**
       * Whether left field 3 should be inline 
       */
      'leftField3Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField3StyleField'?: string;
      /**
       * The left field 3 field data type 
       */
      'leftField3Type'?: DataType;
      /**
       * The field under leftField3 
       */
      'leftField4'?: string;
      /**
       * An icon to appear next to the left field 4 
       */
      'leftField4Icon'?: Icon;
      /**
       * The accent for the left field 4 icon 
       */
      'leftField4IconAccent'?: Accent;
      /**
       * Whether left field 4 should be inline 
       */
      'leftField4Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField4StyleField'?: string;
      /**
       * The left field 4 field data type 
       */
      'leftField4Type'?: DataType;
      /**
       * The field under leftField4 
       */
      'leftField5'?: string;
      /**
       * An icon to appear next to the left field 5 
       */
      'leftField5Icon'?: Icon;
      /**
       * The accent for the left field 5 icon 
       */
      'leftField5IconAccent'?: Accent;
      /**
       * Whether left field 5 should be inline 
       */
      'leftField5Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftField5StyleField'?: string;
      /**
       * The left field 5 field data type 
       */
      'leftField5Type'?: DataType;
      /**
       * The left icon name. Use if the icon is the same for all list items 
       */
      'leftIcon'?: Icon;
      /**
       * The left icon color 
       */
      'leftIconAccent'?: Accent;
      /**
       * The field in the data array prop that gives the left icon color 
       */
      'leftIconAccentField'?: string;
      /**
       * The field in the data array prop that gives an icon name for an icon on the left 
       */
      'leftIconField'?: string;
      /**
       * The left icon size 
       */
      'leftIconSize'?: number;
      /**
       * The label for left field 1 
       */
      'leftLabel1'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel1Style'?: string;
      /**
       * The label for left field 2 
       */
      'leftLabel2'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel2Style'?: string;
      /**
       * The label for left field 3 
       */
      'leftLabel3'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel3Style'?: string;
      /**
       * The label for left field 4 
       */
      'leftLabel4'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel4Style'?: string;
      /**
       * The label for left field 5 
       */
      'leftLabel5'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'leftLabel5Style'?: string;
      /**
       * JSX style object in JSON to apply to the container for the list.
       */
      'listContainerStyle'?: string;
      /**
       * The max height of the list. If this is set, a scrollbar will show when the items go beyond the height
       */
      'maxHeight'?: string;
      /**
       * The min height of the list 
       */
      'minHeight'?: string;
      /**
       * Whether multiple items can be selected  
       */
      'multiCheck'?: boolean;
      /**
       * Whether the checkbox is on the left or right  
       */
      'multiCheckAlign'?: 'left' | 'right';
      /**
       * Whether the checkbox is rounded  
       */
      'multiCheckRounded'?: boolean;
      /**
       * The size of the checkbox  
       */
      'multiCheckSize'?: 'normal' | 'large';
      /**
       * Suppresses select all checkbox 
       */
      'multiCheckSuppressSelectAll'?: boolean;
      /**
       * Event raised when a button is clicked  
       */
      'onButtonClick'?: (event: CustomEvent<IListItemButtonClick>) => void;
      /**
       * Event raised when a list item is selected  
       */
      'onListItemSelected'?: (event: CustomEvent<IListItemSelected>) => void;
      /**
       * Event raised when a list item or list items are checked  
       */
      'onListItemsChecked'?: (event: CustomEvent<IListItemsChecked>) => void;
      /**
       * The current page number  
       */
      'page'?: number;
      /**
       * The total number of pages. Note that this might not be passed if the number of pages is unknown  
       */
      'pageCount'?: number;
      /**
       * The page size. Note that this might not be passed if there is no paging  
       */
      'pageSize'?: number;
      /**
       * The field in the data array prop that gives the primary value 
       */
      'primaryField'?: string;
      /**
       * Whether the primary field should be inline 
       */
      'primaryFieldInline'?: boolean;
      /**
       * JSX style object in JSON to apply to the primary field 
       */
      'primaryFieldStyle'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'primaryFieldStyleField'?: string;
      /**
       * The primary field data type 
       */
      'primaryFieldType'?: DataType;
      /**
       * The total number of records. Note that this might not be passed if the number of records is unknown  
       */
      'recordCount'?: number;
      /**
       * The field in the data array prop that appears at the right of the list 
       */
      'rightField1'?: string;
      /**
       * An icon to appear next to the right field 1 
       */
      'rightField1Icon'?: Icon;
      /**
       * The accent for the right field 1 icon 
       */
      'rightField1IconAccent'?: Accent;
      /**
       * Whether right field 1 should be inline 
       */
      'rightField1Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField1StyleField'?: string;
      /**
       * The right field 1 field data type 
       */
      'rightField1Type'?: DataType;
      /**
       * The field under rightField1 
       */
      'rightField2'?: string;
      /**
       * An icon to appear next to the right field 2 
       */
      'rightField2Icon'?: Icon;
      /**
       * The accent for the right field 2 icon 
       */
      'rightField2IconAccent'?: Accent;
      /**
       * Whether right field 2 should be inline 
       */
      'rightField2Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField2StyleField'?: string;
      /**
       * The right field 2 field data type 
       */
      'rightField2Type'?: DataType;
      /**
       * The field under rightField2 
       */
      'rightField3'?: string;
      /**
       * An icon to appear next to the right field 3 
       */
      'rightField3Icon'?: Icon;
      /**
       * The accent for the right field 3 icon 
       */
      'rightField3IconAccent'?: Accent;
      /**
       * Whether right field 3 should be inline 
       */
      'rightField3Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField3StyleField'?: string;
      /**
       * The right field 3 field data type 
       */
      'rightField3Type'?: DataType;
      /**
       * The field under rightField3 
       */
      'rightField4'?: string;
      /**
       * An icon to appear next to the right field 4 
       */
      'rightField4Icon'?: Icon;
      /**
       * The accent for the right field 4 icon 
       */
      'rightField4IconAccent'?: Accent;
      /**
       * Whether right field 4 should be inline 
       */
      'rightField4Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField4StyleField'?: string;
      /**
       * The right field 4 field data type 
       */
      'rightField4Type'?: DataType;
      /**
       * The field under rightField4 
       */
      'rightField5'?: string;
      /**
       * An icon to appear next to the right field 5 
       */
      'rightField5Icon'?: Icon;
      /**
       * The accent for the right field 5 icon 
       */
      'rightField5IconAccent'?: Accent;
      /**
       * Whether right field 5 should be inline 
       */
      'rightField5Inline'?: boolean;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5Style'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightField5StyleField'?: string;
      /**
       * The right field 5 field data type 
       */
      'rightField5Type'?: DataType;
      /**
       * The right icon name. Use if the icon is the same for all list items 
       */
      'rightIcon'?: Icon;
      /**
       * The right icon color 
       */
      'rightIconAccent'?: Accent;
      /**
       * The field in the data array prop that gives the right icon color 
       */
      'rightIconAccentField'?: string;
      /**
       * The field in the data array prop that gives an icon name for an icon on the right 
       */
      'rightIconField'?: string;
      /**
       * The right icon size 
       */
      'rightIconSize'?: number;
      /**
       * The label for right field 1 
       */
      'rightLabel1'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel1Style'?: string;
      /**
       * The label for right field 2 
       */
      'rightLabel2'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel2Style'?: string;
      /**
       * The label for right field 3 
       */
      'rightLabel3'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel3Style'?: string;
      /**
       * The label for right field 4 
       */
      'rightLabel4'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel4Style'?: string;
      /**
       * The label for right field 5 
       */
      'rightLabel5'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'rightLabel5Style'?: string;
      /**
       * The field in the data array prop that gives the secondary value 
       */
      'secondaryField'?: string;
      /**
       * An icon to appear next to the secondary field 
       */
      'secondaryFieldIcon'?: Icon;
      /**
       * The accent for the secondary icon 
       */
      'secondaryFieldIconAccent'?: Accent;
      /**
       * Whether the secondary field should be inline 
       */
      'secondaryFieldInline'?: boolean;
      /**
       * JSX style object in JSON to apply to the secondary field 
       */
      'secondaryFieldStyle'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'secondaryFieldStyleField'?: string;
      /**
       * The secondary field data type 
       */
      'secondaryFieldType'?: DataType;
      /**
       * Whether items in the list can be selected and allow the listItemSelected event to be raised
       */
      'selectable'?: boolean;
    }

    export interface TagMainHeaderAttributes extends HTMLAttributes {
      'accent'?: Accent;
    }

    export interface TagMenuItemAttributes extends HTMLAttributes {
      /**
       * An icon reference to display in the item 
       */
      'icon'?: Icon;
      /**
       * The unique name of the item 
       */
      'name'?: string;
      /**
       * Event raised when a menu item is clicked  
       */
      'onMenuItemClick'?: (event: CustomEvent) => void;
      /**
       * The text to display in the item 
       */
      'text'?: string;
    }

    export interface TagMenuAttributes extends HTMLAttributes {
      'icon'?: Icon;
      'text'?: string;
    }

    export interface TagMessageAttributes extends HTMLAttributes {
      /**
       * The title of the dialog 
       */
      'heading'?: string;
      /**
       * The height of the dialog 
       */
      'height'?: string;
      'primaryButton'?: string;
      /**
       * The text to display as the confirmation dialog 
       */
      'text'?: string;
      /**
       * The The type of the dialog 
       */
      'type'?: AlertType;
      /**
       * Whether the dialog is shown 
       */
      'visible'?: boolean;
      /**
       * The width of the dialog 
       */
      'width'?: 'small' | 'medium' | 'large' | 'full-screen';
    }

    export interface TagModalAttributes extends HTMLAttributes {
      /**
       * The background colour 
       */
      'backgroundAccent'?: Accent;
      /**
       * The border colour 
       */
      'borderAccent'?: Accent;
      /**
       * The cancel button text 
       */
      'cancelButton'?: string;
      /**
       * The class name to add to the content 
       */
      'contentClassName'?: string;
      /**
       * JSX style object in JSON to apply to the content slot 
       */
      'contentStyle'?: string;
      /**
       * The title of the dialog 
       */
      'heading'?: string;
      /**
       * The heading colour 
       */
      'headingAccent'?: Accent;
      /**
       * The backround colour of the header 
       */
      'headingBackgroundAccent'?: Accent;
      /**
       * The class name to add to the heading 
       */
      'headingClassName'?: string;
      /**
       * An icon that appears to the left of the title 
       */
      'headingIcon'?: Icon;
      /**
       * The icon colour 
       */
      'headingIconAccent'?: Accent;
      /**
       * JSX style object in JSON to apply to the header 
       */
      'headingStyle'?: string;
      /**
       * The text type for the heading 
       */
      'headingType'?: TextType;
      /**
       * The height of the dialog 
       */
      'height'?: string;
      /**
       * Event raised when the cancel button is clicked  
       */
      'onCancelButtonClick'?: (event: CustomEvent<IModalButtonClick>) => void;
      /**
       * Event raised when the modal is closed  
       */
      'onClosed'?: (event: CustomEvent) => void;
      /**
       * Event raised when the primary button is clicked  
       */
      'onPrimaryButtonClick'?: (event: CustomEvent<IModalButtonClick>) => void;
      /**
       * The primary button text 
       */
      'primaryButton'?: string;
      /**
       * The accent of the primary button 
       */
      'primaryButtonAccent'?: Accent;
      /**
       * Whether the dialog is shown 
       */
      'visible'?: boolean;
      /**
       * The width of the dialog 
       */
      'width'?: 'small' | 'medium' | 'large' | 'full-screen';
    }

    export interface TagPagerAttributes extends HTMLAttributes {
      /**
       * Event raised when a page button is clicked  
       */
      'onPageRequest'?: (event: CustomEvent<IPageRequestArgs>) => void;
      /**
       * The current page number  
       */
      'page'?: number;
      /**
       * The total number of pages. Note that this might not be passed if the number of pages is unknown  
       */
      'pageCount'?: number;
    }

    export interface TagPopoverAttributes extends HTMLAttributes {
      /**
       * Whether to always open the popover when clicked (rather than toggling opened / closed) 
       */
      'alwaysOpenWhenClick'?: boolean;
      /**
       * The colour of the arrow 
       */
      'arrowAccent'?: Accent;
      /**
       * Event raised when the popover is closed  
       */
      'onClosed'?: (event: CustomEvent) => void;
      /**
       * Event raised when the popover is opened  
       */
      'onOpened'?: (event: CustomEvent) => void;
      /**
       * Whether the popover is open 
       */
      'open'?: boolean;
      /**
       * The CSS selector for the source element for the popover 
       */
      'popoverFor'?: string;
      /**
       * How the popover should be positioned 
       */
      'position'?: PopoverPosition;
      /**
       * Whether to hide the close icon 
       */
      'suppressCloseIcon'?: boolean;
    }

    export interface TagProgressDonutAttributes extends HTMLAttributes {
      /**
       * The fill colour 
       */
      'accent'?: Accent;
      /**
       * Whether to display theshadow 
       */
      'shadow'?: boolean;
      /**
       * The stroke width of the component 
       */
      'strokeWidth'?: number;
      /**
       * The styles to apply to the text 
       */
      'textStyle'?: string;
      /**
       * The percentage the donut is filled in 
       */
      'value'?: number;
      /**
       * The width of the component 
       */
      'width'?: string;
    }

    export interface TagProgressIndeterminateAttributes extends HTMLAttributes {
      /**
       * The colour of the progress indicator 
       */
      'accent'?: Accent;
      /**
       * Whether the progress indicator overlays the whole screen 
       */
      'full'?: boolean;
      /**
       * The text to display under the progress indicator 
       */
      'text'?: string;
    }

    export interface TagRecordNavAttributes extends HTMLAttributes {
      /**
       * Event raised when a record number is clicked  
       */
      'onRecordRequest'?: (event: CustomEvent<IRecordRequestArgs>) => void;
      /**
       * The current record number  
       */
      'record'?: number;
      /**
       * The total number of record  
       */
      'recordCount'?: number;
    }

    export interface TagRecordAttributes extends HTMLAttributes {
      /**
       * The class name for the container. Any utility class can be referenced The class name for the container The default class is "container" which gives a 1px border with 10px padding
       */
      'containerClassName'?: string;
      /**
       * The data that the view is bound to. This can be an array (which makes navigation through the records available). This can be also be an object.
       */
      'data'?: any;
      /**
       * The index of the selected record in the array
       */
      'selectedIndex'?: number;
    }

    export interface TagSearchAttributes extends HTMLAttributes {
      /**
       * Whether the search box should have a border 
       */
      'borderless'?: boolean;
      /**
       * The delay in milliseconds after the user stops typing before the search is invoked 
       */
      'delay'?: number;
      /**
       * Event raised when the search is invoked  
       */
      'onSearch'?: (event: CustomEvent) => void;
      /**
       * The placeholder on the search input 
       */
      'placeholder'?: string;
    }

    export interface TagSearchboxAttributes extends HTMLAttributes {
      /**
       * Whether the search box should have a border 
       */
      'borderless'?: boolean;
      /**
       * The delay in milliseconds after the user stops typing before the search is invoked 
       */
      'delay'?: number;
      /**
       * Event raised when the search is invoked  
       */
      'onSearch'?: (event: CustomEvent) => void;
      /**
       * The placeholder on the search input 
       */
      'placeholder'?: string;
      /**
       * The search criteria value 
       */
      'value'?: string;
    }

    export interface TagSliderAttributes extends HTMLAttributes {
      /**
       * The increment value 
       */
      'accent'?: Accent;
      /**
       * The type of the field that is used for value formatting 
       */
      'dataType'?: DataType;
      /**
       * Whether the slider is disabled  
       */
      'disabled'?: boolean;
      /**
       * The formatting options 
       */
      'formattingOptions'?: string;
      /**
       * The id of the input 
       */
      'id'?: string;
      /**
       * The maximum value 
       */
      'max'?: number;
      /**
       * The minimum value 
       */
      'min'?: number;
      /**
       * The name of the input 
       */
      'name'?: string;
      /**
       * Event raised when a the slider value changes 
       */
      'onValueChange'?: (event: CustomEvent<ISliderChangeArgs>) => void;
      /**
       * The increment value when using the keyboard arrow buttons 
       */
      'step'?: number;
      /**
       * The value 
       */
      'value'?: number;
    }

    export interface TagStatAttributes extends HTMLAttributes {
      /**
       * The background colour for the KPI 
       */
      'accent'?: Accent;
      /**
       * The label for the KPI 
       */
      'label'?: string;
      /**
       * Whether the value is under the label (vertical) or at the side (horizontal) 
       */
      'orientation'?: 'vertical' | 'horizontal';
      /**
       * The KPI value 
       */
      'value'?: string;
    }

    export interface TagStatsAttributes extends HTMLAttributes {
      /**
       * The text colour 
       */
      'accent'?: Accent;
      /**
       * The data 
       */
      'data'?: any[];
      /**
       * The heading 
       */
      'heading'?: string;
      /**
       * The field to get the labels from 
       */
      'labelField'?: string;
      /**
       * The sub heading 
       */
      'subHeading'?: string;
      /**
       * The field to get the values from 
       */
      'valueField'?: string;
    }

    export interface TagTableColumnAttributes extends HTMLAttributes {
      /**
       * The caption for the column 
       */
      'caption'?: string;
      /**
       * The field that gives the accent colour for the cell text 
       */
      'cellAccentField'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'cellFieldStyle'?: string;
      /**
       * The height of the cell element 
       */
      'cellHeight'?: string;
      /**
       * The width of the cell element 
       */
      'cellWidth'?: string;
      /**
       * The data type for the column 
       */
      'dataType'?: DataType;
      /**
       * The formatting options 
       */
      'formattingOptions'?: string;
      /**
       * The name of the column 
       */
      'name'?: string;
      /**
       * Whether the field can be sorted on 
       */
      'sortable'?: string;
    }

    export interface TagTableAttributes extends HTMLAttributes {
      /**
       * A button to do an operation on the row 
       */
      'button'?: string;
      /**
       * The colour of the button 
       */
      'buttonAccent'?: Accent;
      /**
       * The icon for the button 
       */
      'buttonIcon'?: Icon;
      /**
       * The columns for the table 
       */
      'columns'?: IDataTableColumn[];
      /**
       * The data for the table 
       */
      'data'?: any[];
      'height'?: string;
      /**
       * Event raised when a button is clicked  
       */
      'onButtonClick'?: (event: CustomEvent<IRowButtonClick>) => void;
      /**
       * The current page number  
       */
      'page'?: number;
      /**
       * The total number of pages. Note that this might not be passed if the number of pages is unknown  
       */
      'pageCount'?: number;
      /**
       * The page size. Note that this might not be passed if there is no paging  
       */
      'pageSize'?: number;
      /**
       * The total number of records. Note that this might not be passed if the number of records is unknown  
       */
      'recordCount'?: number;
      /**
       * JSX style object in JSON to apply 
       */
      'rowFieldStyle'?: string;
      /**
       * JSX style object in JSON to apply 
       */
      'tableStyle'?: string;
    }

    export interface TagTabAttributes extends HTMLAttributes {
      'caption'?: string;
      'hidden'?: boolean;
      'key'?: string;
    }

    export interface TagTabsAttributes extends HTMLAttributes {
      /**
       * The accent colour for the selected tab 
       */
      'accent'?: Accent;
      /**
       * JSX style object in JSON to apply to the tab header 
       */
      'headerStyle'?: string;
      /**
       * Event raised when the active tab changes 
       */
      'onTabChange'?: (event: CustomEvent) => void;
      /**
       * JSX style object in JSON to apply to the tab content 
       */
      'panelStyle'?: string;
      /**
       * The type of tabs to render 
       */
      'type'?: 'block' | 'underline';
    }

    export interface TagTextAttributes extends HTMLAttributes {
      /**
       * The colour of the text 
       */
      'accent'?: Accent;
      /**
       * The type of the field that is used for value formatting 
       */
      'dataType'?: DataType;
      /**
       * The formatting options 
       */
      'formattingOptions'?: string;
      /**
       * Treat text as inline and remove block and margin from text 
       */
      'inline'?: boolean;
      /**
       * The text  
       */
      'text'?: string;
      /**
       * The styles to apply to the text 
       */
      'textStyle'?: string;
      /**
       * The type of the string  
       */
      'type'?: TextType;
    }

    export interface TagToastAttributes extends HTMLAttributes {
      /**
       * The position of the toast 
       */
      'position'?: 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';
    }

    export interface TagTopNavbarAttributes extends HTMLAttributes {
      /**
       * The name to appear to the right of the logo  
       */
      'name'?: string;
    }

    export interface TagValidationAttributes extends HTMLAttributes {
      /**
       * The arguments that are to be passed into the validation rule function 
       */
      'args'?: any;
      /**
       * When the validation rule should be executed 
       */
      'executeOn'?: 'valueChange' | 'blur';
      /**
       * The message to display if validation fails 
       */
      'message'?: string;
      /**
       * The validation rule name 
       */
      'rule'?: string;
    }

    export interface TagWizardStepAttributes extends HTMLAttributes {
      /**
       * Whether the finish button is visible or not 
       */
      'finishVisible'?: boolean;
      /**
       * The step name 
       */
      'name'?: string;
      /**
       * Whether the next button is enabled or not 
       */
      'nextEnabled'?: boolean;
      /**
       * The next step name if not the one directly after 
       */
      'nextStep'?: string;
      /**
       * Whether the next button is visible or not 
       */
      'nextVisible'?: boolean;
      /**
       * Event raised when the finish button is pressed 
       */
      'onFinishClick'?: (event: CustomEvent) => void;
      /**
       * Event raised when the next button is pressed 
       */
      'onNextClick'?: (event: CustomEvent) => void;
      /**
       * Event raised when the previous button is pressed 
       */
      'onPreviousClick'?: (event: CustomEvent) => void;
      /**
       * Whether the previous button is enabled or not 
       */
      'previousEnabled'?: boolean;
      /**
       * The previous step name if not the one directly before 
       */
      'previousStep'?: string;
      /**
       * Whether the previous button is visible or not 
       */
      'previousVisible'?: boolean;
    }

    export interface TagWizardAttributes extends HTMLAttributes {
      'height'?: string;
      /**
       * Event that can be subscribed to handle the wizard submission 
       */
      'onSubmit'?: (event: CustomEvent<ISubmitArgs>) => void;
      /**
       * A function that maps server validation errors to IFormErrors which is the format this component expects. By default the ASP.NET MVC mapper is used
       */
      'serverValidationMapper'?: (
    response: IHttpResponse,
    fieldNames: string[],
  ) => { [key: string]: string[] };
      'submitFailureMessage'?: string;
      'submitSuccessMessage'?: string;
      'submitValidationMessage'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'tag-access-logo': HTMLTagAccessLogoElement
    'tag-alert': HTMLTagAlertElement
    'tag-app-header': HTMLTagAppHeaderElement
    'tag-avatar': HTMLTagAvatarElement
    'tag-badge': HTMLTagBadgeElement
    'tag-bar': HTMLTagBarElement
    'tag-button': HTMLTagButtonElement
    'tag-card-kpi': HTMLTagCardKpiElement
    'tag-card-okr': HTMLTagCardOkrElement
    'tag-card-profile': HTMLTagCardProfileElement
    'tag-card': HTMLTagCardElement
    'tag-checkbox': HTMLTagCheckboxElement
    'tag-code': HTMLTagCodeElement
    'tag-combobox': HTMLTagComboboxElement
    'tag-confirm': HTMLTagConfirmElement
    'tag-date-picker': HTMLTagDatePickerElement
    'tag-edit-field-option': HTMLTagEditFieldOptionElement
    'tag-edit-field': HTMLTagEditFieldElement
    'tag-edit-list': HTMLTagEditListElement
    'tag-field': HTMLTagFieldElement
    'tag-file-picker': HTMLTagFilePickerElement
    'tag-form-group': HTMLTagFormGroupElement
    'tag-form': HTMLTagFormElement
    'tag-http': HTMLTagHttpElement
    'tag-icon-svg': HTMLTagIconSvgElement
    'tag-icon': HTMLTagIconElement
    'tag-layout-sidenav': HTMLTagLayoutSidenavElement
    'tag-link': HTMLTagLinkElement
    'tag-list': HTMLTagListElement
    'tag-main-header': HTMLTagMainHeaderElement
    'tag-menu-item': HTMLTagMenuItemElement
    'tag-menu': HTMLTagMenuElement
    'tag-message': HTMLTagMessageElement
    'tag-modal': HTMLTagModalElement
    'tag-pager': HTMLTagPagerElement
    'tag-popover': HTMLTagPopoverElement
    'tag-progress-donut': HTMLTagProgressDonutElement
    'tag-progress-indeterminate': HTMLTagProgressIndeterminateElement
    'tag-record-nav': HTMLTagRecordNavElement
    'tag-record': HTMLTagRecordElement
    'tag-search': HTMLTagSearchElement
    'tag-searchbox': HTMLTagSearchboxElement
    'tag-slider': HTMLTagSliderElement
    'tag-stat': HTMLTagStatElement
    'tag-stats': HTMLTagStatsElement
    'tag-table-column': HTMLTagTableColumnElement
    'tag-table': HTMLTagTableElement
    'tag-tab': HTMLTagTabElement
    'tag-tabs': HTMLTagTabsElement
    'tag-text': HTMLTagTextElement
    'tag-toast': HTMLTagToastElement
    'tag-top-navbar': HTMLTagTopNavbarElement
    'tag-validation': HTMLTagValidationElement
    'tag-wizard-step': HTMLTagWizardStepElement
    'tag-wizard': HTMLTagWizardElement
  }

  interface ElementTagNameMap {
    'tag-access-logo': HTMLTagAccessLogoElement;
    'tag-alert': HTMLTagAlertElement;
    'tag-app-header': HTMLTagAppHeaderElement;
    'tag-avatar': HTMLTagAvatarElement;
    'tag-badge': HTMLTagBadgeElement;
    'tag-bar': HTMLTagBarElement;
    'tag-button': HTMLTagButtonElement;
    'tag-card-kpi': HTMLTagCardKpiElement;
    'tag-card-okr': HTMLTagCardOkrElement;
    'tag-card-profile': HTMLTagCardProfileElement;
    'tag-card': HTMLTagCardElement;
    'tag-checkbox': HTMLTagCheckboxElement;
    'tag-code': HTMLTagCodeElement;
    'tag-combobox': HTMLTagComboboxElement;
    'tag-confirm': HTMLTagConfirmElement;
    'tag-date-picker': HTMLTagDatePickerElement;
    'tag-edit-field-option': HTMLTagEditFieldOptionElement;
    'tag-edit-field': HTMLTagEditFieldElement;
    'tag-edit-list': HTMLTagEditListElement;
    'tag-field': HTMLTagFieldElement;
    'tag-file-picker': HTMLTagFilePickerElement;
    'tag-form-group': HTMLTagFormGroupElement;
    'tag-form': HTMLTagFormElement;
    'tag-http': HTMLTagHttpElement;
    'tag-icon-svg': HTMLTagIconSvgElement;
    'tag-icon': HTMLTagIconElement;
    'tag-layout-sidenav': HTMLTagLayoutSidenavElement;
    'tag-link': HTMLTagLinkElement;
    'tag-list': HTMLTagListElement;
    'tag-main-header': HTMLTagMainHeaderElement;
    'tag-menu-item': HTMLTagMenuItemElement;
    'tag-menu': HTMLTagMenuElement;
    'tag-message': HTMLTagMessageElement;
    'tag-modal': HTMLTagModalElement;
    'tag-pager': HTMLTagPagerElement;
    'tag-popover': HTMLTagPopoverElement;
    'tag-progress-donut': HTMLTagProgressDonutElement;
    'tag-progress-indeterminate': HTMLTagProgressIndeterminateElement;
    'tag-record-nav': HTMLTagRecordNavElement;
    'tag-record': HTMLTagRecordElement;
    'tag-search': HTMLTagSearchElement;
    'tag-searchbox': HTMLTagSearchboxElement;
    'tag-slider': HTMLTagSliderElement;
    'tag-stat': HTMLTagStatElement;
    'tag-stats': HTMLTagStatsElement;
    'tag-table-column': HTMLTagTableColumnElement;
    'tag-table': HTMLTagTableElement;
    'tag-tab': HTMLTagTabElement;
    'tag-tabs': HTMLTagTabsElement;
    'tag-text': HTMLTagTextElement;
    'tag-toast': HTMLTagToastElement;
    'tag-top-navbar': HTMLTagTopNavbarElement;
    'tag-validation': HTMLTagValidationElement;
    'tag-wizard-step': HTMLTagWizardStepElement;
    'tag-wizard': HTMLTagWizardElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;