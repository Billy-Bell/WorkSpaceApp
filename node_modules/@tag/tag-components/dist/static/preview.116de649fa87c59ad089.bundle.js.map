{"version":3,"file":"static/preview.116de649fa87c59ad089.bundle.js","sources":["webpack:///./src/stories/tag-validation.stories.js"],"sourcesContent":["\n  var withStorySource = require('@storybook/addon-storysource').withStorySource;\n  var __STORY__ = \"import { storiesOf } from '@storybook/html';\\r\\nimport { withKnobs, withKnobsOptions, select, text, boolean } from '@storybook/addon-knobs';\\r\\nimport { TemplateGenerator } from './templates/templateGenerator';\\r\\n\\r\\nimport { ValidationRules } from './templates/story-util';\\r\\n\\r\\nconst template = args => {\\r\\n  return new TemplateGenerator({\\r\\n    name: 'tag-validation',\\r\\n    description: 'Enables validation on a tag-form',\\r\\n    code: args.code,\\r\\n    props: [\\r\\n      {\\r\\n        name: 'rule',\\r\\n        description: 'The validation rule',\\r\\n        type:\\r\\n          'required | email | url | maxlength | minlength | inarray | notinarray | matches | greaterthan | greaterthanorequalto | lessthan | lessthanorequalto | inhttpresponse | notinhttpresponse',\\r\\n      },\\r\\n      {\\r\\n        name: 'args',\\r\\n        description: 'The argument for the validation rule',\\r\\n        type: 'any',\\r\\n      },\\r\\n      {\\r\\n        name: 'message',\\r\\n        description: 'The message that the user should receive when the validation check fails',\\r\\n        type: 'string',\\r\\n      },\\r\\n      {\\r\\n        name: 'executeOn',\\r\\n        description: 'When the rule should execute',\\r\\n        type: 'valueChange | blur',\\r\\n        default: 'blur',\\r\\n      },\\r\\n    ],\\r\\n  });\\r\\n};\\r\\n\\r\\nstoriesOf('Components|tag-validation', module)\\r\\n  .addDecorator(\\r\\n    withKnobsOptions({\\r\\n      timestamps: true, // Doesn't emit events while user is typing.\\r\\n      escapeHTML: false, // Escapes strings to be safe for inserting as innerHTML. This option is true by default in storybook for Vue, Angular, and Polymer, because those frameworks allow rendering plain HTML.\\r\\n    })\\r\\n  )\\r\\n  .add('Required rule', () => {\\r\\n    const knobs = {\\r\\n      executeOn: select('execute-on', ['blur', 'valueChange'], 'blur'),\\r\\n      message: text('message', ''),\\r\\n    };\\r\\n\\r\\n    const preview = (executeOn, message) => {\\r\\n      const messageAttr = message ? ` message='${message}'` : '';\\r\\n      return `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Required field' label='Required field' value=''>\\r\\n        <tag-validation rule='required' execute-on='${executeOn}'${messageAttr}></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n    };\\r\\n\\r\\n    const tl = new template({\\r\\n      code: preview(knobs.executeOn, knobs.message),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Email rule', () => {\\r\\n    const preview = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Email field' label='Email field' value='Joe.Bloggs'>\\r\\n        <tag-validation rule='email' ></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: preview(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Url rule', () => {\\r\\n    const preview = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Url field' label='Url field' value='google.com'>\\r\\n        <tag-validation rule='url'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: preview(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Length rules', () => {\\r\\n    const knobs = {\\r\\n      maxLengthArgs: text('Max length value', '5'),\\r\\n      minLengthArgs: text('Min length value', '5'),\\r\\n    };\\r\\n\\r\\n    const preview = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Max length field' label='Max length field' value='123456'>\\r\\n        <tag-validation rule='maxlength' args='${knobs.maxLengthArgs}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Min length field' label='Max length field' value='1'>\\r\\n        <tag-validation rule='minlength' args='${knobs.minLengthArgs}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: preview(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Array rules', () => {\\r\\n    const arr = JSON.stringify(['1', '2', '3']);\\r\\n    const knobs = {\\r\\n      inArray: text('In array value', arr),\\r\\n      notinArray: text('Not in array value', arr),\\r\\n    };\\r\\n\\r\\n    const code = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='In array field' label='In array field' value='4'>\\r\\n        <tag-validation rule='inarray' args='${knobs.inArray}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Not in array field' label='Not in array field' value='3'>\\r\\n        <tag-validation rule='notinarray' args='${knobs.notinArray}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: code(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Matches rule', () => {\\r\\n    const knobs = {\\r\\n      regex: text('Matches value', 'spain'),\\r\\n    };\\r\\n\\r\\n    const code = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Detect spain rule' label='Detect script tag' value='This is france'>\\r\\n        <tag-validation rule='matches' args='${knobs.regex}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: code(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Greater than / Less than rules', () => {\\r\\n    const knobs = {\\r\\n      greaterThan: text('Greater than value', '5'),\\r\\n      greaterThanOrEqual: text('Greater than or equal to value', '5'),\\r\\n      lessThan: text('less than value', '5'),\\r\\n      lessThanOrEqual: text('Less than or equal to value', '5'),\\r\\n    };\\r\\n\\r\\n    const code = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n  <tag-edit-field name='Greater than rule' label='Greater than rule' value='1'>\\r\\n      <tag-validation rule='greaterthan' args='${knobs.greaterThan}'></tag-validation>\\r\\n  </tag-edit-field>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Greater than or equal to rule' label='Greater than or equal to rule' value='1'>\\r\\n        <tag-validation rule='greaterthanorequalto' args='${knobs.greaterThanOrEqual}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Less than rule' label='Greater than rule' value='6'>\\r\\n        <tag-validation rule='lessthan' args='${knobs.lessThan}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Less than or equal to rule' label='Less than or equal to rule' value='6'>\\r\\n        <tag-validation rule='lessthanorequalto' args='${knobs.lessThanOrEqual}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: code(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  })\\r\\n  .add('Http response rules', () => {\\r\\n    const code = () => `<tag-form submit-button-text='Submit'>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='In http response rule' label='In http response rule' value='Luke Vader'>\\r\\n        <tag-validation rule='inHttpResponse' args='{\\\"path\\\": \\\"https://swapi.co/api/people/?page=1\\\", \\\"responseBodyArrayProp\\\": \\\"results\\\", \\\"objectProp\\\": \\\"name\\\"}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n  <tag-form-group>\\r\\n    <tag-edit-field name='Not in http response rule' label='Not in http response rule' value='Luke Skywalker'>\\r\\n        <tag-validation rule='notinhttpresponse' args='{\\\"path\\\": \\\"https://swapi.co/api/people/?page=1\\\", \\\"responseBodyArrayProp\\\": \\\"results\\\", \\\"objectProp\\\": \\\"name\\\"}'></tag-validation>\\r\\n    </tag-edit-field>\\r\\n  </tag-form-group>\\r\\n</tag-form>`;\\r\\n\\r\\n    const tl = new template({\\r\\n      code: code(),\\r\\n    });\\r\\n\\r\\n    const content = tl.generateTemplate();\\r\\n    return `<div>${content}</div>`;\\r\\n  });\\r\\n\";\n  var __ADDS_MAP__ = {\"Components|tag-validation@Http response rules\":{\"startLoc\":{\"col\":7,\"line\":212},\"endLoc\":{\"col\":3,\"line\":232}},\"Components|tag-validation@Greater than / Less than rules\":{\"startLoc\":{\"col\":7,\"line\":175},\"endLoc\":{\"col\":3,\"line\":211}},\"Components|tag-validation@Matches rule\":{\"startLoc\":{\"col\":7,\"line\":155},\"endLoc\":{\"col\":3,\"line\":174}},\"Components|tag-validation@Array rules\":{\"startLoc\":{\"col\":7,\"line\":128},\"endLoc\":{\"col\":3,\"line\":154}},\"Components|tag-validation@Length rules\":{\"startLoc\":{\"col\":7,\"line\":102},\"endLoc\":{\"col\":3,\"line\":127}},\"Components|tag-validation@Url rule\":{\"startLoc\":{\"col\":7,\"line\":86},\"endLoc\":{\"col\":3,\"line\":101}},\"Components|tag-validation@Email rule\":{\"startLoc\":{\"col\":7,\"line\":70},\"endLoc\":{\"col\":3,\"line\":85}},\"Components|tag-validation@Required rule\":{\"startLoc\":{\"col\":7,\"line\":46},\"endLoc\":{\"col\":3,\"line\":69}}};\n  \n  import { storiesOf } from '@storybook/html';\r\nimport { withKnobs, withKnobsOptions, select, text, boolean } from '@storybook/addon-knobs';\r\nimport { TemplateGenerator } from './templates/templateGenerator';\r\n\r\nimport { ValidationRules } from './templates/story-util';\r\n\r\nconst template = args => {\r\n  return new TemplateGenerator({\r\n    name: 'tag-validation',\r\n    description: 'Enables validation on a tag-form',\r\n    code: args.code,\r\n    props: [\r\n      {\r\n        name: 'rule',\r\n        description: 'The validation rule',\r\n        type:\r\n          'required | email | url | maxlength | minlength | inarray | notinarray | matches | greaterthan | greaterthanorequalto | lessthan | lessthanorequalto | inhttpresponse | notinhttpresponse',\r\n      },\r\n      {\r\n        name: 'args',\r\n        description: 'The argument for the validation rule',\r\n        type: 'any',\r\n      },\r\n      {\r\n        name: 'message',\r\n        description: 'The message that the user should receive when the validation check fails',\r\n        type: 'string',\r\n      },\r\n      {\r\n        name: 'executeOn',\r\n        description: 'When the rule should execute',\r\n        type: 'valueChange | blur',\r\n        default: 'blur',\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nstoriesOf('Components|tag-validation', module).addDecorator(withStorySource(__STORY__, __ADDS_MAP__))\r\n  .addDecorator(\r\n    withKnobsOptions({\r\n      timestamps: true, // Doesn't emit events while user is typing.\r\n      escapeHTML: false, // Escapes strings to be safe for inserting as innerHTML. This option is true by default in storybook for Vue, Angular, and Polymer, because those frameworks allow rendering plain HTML.\r\n    }),\r\n  )\r\n  .add('Required rule', () => {\r\n    const knobs = {\r\n      executeOn: select('execute-on', ['blur', 'valueChange'], 'blur'),\r\n      message: text('message', ''),\r\n    };\r\n\r\n    const preview = (executeOn, message) => {\r\n      const messageAttr = message ? ` message='${message}'` : '';\r\n      return `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Required field' label='Required field' value=''>\r\n        <tag-validation rule='required' execute-on='${executeOn}'${messageAttr}></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n    };\r\n\r\n    const tl = new template({\r\n      code: preview(knobs.executeOn, knobs.message),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Email rule', () => {\r\n    const preview = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Email field' label='Email field' value='Joe.Bloggs'>\r\n        <tag-validation rule='email' ></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: preview(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Url rule', () => {\r\n    const preview = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Url field' label='Url field' value='google.com'>\r\n        <tag-validation rule='url'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: preview(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Length rules', () => {\r\n    const knobs = {\r\n      maxLengthArgs: text('Max length value', '5'),\r\n      minLengthArgs: text('Min length value', '5'),\r\n    };\r\n\r\n    const preview = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Max length field' label='Max length field' value='123456'>\r\n        <tag-validation rule='maxlength' args='${knobs.maxLengthArgs}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Min length field' label='Max length field' value='1'>\r\n        <tag-validation rule='minlength' args='${knobs.minLengthArgs}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: preview(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Array rules', () => {\r\n    const arr = JSON.stringify(['1', '2', '3']);\r\n    const knobs = {\r\n      inArray: text('In array value', arr),\r\n      notinArray: text('Not in array value', arr),\r\n    };\r\n\r\n    const code = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='In array field' label='In array field' value='4'>\r\n        <tag-validation rule='inarray' args='${knobs.inArray}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Not in array field' label='Not in array field' value='3'>\r\n        <tag-validation rule='notinarray' args='${knobs.notinArray}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: code(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Matches rule', () => {\r\n    const knobs = {\r\n      regex: text('Matches value', 'spain'),\r\n    };\r\n\r\n    const code = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Detect spain rule' label='Detect script tag' value='This is france'>\r\n        <tag-validation rule='matches' args='${knobs.regex}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: code(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Greater than / Less than rules', () => {\r\n    const knobs = {\r\n      greaterThan: text('Greater than value', '5'),\r\n      greaterThanOrEqual: text('Greater than or equal to value', '5'),\r\n      lessThan: text('less than value', '5'),\r\n      lessThanOrEqual: text('Less than or equal to value', '5'),\r\n    };\r\n\r\n    const code = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n  <tag-edit-field name='Greater than rule' label='Greater than rule' value='1'>\r\n      <tag-validation rule='greaterthan' args='${knobs.greaterThan}'></tag-validation>\r\n  </tag-edit-field>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Greater than or equal to rule' label='Greater than or equal to rule' value='1'>\r\n        <tag-validation rule='greaterthanorequalto' args='${\r\n          knobs.greaterThanOrEqual\r\n        }'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Less than rule' label='Greater than rule' value='6'>\r\n        <tag-validation rule='lessthan' args='${knobs.lessThan}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Less than or equal to rule' label='Less than or equal to rule' value='6'>\r\n        <tag-validation rule='lessthanorequalto' args='${knobs.lessThanOrEqual}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: code(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  })\r\n  .add('Http response rules', () => {\r\n    const code = () => `<tag-form submit-button-text='Submit'>\r\n  <tag-form-group>\r\n    <tag-edit-field name='In http response rule' label='In http response rule' value='Luke Vader'>\r\n        <tag-validation rule='inHttpResponse' args='{\"path\": \"https://swapi.co/api/people/?page=1\", \"responseBodyArrayProp\": \"results\", \"objectProp\": \"name\"}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n  <tag-form-group>\r\n    <tag-edit-field name='Not in http response rule' label='Not in http response rule' value='Luke Skywalker'>\r\n        <tag-validation rule='notinhttpresponse' args='{\"path\": \"https://swapi.co/api/people/?page=1\", \"responseBodyArrayProp\": \"results\", \"objectProp\": \"name\"}'></tag-validation>\r\n    </tag-edit-field>\r\n  </tag-form-group>\r\n</tag-form>`;\r\n\r\n    const tl = new template({\r\n      code: code(),\r\n    });\r\n\r\n    const content = tl.generateTemplate();\r\n    return `<div>${content}</div>`;\r\n  });\r\n\n  "],"mappings":"AACA","sourceRoot":""}