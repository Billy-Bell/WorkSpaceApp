/*! Built with http://stenciljs.com */
import { h } from "./tag-library.core.js";
var variableReplacer = function (e, t) { if (t && e && e.length > 4 && e.indexOf("{{") >= 0 && e.indexOf("}}") >= 0) {
    var n = /{{[A-Za-z0-9\-\_]+}}/gi;
    return e.replace(n, function (e) { var n = e.slice(2, -2); var r = e; return t.hasOwnProperty(n) && null == (r = t[n]) && (r = ""), r; });
} return e; }, nodeVariableReplacer = function (e, t) { for (var n = 0; n < e.childNodes.length; n++) {
    var r = e.childNodes[n];
    domAttributeVariableReplacer(r, t), domTextContentReplacer(r, t), nodeVariableReplacer(r, t);
} return domAttributeVariableReplacer(e, t), domTextContentReplacer(e, t), e; }, domTextContentReplacer = function (e, t) { if (e.textContent && 0 === e.childNodes.length) {
    var n = getSavedBindingExpressionFromElement(e);
    n || (n = e.textContent);
    var r = variableReplacer(n, t);
    e.textContent !== r && (saveBindingExpressionOnElement(e), e.textContent = r);
} }, saveBindingExpressionOnElement = function (e) { var t = e; t.bind || (t.bind = e.textContent); }, getSavedBindingExpressionFromElement = function (e) { return e.bind; }, domAttributeVariableReplacer = function (e, t) { if (e.attributes && e.attributes.length)
    for (var n = 0; n < e.attributes.length; n++) {
        var r = e.attributes[n];
        var a = getSavedBindingExpressionFromAttribute(r);
        a || (a = r.value);
        var i = variableReplacer(a, t);
        a !== i && (saveBindingExpressionOnAttribute(r), e.setAttribute(r.name, i));
    } return e; }, saveBindingExpressionOnAttribute = function (e) { var t = e; t.bind || (t.bind = e.value); }, getSavedBindingExpressionFromAttribute = function (e) { return e.bind; }, setElementFieldData = function (e, t, n) { var r = getRecord(t, n), a = e.querySelectorAll("tag-field"); setFieldData(a, r); var i = e.querySelectorAll("tag-edit-field"); setFieldData(i, r); }, setElementFieldReferences = function (e, t, n) { var r = getRecord(t, n); nodeVariableReplacer(e, r); }, getRecord = function (e, t) { return t && t.length - 1 >= e ? t[e] : void 0; }, setFieldData = function (e, t) { for (var n = 0; n < e.length; n++) {
    var r = e[n], a = r.getAttribute("name"), i = void 0 === t ? void 0 : t[a];
    r.value = i, domAttributeVariableReplacer(r, t);
} };
function convertNodeToVdom(e, t) { return function n(r, a) { if ("TEMPLATE" === a.nodeName)
    return r; if (function (e) { return !("STYLE" !== e.nodeName && "LINK" !== e.nodeName || !t.has(e) && (t.add(e), 1)); }(a))
    return r; var i = null; a.childNodes.length && (i = Array.from(a.childNodes).reduce(n, [])); var o = {}; if (1 === a.nodeType) {
    var t_1 = a;
    o = Array.from(t_1.attributes).reduce(function (t, n) { var r = function (e, t) { return "style" === e.toLocaleLowerCase() ? t.split(";").reduce(function (e, t) { var n = t.indexOf(":"); if (-1 !== n) {
        var r_1 = t.slice(0, n), a_1 = t.slice(n + 1);
        e[r_1.trim()] = a_1;
    } return e; }, {}) : t; }(n.name, variableReplacer(n.value, e)); return t[n.name] = r, t; }, {}), "TAG-FIELD" !== t_1.nodeName && "TAG-EDIT-FIELD" !== t_1.nodeName || void 0 !== o.value || (o.value = e[o.name]), "TAG-POPOVER" === t_1.nodeName && (o.data = e);
} if ("#text" === a.nodeName) {
    var t_2 = variableReplacer(a.textContent, e);
    r.push(t_2);
} return "#comment" === a.nodeName ? r : ("#text" !== a.nodeName && r.push(h(a.nodeName, o, i)), r); }; }
export { variableReplacer as a, convertNodeToVdom as b, setElementFieldData as c, setElementFieldReferences as d, nodeVariableReplacer as e, setFieldData as f };
