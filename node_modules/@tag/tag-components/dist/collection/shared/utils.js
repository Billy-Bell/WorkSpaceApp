/**
 * Finds an array of data in an object and returns it
 * @param {any} obj - The object to find the array in
 */
export const findArrayInObject = (obj) => {
    let found = obj;
    Object.keys(obj).forEach((key) => {
        if (Array.isArray(obj[key])) {
            found = obj[key];
        }
    });
    return found;
};
/**
 * Copies an array or object or array of objects
 * @param {any} obj - The object to copy
 */
export const copy = obj => {
    if (obj === undefined) {
        return undefined;
    }
    else {
        const output = Array.isArray(obj) ? [] : {};
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const v = obj[key];
                output[key] = typeof v === 'object' ? copy(v) : v;
            }
        }
        return output;
    }
};
/**
 * Gets an icon for an alert type
 * @param {AlertType} alertType - The alert type
 */
export const getIconForAlertType = (alertType) => {
    if (alertType.toLowerCase() === 'danger') {
        return 'CircleCross';
    }
    else if (alertType.toLowerCase() === 'information') {
        return 'CircleInfo';
    }
    else if (alertType.toLowerCase() === 'question') {
        return 'CircleQuestionMark';
    }
    else if (alertType.toLowerCase() === 'warning') {
        return 'Warning';
    }
    else {
        return 'CircleInfo';
    }
};
/**
 * Gets an accent for an alert type
 * @param {AlertType} alertType - The alert type
 */
export const getAccentForAlertType = (alertType) => {
    if (alertType.toLowerCase() === 'danger') {
        return 'danger';
    }
    else if (alertType.toLowerCase() === 'information') {
        return 'info';
    }
    else if (alertType.toLowerCase() === 'question') {
        return 'info';
    }
    else if (alertType.toLowerCase() === 'warning') {
        return 'warning';
    }
    else {
        return 'info';
    }
};
export const nativeShadowDom = (document) => {
    let native = false;
    if ('registerElement' in document &&
        'import' in document.createElement('link') &&
        'content' in document.createElement('template')) {
        native = true;
    }
    return native;
};
export const guid = () => {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
};
/**
 * Parses the json style prop and returns a JSX style object
 * @param {string} style - The style json
 */
export const createStyleFromJson = (style) => {
    let styleObj = {};
    if (style) {
        try {
            styleObj = JSON.parse(style);
        }
        catch (ex) {
            // ignore error if incorrect json
        }
    }
    return styleObj;
};
