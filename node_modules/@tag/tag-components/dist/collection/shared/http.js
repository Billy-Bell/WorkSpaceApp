var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import 'whatwg-fetch';
/**
 * Calls a HTTP API
 * @param {IHttpRequest} args - Contains the method, path and body for the response
 */
export const httpCall = (args) => __awaiter(this, void 0, void 0, function* () {
    const result = {};
    const request = {
        headers: args.headers || getDefaultHeaders(),
        method: args.method || 'get',
    };
    if (args.body && args.method !== 'get') {
        request.body = JSON.stringify(args.body);
    }
    yield fetch(args.path, request)
        .then((response) => __awaiter(this, void 0, void 0, function* () {
        result.status = response.status;
        result.ok = response.ok;
        result.headers = response.headers;
        result.body = yield response.json();
    }))
        .catch(err => {
        result.ok = false;
        console.error('error:', err);
    });
    return result;
});
const getDefaultHeaders = () => {
    return new Headers({
        Accept: 'application/json',
        'Content-Type': 'application/json',
    });
};
