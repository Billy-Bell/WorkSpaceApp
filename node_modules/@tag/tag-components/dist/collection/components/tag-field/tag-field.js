import { valueFormatter } from '../../shared/dataConversion';
import { createStyleFromJson } from '../../shared/utils';
/**
 * Encapsulates the rendering of a field including a label and a child component to render the value
 */
export class TagField {
    constructor() {
        /** The type of the field that is used for value formatting */
        this.dataType = 'string';
    }
    render() {
        const { label, dataType, value } = this;
        const containerClassName = 'tag-field';
        const labelClassName = 'tag-field__label fixed-width text-truncate';
        const linkType = dataType === 'email' ? 'mailto' : dataType === 'phonenumber' ? 'tel' : null;
        const formattingOptionsObj = this.formattingOptions
            ? JSON.parse(this.formattingOptions)
            : undefined;
        const valueSpan = linkType ? (h("a", { href: `${linkType}:${value}` },
            h("span", { class: "tag-field__value", style: createStyleFromJson(this.valueStyle) }, valueFormatter(value, dataType, formattingOptionsObj)))) : (h("span", { class: "tag-field__value", style: createStyleFromJson(this.valueStyle) }, valueFormatter(value, dataType, formattingOptionsObj)));
        const haveValue = value !== undefined && value !== null && value !== '';
        return (h("div", { class: containerClassName, style: createStyleFromJson(this.containerStyle) },
            label &&
                haveValue && (h("label", { class: labelClassName, style: createStyleFromJson(this.labelStyle) }, label)),
            dataType === 'image'
                ? haveValue && h("img", { src: value, style: createStyleFromJson(this.valueStyle) })
                : haveValue && valueSpan));
    }
    static get is() { return "tag-field"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "containerStyle": {
            "type": String,
            "attr": "container-style"
        },
        "dataType": {
            "type": String,
            "attr": "data-type",
            "mutable": true
        },
        "formattingOptions": {
            "type": String,
            "attr": "formatting-options"
        },
        "label": {
            "type": String,
            "attr": "label"
        },
        "labelStyle": {
            "type": String,
            "attr": "label-style"
        },
        "name": {
            "type": String,
            "attr": "name"
        },
        "value": {
            "type": "Any",
            "attr": "value",
            "mutable": true
        },
        "valueStyle": {
            "type": String,
            "attr": "value-style"
        }
    }; }
    static get style() { return "/**style-placeholder:tag-field:**/"; }
}
