var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TagAppHeader {
    constructor() {
        /** The colour of the title text */
        this.headingAccent = 'title';
        /* Whether the menu items are visible or not **/
        this.itemsVisible = false;
        /*
         * Handles when the menu header is clicked.
         * This shows / hides the menu item container.
         **/
        this.handleMenuClick = () => {
            this.itemsVisible = !this.itemsVisible;
        };
        /* Hides the menu item container **/
        this.hideMenu = (e) => {
            if (!this.element.contains(e.target)) {
                this.itemsVisible = false;
            }
        };
    }
    /* Adds a click handler for the document that hides the the menu item container **/
    componentDidLoad() {
        document.addEventListener('click', this.hideMenu);
    }
    /* Removes the document click handler **/
    componentDidUnload() {
        document.removeEventListener('click', this.hideMenu);
    }
    /**
     * Subscribe to the menuItemClicked event from the menu items.
     * When menu items are clicked we should hide the menu
     */
    menuItemClickHandler() {
        return __awaiter(this, void 0, void 0, function* () {
            this.itemsVisible = false;
        });
    }
    render() {
        const { heading, headingAccent, icon } = this;
        const headerAccentClassName = `tag-app-header--${this.accent ? this.accent : 'transparent'}`;
        const haveMenu = this.element.querySelectorAll('tag-menu-item').length > 0;
        const ariaHasPopup = haveMenu ? 'true' : 'false';
        const ariaExpanded = this.itemsVisible ? 'true' : 'false';
        return (h("div", { class: `tag-app-header ${headerAccentClassName}` },
            h("div", { class: "tag-app-header__top" },
                h("div", { class: `tag-app-header__top__icon-container ${this.getIconAccentClassName()}` },
                    h("tag-icon", { icon: icon, accent: "white" })),
                h("div", { class: "tag-app-header__top__heading-container" },
                    h("tag-text", { type: "span", text: heading, accent: headingAccent, "text-style": "{\"font-weight\": \"500\", \"font-size\": \"17px\"}" })),
                haveMenu && (h("div", { role: "menu", class: "tag-app-header__top__menu-header-container", onClick: this.handleMenuClick, tabIndex: 0, "aria-haspopup": ariaHasPopup, "aria-expanded": ariaExpanded },
                    h("tag-icon", { icon: "Drag", accent: headingAccent }))),
                h("div", { class: "tag-app-header__top__menu-items", style: { display: this.itemsVisible === true ? 'flex' : 'none' } },
                    h("slot", { name: "menu" }))),
            h("div", { class: "tag-app-header__content" },
                h("slot", { name: "content" }))));
    }
    getIconAccentClassName() {
        let accent;
        if (this.iconAccent) {
            accent = this.iconAccent;
        }
        else if (this.accent) {
            accent = this.accent;
        }
        else {
            accent = 'grey';
        }
        return `tag-app-header__top__icon-container--${accent}`;
    }
    static get is() { return "tag-app-header"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "element": {
            "elementRef": true
        },
        "heading": {
            "type": String,
            "attr": "heading"
        },
        "headingAccent": {
            "type": String,
            "attr": "heading-accent"
        },
        "icon": {
            "type": String,
            "attr": "icon"
        },
        "iconAccent": {
            "type": String,
            "attr": "icon-accent"
        },
        "itemsVisible": {
            "state": true
        }
    }; }
    static get listeners() { return [{
            "name": "menuItemClick",
            "method": "menuItemClickHandler"
        }]; }
    static get style() { return "/**style-placeholder:tag-app-header:**/"; }
}
