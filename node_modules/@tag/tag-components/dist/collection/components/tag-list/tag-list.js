var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { convertNodeToVdom } from '../../shared/dataBinder';
import { valueFormatter } from '../../shared/dataConversion';
import { createStyleFromJson } from '../../shared/utils';
import './template-polyfill.js';
export class TagList {
    constructor() {
        /** Whether the checkbox is on the left or right  */
        this.multiCheckAlign = 'left';
        /** The size of the checkbox  */
        this.multiCheckSize = 'normal';
        /** The current page number  */
        this.page = 1;
        /** The height of the image */
        this.imageHeight = '45px';
        /** The width of the image */
        this.imageWidth = '45px';
        /** The border radius of the image */
        this.imageBorderRadius = '50%';
        /** The border radius of the image */
        this.imageObjectFit = 'cover';
        /** The size of the avatar */
        this.avatarSize = '44px';
        /** The left icon color */
        this.leftIconAccent = 'title';
        /** The field in the data array prop that gives the left icon color */
        this.leftIconAccentField = '';
        /** The right icon color */
        this.rightIconAccent = 'title';
        /** The field in the data array prop that gives the right icon color */
        this.rightIconAccentField = '';
        /** The accent for the secondary icon */
        this.secondaryFieldIconAccent = 'title';
        /** The accent for the left field 1 icon */
        this.leftField1IconAccent = 'title';
        /** The accent for the left field 2 icon */
        this.leftField2IconAccent = 'title';
        /** The accent for the left field 3 icon */
        this.leftField3IconAccent = 'title';
        /** The accent for the left field 4 icon */
        this.leftField4IconAccent = 'title';
        /** The accent for the left field 5 icon */
        this.leftField5IconAccent = 'title';
        /** The accent for the right field 1 icon */
        this.rightField1IconAccent = 'title';
        /** The accent for the right field 2 icon */
        this.rightField2IconAccent = 'title';
        /** The accent for the right field 3 icon */
        this.rightField3IconAccent = 'title';
        /** The accent for the right field 4 icon */
        this.rightField4IconAccent = 'title';
        /** The accent for the right field 5 icon */
        this.rightField5IconAccent = 'title';
        /** The primary field data type */
        this.primaryFieldType = 'string';
        /** The secondary field data type */
        this.secondaryFieldType = 'string';
        /** The left field 1 field data type */
        this.leftField1Type = 'string';
        /** The left field 2 field data type */
        this.leftField2Type = 'string';
        /** The left field 3 field data type */
        this.leftField3Type = 'string';
        /** The left field 4 field data type */
        this.leftField4Type = 'string';
        /** The left field 5 field data type */
        this.leftField5Type = 'string';
        /** The right field 1 field data type */
        this.rightField1Type = 'string';
        /** The right field 2 field data type */
        this.rightField2Type = 'string';
        /** The right field 3 field data type */
        this.rightField3Type = 'string';
        /** The right field 4 field data type */
        this.rightField4Type = 'string';
        /** The right field 5 field data type */
        this.rightField5Type = 'string';
        /**
         * Whether items in the list can be selected and allow the listItemSelected event to be raised
         */
        this.selectable = false;
        /** The index of the list item that is selected */
        this.selectedIndex = -1;
        /** The checked items */
        this.checkedItems = [];
        this.selectAllChecked = false;
        /** Set to store link and style tags so they are only rendered once */
        this.stylingElements = new Set();
        /** Handles a change to a checkbox */
        this.handleCheckboxChange = (e, item) => __awaiter(this, void 0, void 0, function* () {
            if (e.detail.value) {
                this.addCheckedItem(item);
            }
            else {
                this.removeCheckedItem(item);
            }
            this.listItemsChecked.emit({
                items: [item],
            });
            this.selectAllChecked = false;
        });
    }
    /** Handler that resets the selected item when the data prop is set */
    dataChangeHandler() {
        this.resetSelectedIndex();
    }
    /** Process the list template when the component loads */
    componentDidLoad() {
        this.processListTemplate();
    }
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http or tag-search component, the parent component
     * will call this method with the response data.
     * @param {IPagedData | any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data) {
        if (data.data) {
            this.setPagedData(data);
        }
        else {
            this.data = data.slice(0);
        }
        this.resetSelectedIndex();
    }
    /**
     * This is a public method to set the selected item in the list
     * @param {any} item - The data item to select
     * @param {boolean} suppressItemSelectedEvent - Whether the "listItemSelected" event should not trigger. Note that "listItemSelected" will only trigger anyway if "selectable" is true
     */
    select(item, suppressItemSelectedEvent) {
        if (!this.data) {
            return;
        }
        const index = this.getItemIndex(this.data, item);
        // set the selectedIndex state with the found index
        this.selectedIndex = index;
        if (this.selectable && !suppressItemSelectedEvent) {
            // raise the listItemSelected event
            const selectedArgs = {
                item,
                suppressItemSelectedEvent,
                itemIndex: index,
                listItemElement: null,
                targetElement: null,
            };
            this.listItemSelected.emit(selectedArgs);
        }
    }
    /**
     * This is a public method to get the checked items
     */
    getCheckedItems() {
        return this.checkedItems;
    }
    /**
     * This is a public method to set the checked items
     */
    setCheckedItems(items) {
        this.checkedItems = items;
    }
    /** This a public method to toggle all selected checkboxes */
    toggleCheckedItems(checked) {
        this.checkedItems = [];
        this.selectAllChecked = !this.selectAllChecked;
        const dataWithSelected = this.createDataWithSelected();
        // tslint:disable-next-line:prefer-for-of
        for (let index = 0; index < dataWithSelected.length; index++) {
            const item = dataWithSelected[index];
            if (checked) {
                this.checkedItems.push(item);
            }
        }
        this.listItemsChecked.emit({
            items: this.checkedItems,
        });
    }
    render() {
        const { data, page, pageSize, pageCount, leftIcon, leftIconField, leftIconSize, rightIcon, rightIconField, rightIconSize, imageField, imageWidth, imageHeight, imageBorderRadius, imageObjectFit, avatarSrcField, avatarPlaceholderField, avatarSize, primaryField, primaryFieldInline, secondaryField, secondaryFieldIcon, secondaryFieldIconAccent, secondaryFieldInline, leftLabel1, leftLabel2, leftLabel3, leftLabel4, leftLabel5, leftField1, leftField1Icon, leftField1IconAccent, leftField1Inline, leftField2, leftField2Icon, leftField2IconAccent, leftField2Inline, leftField3, leftField3Icon, leftField3IconAccent, leftField3Inline, leftField4, leftField4Icon, leftField4IconAccent, leftField4Inline, leftField5, leftField5Icon, leftField5IconAccent, leftField5Inline, rightLabel1, rightLabel2, rightLabel3, rightLabel4, rightLabel5, rightField1, rightField2, rightField3, rightField4, rightField5, rightField1Icon, rightField1IconAccent, rightField1Inline, rightField2Icon, rightField2IconAccent, rightField2Inline, rightField3Icon, rightField3IconAccent, rightField3Inline, rightField4Icon, rightField4IconAccent, rightField4Inline, rightField5Icon, rightField5IconAccent, rightField5Inline, primaryFieldType, secondaryFieldType, leftField1Type, leftField2Type, leftField3Type, leftField4Type, leftField5Type, rightField1Type, rightField2Type, rightField3Type, rightField4Type, rightField5Type, primaryFieldStyle, secondaryFieldStyle, leftLabel1Style, leftLabel2Style, leftLabel3Style, leftLabel4Style, leftLabel5Style, rightLabel1Style, rightLabel2Style, rightLabel3Style, rightLabel4Style, rightLabel5Style, leftField1Style, leftField2Style, leftField3Style, leftField4Style, leftField5Style, rightField1Style, rightField2Style, rightField3Style, rightField4Style, rightField5Style, primaryFieldStyleField, secondaryFieldStyleField, leftField1StyleField, leftField2StyleField, leftField3StyleField, leftField4StyleField, leftField5StyleField, rightField1StyleField, rightField2StyleField, rightField3StyleField, rightField4StyleField, rightField5StyleField, leftIconAccent, leftIconAccentField, rightIconAccent, rightIconAccentField, button1, button1Accent, button1Icon, button1Rounded, button1Squared, button2, button2Accent, button2Icon, button2Rounded, button2Squared, button3, button3Accent, button3Icon, button3Rounded, button3Squared, button4, button4Accent, button4Icon, button4Rounded, button4Squared, button5, button5Accent, button5Icon, button5Rounded, button5Squared, } = this;
        const dataWithSelected = this.createDataWithSelected();
        const startIndex = pageSize ? (page - 1) * pageSize + 1 : 0;
        const endIndex = data && data.length > 0 ? startIndex + data.length - 1 : 0;
        const pagerVisible = data && data.length > 0 && pageSize && endIndex >= pageSize;
        const primaryTextClass = 'tag-list__primary-text';
        const secondaryTextClass = 'tag-list__secondary-text';
        const leftLabel1Class = 'tag-list__label-text';
        const leftLabel2Class = 'tag-list__label-text';
        const leftLabel3Class = 'tag-list__label-text';
        const leftLabel4Class = 'tag-list__label-text';
        const leftLabel5Class = 'tag-list__label-text';
        const rightLabel1Class = 'tag-list__label-text';
        const rightLabel2Class = 'tag-list__label-text';
        const rightLabel3Class = 'tag-list__label-text';
        const rightLabel4Class = 'tag-list__label-text';
        const rightLabel5Class = 'tag-list__label-text';
        const leftField1Class = 'tag-list__text';
        const leftField2Class = 'tag-list__text';
        const leftField3Class = 'tag-list__text';
        const leftField4Class = 'tag-list__text';
        const leftField5Class = 'tag-list__text';
        const rightField1Class = 'tag-list__text';
        const rightField2Class = 'tag-list__text';
        const rightField3Class = 'tag-list__text';
        const rightField4Class = 'tag-list__text';
        const rightField5Class = 'tag-list__text';
        const haveRightFields = rightField1 || rightField2 || rightField3 || rightField4 || rightField5;
        const defaultIconSize = primaryField && secondaryField ? 32 : 24;
        const getLIClassName = (item) => {
            return this.getListItemClassList(item.selected, this.itemContainerClassName);
        };
        // reset the processed styling elements
        this.stylingElements.clear();
        const multiCheckAlign = this.multiCheckAlign || 'left';
        const multiCheckSize = this.multiCheckSize || 'normal';
        return (h("div", { class: this.containerClassName, style: createStyleFromJson(this.containerStyle) },
            h("ul", { style: this.getListContainerStyle() }, dataWithSelected &&
                dataWithSelected.map(item => (h("li", { onClick: e => this.handleClick(item, e), onKeyDown: e => this.handleKeydown(item, e), tabindex: 0, "aria-label": item[primaryField], class: getLIClassName(item), style: this.getItemContainerStyle(item) },
                    this.templateBuilder && this.templateBuilder(item),
                    !this.templateBuilder && [
                        h("div", { class: "tag-list__left-container" },
                            this.multiCheck &&
                                multiCheckAlign.toLowerCase() === 'left' && (h("tag-checkbox", { class: "tag-list__checkbox", rounded: this.multiCheckRounded, size: multiCheckSize, onValueChange: e => this.handleCheckboxChange(e, item), checked: this.isChecked(item) })),
                            this.renderIcon(leftIcon, leftIconField, leftIconAccent, leftIconAccentField, leftIconSize, defaultIconSize, item),
                            imageField && (h("div", { class: "tag-list__image-container" },
                                h("img", { src: item[imageField], style: {
                                        borderRadius: imageBorderRadius,
                                        height: imageHeight,
                                        objectFit: imageObjectFit,
                                        width: imageWidth,
                                    } }))),
                            avatarSrcField && (h("div", { class: "tag-list__avatar-container" },
                                h("tag-avatar", { src: item[avatarSrcField], placeholder: item[avatarPlaceholderField], size: avatarSize }))),
                            h("div", { class: "tag-list__text-container" },
                                this.renderField(item[primaryField], primaryFieldType, primaryTextClass, undefined, undefined, undefined, undefined, primaryFieldInline, primaryFieldStyle, undefined, primaryFieldStyleField, item),
                                this.renderField(item[secondaryField], secondaryFieldType, secondaryTextClass, undefined, undefined, secondaryFieldIcon, secondaryFieldIconAccent, secondaryFieldInline, secondaryFieldStyle, undefined, secondaryFieldStyleField, item),
                                this.renderField(item[leftField1], leftField1Type, leftField1Class, leftLabel1, leftLabel1Class, leftField1Icon, leftField1IconAccent, leftField1Inline, leftField1Style, leftLabel1Style, leftField1StyleField, item),
                                this.renderField(item[leftField2], leftField2Type, leftField2Class, leftLabel2, leftLabel2Class, leftField2Icon, leftField2IconAccent, leftField2Inline, leftField2Style, leftLabel2Style, leftField2StyleField, item),
                                this.renderField(item[leftField3], leftField3Type, leftField3Class, leftLabel3, leftLabel3Class, leftField3Icon, leftField3IconAccent, leftField3Inline, leftField3Style, leftLabel3Style, leftField3StyleField, item),
                                this.renderField(item[leftField4], leftField4Type, leftField4Class, leftLabel4, leftLabel4Class, leftField4Icon, leftField4IconAccent, leftField4Inline, leftField4Style, leftLabel4Style, leftField4StyleField, item),
                                this.renderField(item[leftField5], leftField5Type, leftField5Class, leftLabel5, leftLabel5Class, leftField5Icon, leftField5IconAccent, leftField5Inline, leftField5Style, leftLabel5Style, leftField5StyleField, item))),
                        h("div", { class: "tag-list__right-container" },
                            this.multiCheck &&
                                multiCheckAlign.toLowerCase() === 'right' && (h("tag-checkbox", { rounded: this.multiCheckRounded, size: multiCheckSize, onValueChange: e => this.handleCheckboxChange(e, item), checked: this.isChecked(item) })),
                            this.renderIcon(rightIcon, rightIconField, rightIconAccent, rightIconAccentField, rightIconSize, defaultIconSize, item),
                            (button1 || button1Icon) && (h("tag-button", { text: button1, icon: button1Icon, accent: button1Accent, rounded: button1Rounded, squared: button1Squared, onButtonClick: e => this.handleButtonClick(item, 1, e), style: { marginRight: '15px' } })),
                            (button2 || button2Icon) && (h("tag-button", { text: button2, icon: button2Icon, accent: button2Accent, rounded: button2Rounded, squared: button2Squared, onButtonClick: e => this.handleButtonClick(item, 2, e), style: { marginRight: '15px' } })),
                            (button3 || button3Icon) && (h("tag-button", { text: button3, icon: button3Icon, accent: button3Accent, rounded: button3Rounded, squared: button3Squared, onButtonClick: e => this.handleButtonClick(item, 3, e), style: { marginRight: '15px' } })),
                            (button4 || button4Icon) && (h("tag-button", { text: button4, icon: button4Icon, accent: button4Accent, rounded: button4Rounded, squared: button4Squared, onButtonClick: e => this.handleButtonClick(item, 4, e), style: { marginRight: '15px' } })),
                            (button5 || button5Icon) && (h("tag-button", { text: button5, icon: button5Icon, accent: button5Accent, rounded: button5Rounded, squared: button5Squared, onButtonClick: e => this.handleButtonClick(item, 5, e), style: { marginRight: '15px' } })),
                            haveRightFields && (h("div", { class: "tag-list__text-container" },
                                this.renderField(item[rightField1], rightField1Type, rightField1Class, rightLabel1, rightLabel1Class, rightField1Icon, rightField1IconAccent, rightField1Inline, rightField1Style, rightLabel1Style, rightField1StyleField, item),
                                this.renderField(item[rightField2], rightField2Type, rightField2Class, rightLabel2, rightLabel2Class, rightField2Icon, rightField2IconAccent, rightField2Inline, rightField2Style, rightLabel2Style, rightField2StyleField, item),
                                this.renderField(item[rightField3], rightField3Type, rightField3Class, rightLabel3, rightLabel3Class, rightField3Icon, rightField3IconAccent, rightField3Inline, rightField3Style, rightLabel3Style, rightField3StyleField, item),
                                this.renderField(item[rightField4], rightField4Type, rightField4Class, rightLabel4, rightLabel4Class, rightField4Icon, rightField4IconAccent, rightField4Inline, rightField4Style, rightLabel4Style, rightField4StyleField, item),
                                this.renderField(item[rightField5], rightField5Type, rightField5Class, rightLabel5, rightLabel5Class, rightField5Icon, rightField5IconAccent, rightField5Inline, rightField5Style, rightLabel5Style, rightField5StyleField, item)))),
                    ])))),
            pagerVisible && (h("div", { class: "tag-list__pager__container" },
                h("tag-pager", { page: page, pageCount: pageCount }))),
            !this.multiCheckSuppressSelectAll &&
                this.multiCheck &&
                !pagerVisible && (h("tag-checkbox", { class: multiCheckAlign === 'left'
                    ? 'tag-list__selectAll tag-list__selectAll--left'
                    : 'tag-list__selectAll tag-list__selectAll--right', rounded: this.multiCheckRounded, "text-align": this.multiCheckAlign === 'left' ? 'left' : 'right', onValueChange: (e) => this.toggleCheckedItems(e.detail.value), label: "Select All", size: multiCheckSize === 'large' ? 'large' : 'normal', checked: this.selectAllChecked ? true : false }))));
    }
    /**
     * Renders the left and right icons
     * Note that the icon and accent coming from the data will override the static setting
     */
    renderIcon(icon, iconField, accent, accentField, size, defaultIconSize, dataItem) {
        let iconToUse = icon;
        if (dataItem && iconField && dataItem[iconField]) {
            iconToUse = dataItem[iconField];
        }
        let accentToUse = accent;
        if (dataItem && accentField && dataItem[accentField]) {
            accentToUse = dataItem[accentField];
        }
        if (iconToUse) {
            return (h("tag-icon", { icon: iconToUse, size: size ? size : defaultIconSize, accent: accentToUse }));
        }
        else {
            return null;
        }
    }
    renderField(fieldValue, type, cls, label, labelCls, icon, iconAccent, inline = false, valueStyle = '', labelStyle = '', valueFieldStyle = '', item = null) {
        if (fieldValue !== undefined && fieldValue !== null && fieldValue !== '') {
            const display = inline ? 'inline-block' : undefined;
            const marginRight = inline ? '10px' : undefined;
            let valueStyleObj = createStyleFromJson(valueStyle);
            if (valueFieldStyle &&
                item &&
                item[valueFieldStyle] !== undefined &&
                item[valueFieldStyle] !== '') {
                const valueFieldStyleObj = createStyleFromJson(item[valueFieldStyle]);
                valueStyleObj = Object.assign({}, valueStyleObj, valueFieldStyleObj);
            }
            if (icon && !valueStyleObj.display) {
                valueStyleObj.display = 'inline-block';
            }
            return (h("div", { style: { display, marginRight } },
                icon && (h("tag-icon", { icon: icon, size: 20, accent: iconAccent, style: { marginRight: '7px' } })),
                label && (h("label", { class: labelCls, style: createStyleFromJson(labelStyle) }, label)),
                h("span", { class: cls, style: valueStyleObj }, valueFormatter(fieldValue, type))));
        }
        else {
            return null;
        }
    }
    /** Gets the styles for the list container */
    getListContainerStyle() {
        const style = createStyleFromJson(this.listContainerStyle);
        if (this.height !== undefined) {
            style.height = this.height;
        }
        if (this.maxHeight !== undefined) {
            style.maxHeight = this.maxHeight;
        }
        if (this.minHeight !== undefined) {
            style.minHeight = this.minHeight;
        }
        return style;
    }
    /** Gets the styles for the list item container */
    getItemContainerStyle(item) {
        let style = createStyleFromJson(this.itemContainerStyle);
        if (this.itemContainerStyleField) {
            if (item &&
                item[this.itemContainerStyleField] !== undefined &&
                item[this.itemContainerStyleField] !== '') {
                const dataStyle = createStyleFromJson(item[this.itemContainerStyleField]);
                style = Object.assign({}, style, dataStyle);
            }
        }
        return style;
    }
    /** Gets the CSS class for list items */
    getListItemClassList(selected, itemContainerClassName) {
        const containerClass = itemContainerClassName ? itemContainerClassName : 'tag-list-compact';
        const classList = [containerClass];
        if (this.selectable) {
            classList.push('tag-list-selectable');
        }
        if (selected) {
            classList.push('selected');
        }
        return classList.join(' ');
    }
    processListTemplate() {
        const template = this.element.querySelector('template');
        if (template) {
            const clone = template.content.cloneNode(true);
            const cl = Array.from(clone.childNodes);
            this.templateBuilder = item => {
                const vdom = cl.reduce(convertNodeToVdom(item, this.stylingElements), []);
                return vdom;
            };
        }
    }
    /**
     * Set the data, page, pageSize and pageCount props from the IPagedData parameter
     * @param {IPagedData} pagedData  - The paged data
     */
    setPagedData(pagedData) {
        this.data = pagedData.data.slice(0);
        if (pagedData.page) {
            this.page = pagedData.page;
        }
        if (pagedData.pageSize) {
            this.pageSize = pagedData.pageSize;
        }
        if (pagedData.pageCount) {
            this.pageCount = pagedData.pageCount;
        }
        else {
            if (this.data &&
                this.data.length > 0 &&
                this.pageSize &&
                this.data.length < pagedData.pageSize) {
                this.pageCount = this.page;
            }
        }
    }
    /** Gets the index of the list item in the list */
    getListIndex(node) {
        const childs = node.parentNode.childNodes;
        let found = -1;
        for (let i = 0; i < childs.length; i++) {
            if (node === childs[i]) {
                found = i;
                break;
            }
        }
        return found;
    }
    resetSelectedIndex() {
        if (this.selectedIndex !== -1) {
            this.selectedIndex = -1;
        }
    }
    /**
     * Handles a list item click
     * @param {any} item - The data for the list item
     * @param {any} e - The arguments from the click event
     */
    handleClick(item, e) {
        this.selectItem(item, e.currentTarget, e.target);
    }
    /**
     * Handles a list item keydown
     * @param {any} item - The data for the list item
     * @param {any} e - The arguments from the keydown event
     */
    handleKeydown(item, e) {
        if (e.key === 'Enter' || e.key === ' ') {
            this.selectItem(item, e.currentTarget, e.target);
        }
    }
    /**
     * Selects a list item
     * @param {any} item - The data for the list item
     * @param {any} listItemElement - The LI item to select
     */
    selectItem(item, listItemElement, targetElement) {
        if (this.selectable) {
            const index = this.getListIndex(listItemElement);
            this.selectedIndex = index;
            const selectedArgs = {
                item,
                listItemElement,
                targetElement,
                itemIndex: index,
            };
            this.listItemSelected.emit(selectedArgs);
        }
    }
    /**
     * Creates a new data array with a property for whether
     * each item is selected or not
     */
    createDataWithSelected() {
        let i = 0;
        if (this.data && this.selectable) {
            const dataWithSelected = this.data.map(item => {
                const newItem = Object.assign({}, item, { selected: i === this.selectedIndex });
                i++;
                return newItem;
            });
            return dataWithSelected;
        }
        else {
            return this.data;
        }
    }
    /*
     * Handles the button click event
     * @param {any} item - The data for the list item
     * @param {number} buttonIndex - The button index
     * @param {any} e - The arguments from the click event
     **/
    handleButtonClick(item, buttonIndex, e) {
        e.stopPropagation();
        const index = this.getListIndex(e.currentTarget);
        this.selectedIndex = index;
        const args = {
            buttonIndex,
            item,
            itemIndex: index,
        };
        this.buttonClick.emit(args);
    }
    getItemIndex(array, item) {
        if (!array) {
            return -1;
        }
        // compare the items without the "selected" property
        const itemCopy = Object.assign({}, item);
        itemCopy.selected = undefined;
        const itemStr = JSON.stringify(itemCopy);
        let foundIndex = -1;
        let i = 0;
        array.forEach(dataItem => {
            const dataItemCopy = Object.assign({}, dataItem);
            dataItemCopy.selected = undefined;
            if (itemStr === JSON.stringify(dataItemCopy)) {
                foundIndex = i;
            }
            i++;
        });
        return foundIndex;
    }
    removeCheckedItem(item) {
        const index = this.getItemIndex(this.checkedItems, item);
        if (index > -1) {
            this.checkedItems.splice(index, 1);
        }
    }
    addCheckedItem(item) {
        const index = this.getItemIndex(this.checkedItems, item);
        if (index === -1) {
            this.checkedItems.push(item);
        }
    }
    isChecked(item) {
        return !(this.getItemIndex(this.checkedItems, item) === -1);
    }
    static get is() { return "tag-list"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "avatarPlaceholderField": {
            "type": String,
            "attr": "avatar-placeholder-field"
        },
        "avatarSize": {
            "type": String,
            "attr": "avatar-size"
        },
        "avatarSrcField": {
            "type": String,
            "attr": "avatar-src-field"
        },
        "button1": {
            "type": String,
            "attr": "button-1"
        },
        "button1Accent": {
            "type": String,
            "attr": "button-1-accent"
        },
        "button1Icon": {
            "type": String,
            "attr": "button-1-icon"
        },
        "button1Rounded": {
            "type": Boolean,
            "attr": "button-1-rounded"
        },
        "button1Squared": {
            "type": Boolean,
            "attr": "button-1-squared"
        },
        "button2": {
            "type": String,
            "attr": "button-2"
        },
        "button2Accent": {
            "type": String,
            "attr": "button-2-accent"
        },
        "button2Icon": {
            "type": String,
            "attr": "button-2-icon"
        },
        "button2Rounded": {
            "type": Boolean,
            "attr": "button-2-rounded"
        },
        "button2Squared": {
            "type": Boolean,
            "attr": "button-2-squared"
        },
        "button3": {
            "type": String,
            "attr": "button-3"
        },
        "button3Accent": {
            "type": String,
            "attr": "button-3-accent"
        },
        "button3Icon": {
            "type": String,
            "attr": "button-3-icon"
        },
        "button3Rounded": {
            "type": Boolean,
            "attr": "button-3-rounded"
        },
        "button3Squared": {
            "type": Boolean,
            "attr": "button-3-squared"
        },
        "button4": {
            "type": String,
            "attr": "button-4"
        },
        "button4Accent": {
            "type": String,
            "attr": "button-4-accent"
        },
        "button4Icon": {
            "type": String,
            "attr": "button-4-icon"
        },
        "button4Rounded": {
            "type": Boolean,
            "attr": "button-4-rounded"
        },
        "button4Squared": {
            "type": Boolean,
            "attr": "button-4-squared"
        },
        "button5": {
            "type": String,
            "attr": "button-5"
        },
        "button5Accent": {
            "type": String,
            "attr": "button-5-accent"
        },
        "button5Icon": {
            "type": String,
            "attr": "button-5-icon"
        },
        "button5Rounded": {
            "type": Boolean,
            "attr": "button-5-rounded"
        },
        "button5Squared": {
            "type": Boolean,
            "attr": "button-5-squared"
        },
        "checkedItems": {
            "state": true
        },
        "containerClassName": {
            "type": String,
            "attr": "container-class-name"
        },
        "containerStyle": {
            "type": String,
            "attr": "container-style"
        },
        "data": {
            "type": "Any",
            "attr": "data",
            "mutable": true,
            "watchCallbacks": ["dataChangeHandler"]
        },
        "element": {
            "elementRef": true
        },
        "getCheckedItems": {
            "method": true
        },
        "height": {
            "type": String,
            "attr": "height"
        },
        "imageBorderRadius": {
            "type": String,
            "attr": "image-border-radius"
        },
        "imageField": {
            "type": String,
            "attr": "image-field"
        },
        "imageHeight": {
            "type": String,
            "attr": "image-height"
        },
        "imageObjectFit": {
            "type": String,
            "attr": "image-object-fit"
        },
        "imageWidth": {
            "type": String,
            "attr": "image-width"
        },
        "itemContainerClassName": {
            "type": String,
            "attr": "item-container-class-name"
        },
        "itemContainerStyle": {
            "type": String,
            "attr": "item-container-style"
        },
        "itemContainerStyleField": {
            "type": String,
            "attr": "item-container-style-field"
        },
        "leftField1": {
            "type": String,
            "attr": "left-field-1"
        },
        "leftField1Icon": {
            "type": String,
            "attr": "left-field-1-icon"
        },
        "leftField1IconAccent": {
            "type": String,
            "attr": "left-field-1-icon-accent"
        },
        "leftField1Inline": {
            "type": Boolean,
            "attr": "left-field-1-inline"
        },
        "leftField1Style": {
            "type": String,
            "attr": "left-field-1-style"
        },
        "leftField1StyleField": {
            "type": String,
            "attr": "left-field-1-style-field"
        },
        "leftField1Type": {
            "type": String,
            "attr": "left-field-1-type"
        },
        "leftField2": {
            "type": String,
            "attr": "left-field-2"
        },
        "leftField2Icon": {
            "type": String,
            "attr": "left-field-2-icon"
        },
        "leftField2IconAccent": {
            "type": String,
            "attr": "left-field-2-icon-accent"
        },
        "leftField2Inline": {
            "type": Boolean,
            "attr": "left-field-2-inline"
        },
        "leftField2Style": {
            "type": String,
            "attr": "left-field-2-style"
        },
        "leftField2StyleField": {
            "type": String,
            "attr": "left-field-2-style-field"
        },
        "leftField2Type": {
            "type": String,
            "attr": "left-field-2-type"
        },
        "leftField3": {
            "type": String,
            "attr": "left-field-3"
        },
        "leftField3Icon": {
            "type": String,
            "attr": "left-field-3-icon"
        },
        "leftField3IconAccent": {
            "type": String,
            "attr": "left-field-3-icon-accent"
        },
        "leftField3Inline": {
            "type": Boolean,
            "attr": "left-field-3-inline"
        },
        "leftField3Style": {
            "type": String,
            "attr": "left-field-3-style"
        },
        "leftField3StyleField": {
            "type": String,
            "attr": "left-field-3-style-field"
        },
        "leftField3Type": {
            "type": String,
            "attr": "left-field-3-type"
        },
        "leftField4": {
            "type": String,
            "attr": "left-field-4"
        },
        "leftField4Icon": {
            "type": String,
            "attr": "left-field-4-icon"
        },
        "leftField4IconAccent": {
            "type": String,
            "attr": "left-field-4-icon-accent"
        },
        "leftField4Inline": {
            "type": Boolean,
            "attr": "left-field-4-inline"
        },
        "leftField4Style": {
            "type": String,
            "attr": "left-field-4-style"
        },
        "leftField4StyleField": {
            "type": String,
            "attr": "left-field-4-style-field"
        },
        "leftField4Type": {
            "type": String,
            "attr": "left-field-4-type"
        },
        "leftField5": {
            "type": String,
            "attr": "left-field-5"
        },
        "leftField5Icon": {
            "type": String,
            "attr": "left-field-5-icon"
        },
        "leftField5IconAccent": {
            "type": String,
            "attr": "left-field-5-icon-accent"
        },
        "leftField5Inline": {
            "type": Boolean,
            "attr": "left-field-5-inline"
        },
        "leftField5Style": {
            "type": String,
            "attr": "left-field-5-style"
        },
        "leftField5StyleField": {
            "type": String,
            "attr": "left-field-5-style-field"
        },
        "leftField5Type": {
            "type": String,
            "attr": "left-field-5-type"
        },
        "leftIcon": {
            "type": String,
            "attr": "left-icon"
        },
        "leftIconAccent": {
            "type": String,
            "attr": "left-icon-accent"
        },
        "leftIconAccentField": {
            "type": String,
            "attr": "left-icon-accent-field"
        },
        "leftIconField": {
            "type": String,
            "attr": "left-icon-field"
        },
        "leftIconSize": {
            "type": Number,
            "attr": "left-icon-size"
        },
        "leftLabel1": {
            "type": String,
            "attr": "left-label-1"
        },
        "leftLabel1Style": {
            "type": String,
            "attr": "left-label-1-style"
        },
        "leftLabel2": {
            "type": String,
            "attr": "left-label-2"
        },
        "leftLabel2Style": {
            "type": String,
            "attr": "left-label-2-style"
        },
        "leftLabel3": {
            "type": String,
            "attr": "left-label-3"
        },
        "leftLabel3Style": {
            "type": String,
            "attr": "left-label-3-style"
        },
        "leftLabel4": {
            "type": String,
            "attr": "left-label-4"
        },
        "leftLabel4Style": {
            "type": String,
            "attr": "left-label-4-style"
        },
        "leftLabel5": {
            "type": String,
            "attr": "left-label-5"
        },
        "leftLabel5Style": {
            "type": String,
            "attr": "left-label-5-style"
        },
        "listContainerStyle": {
            "type": String,
            "attr": "list-container-style"
        },
        "maxHeight": {
            "type": String,
            "attr": "max-height"
        },
        "minHeight": {
            "type": String,
            "attr": "min-height"
        },
        "multiCheck": {
            "type": Boolean,
            "attr": "multi-check"
        },
        "multiCheckAlign": {
            "type": String,
            "attr": "multi-check-align"
        },
        "multiCheckRounded": {
            "type": Boolean,
            "attr": "multi-check-rounded"
        },
        "multiCheckSize": {
            "type": String,
            "attr": "multi-check-size"
        },
        "multiCheckSuppressSelectAll": {
            "type": Boolean,
            "attr": "multi-check-suppress-select-all"
        },
        "page": {
            "type": Number,
            "attr": "page",
            "mutable": true
        },
        "pageCount": {
            "type": Number,
            "attr": "page-count",
            "mutable": true
        },
        "pageSize": {
            "type": Number,
            "attr": "page-size",
            "mutable": true
        },
        "primaryField": {
            "type": String,
            "attr": "primary-field"
        },
        "primaryFieldInline": {
            "type": Boolean,
            "attr": "primary-field-inline"
        },
        "primaryFieldStyle": {
            "type": String,
            "attr": "primary-field-style"
        },
        "primaryFieldStyleField": {
            "type": String,
            "attr": "primary-field-style-field"
        },
        "primaryFieldType": {
            "type": String,
            "attr": "primary-field-type"
        },
        "recordCount": {
            "type": Number,
            "attr": "record-count",
            "mutable": true
        },
        "rightField1": {
            "type": String,
            "attr": "right-field-1"
        },
        "rightField1Icon": {
            "type": String,
            "attr": "right-field-1-icon"
        },
        "rightField1IconAccent": {
            "type": String,
            "attr": "right-field-1-icon-accent"
        },
        "rightField1Inline": {
            "type": Boolean,
            "attr": "right-field-1-inline"
        },
        "rightField1Style": {
            "type": String,
            "attr": "right-field-1-style"
        },
        "rightField1StyleField": {
            "type": String,
            "attr": "right-field-1-style-field"
        },
        "rightField1Type": {
            "type": String,
            "attr": "right-field-1-type"
        },
        "rightField2": {
            "type": String,
            "attr": "right-field-2"
        },
        "rightField2Icon": {
            "type": String,
            "attr": "right-field-2-icon"
        },
        "rightField2IconAccent": {
            "type": String,
            "attr": "right-field-2-icon-accent"
        },
        "rightField2Inline": {
            "type": Boolean,
            "attr": "right-field-2-inline"
        },
        "rightField2Style": {
            "type": String,
            "attr": "right-field-2-style"
        },
        "rightField2StyleField": {
            "type": String,
            "attr": "right-field-2-style-field"
        },
        "rightField2Type": {
            "type": String,
            "attr": "right-field-2-type"
        },
        "rightField3": {
            "type": String,
            "attr": "right-field-3"
        },
        "rightField3Icon": {
            "type": String,
            "attr": "right-field-3-icon"
        },
        "rightField3IconAccent": {
            "type": String,
            "attr": "right-field-3-icon-accent"
        },
        "rightField3Inline": {
            "type": Boolean,
            "attr": "right-field-3-inline"
        },
        "rightField3Style": {
            "type": String,
            "attr": "right-field-3-style"
        },
        "rightField3StyleField": {
            "type": String,
            "attr": "right-field-3-style-field"
        },
        "rightField3Type": {
            "type": String,
            "attr": "right-field-3-type"
        },
        "rightField4": {
            "type": String,
            "attr": "right-field-4"
        },
        "rightField4Icon": {
            "type": String,
            "attr": "right-field-4-icon"
        },
        "rightField4IconAccent": {
            "type": String,
            "attr": "right-field-4-icon-accent"
        },
        "rightField4Inline": {
            "type": Boolean,
            "attr": "right-field-4-inline"
        },
        "rightField4Style": {
            "type": String,
            "attr": "right-field-4-style"
        },
        "rightField4StyleField": {
            "type": String,
            "attr": "right-field-4-style-field"
        },
        "rightField4Type": {
            "type": String,
            "attr": "right-field-4-type"
        },
        "rightField5": {
            "type": String,
            "attr": "right-field-5"
        },
        "rightField5Icon": {
            "type": String,
            "attr": "right-field-5-icon"
        },
        "rightField5IconAccent": {
            "type": String,
            "attr": "right-field-5-icon-accent"
        },
        "rightField5Inline": {
            "type": Boolean,
            "attr": "right-field-5-inline"
        },
        "rightField5Style": {
            "type": String,
            "attr": "right-field-5-style"
        },
        "rightField5StyleField": {
            "type": String,
            "attr": "right-field-5-style-field"
        },
        "rightField5Type": {
            "type": String,
            "attr": "right-field-5-type"
        },
        "rightIcon": {
            "type": String,
            "attr": "right-icon"
        },
        "rightIconAccent": {
            "type": String,
            "attr": "right-icon-accent"
        },
        "rightIconAccentField": {
            "type": String,
            "attr": "right-icon-accent-field"
        },
        "rightIconField": {
            "type": String,
            "attr": "right-icon-field"
        },
        "rightIconSize": {
            "type": Number,
            "attr": "right-icon-size"
        },
        "rightLabel1": {
            "type": String,
            "attr": "right-label-1"
        },
        "rightLabel1Style": {
            "type": String,
            "attr": "right-label-1-style"
        },
        "rightLabel2": {
            "type": String,
            "attr": "right-label-2"
        },
        "rightLabel2Style": {
            "type": String,
            "attr": "right-label-2-style"
        },
        "rightLabel3": {
            "type": String,
            "attr": "right-label-3"
        },
        "rightLabel3Style": {
            "type": String,
            "attr": "right-label-3-style"
        },
        "rightLabel4": {
            "type": String,
            "attr": "right-label-4"
        },
        "rightLabel4Style": {
            "type": String,
            "attr": "right-label-4-style"
        },
        "rightLabel5": {
            "type": String,
            "attr": "right-label-5"
        },
        "rightLabel5Style": {
            "type": String,
            "attr": "right-label-5-style"
        },
        "secondaryField": {
            "type": String,
            "attr": "secondary-field"
        },
        "secondaryFieldIcon": {
            "type": String,
            "attr": "secondary-field-icon"
        },
        "secondaryFieldIconAccent": {
            "type": String,
            "attr": "secondary-field-icon-accent"
        },
        "secondaryFieldInline": {
            "type": Boolean,
            "attr": "secondary-field-inline"
        },
        "secondaryFieldStyle": {
            "type": String,
            "attr": "secondary-field-style"
        },
        "secondaryFieldStyleField": {
            "type": String,
            "attr": "secondary-field-style-field"
        },
        "secondaryFieldType": {
            "type": String,
            "attr": "secondary-field-type"
        },
        "select": {
            "method": true
        },
        "selectable": {
            "type": Boolean,
            "attr": "selectable"
        },
        "selectAllChecked": {
            "state": true
        },
        "selectedIndex": {
            "state": true
        },
        "setCheckedItems": {
            "method": true
        },
        "setData": {
            "method": true
        },
        "templateBuilder": {
            "state": true
        },
        "toggleCheckedItems": {
            "method": true
        }
    }; }
    static get events() { return [{
            "name": "listItemSelected",
            "method": "listItemSelected",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "listItemsChecked",
            "method": "listItemsChecked",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "buttonClick",
            "method": "buttonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-list:**/"; }
}
