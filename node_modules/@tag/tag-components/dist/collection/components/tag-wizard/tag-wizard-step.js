var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TagWizardStep {
    constructor() {
        /** The step name */
        this.name = '';
        /** handler for when the previous button is pressed */
        this.handlePreviousClick = () => {
            this.previousClick.emit();
        };
        /** Validates all the fields in the step */
        this.validate = () => __awaiter(this, void 0, void 0, function* () {
            const fields = this.getFields();
            let haveError = false;
            yield Promise.all(fields.map((field) => __awaiter(this, void 0, void 0, function* () {
                const fieldErrors = yield field.validate();
                if (fieldErrors.length > 0) {
                    haveError = true;
                }
            })));
            return !haveError;
        });
        /** handler for when the next button is pressed */
        this.handleNextClick = () => __awaiter(this, void 0, void 0, function* () {
            const ok = yield this.validate();
            if (ok) {
                this.nextClick.emit();
            }
        });
        /** handler for when the finish button is pressed */
        this.handleFinishClick = () => __awaiter(this, void 0, void 0, function* () {
            console.log('handleFinishClick');
            const ok = yield this.validate();
            if (ok) {
                this.finishClick.emit();
            }
        });
    }
    render() {
        const previousDisabled = !this.previousEnabled;
        const nextDisabled = !this.nextEnabled;
        const previousDisplay = this.previousVisible ? 'inline-block' : 'none';
        const nextDisplay = this.nextVisible ? 'inline-block' : 'none';
        const finishDisplay = this.finishVisible ? 'inline-block' : 'none';
        return (h("div", { class: "tag-wizard-step" },
            h("div", { class: "tag-wizard-step__content-container" },
                h("slot", null)),
            h("div", { class: "tag-wizard-step__button-container" },
                h("tag-button", { class: "previous", onClick: !previousDisabled && this.handlePreviousClick, disabled: previousDisabled, style: { display: previousDisplay } }, "Previous"),
                h("tag-button", { class: "next", accent: "primary", onClick: !nextDisabled && this.handleNextClick, disabled: nextDisabled, style: { display: nextDisplay } }, "Next"),
                h("tag-button", { class: "finish", accent: "primary", onClick: this.handleFinishClick, style: { display: finishDisplay } }, "Finish"))));
    }
    /** Gets references to field DOM elements */
    getFields() {
        const fields = [].slice.call(this.element.querySelectorAll('tag-edit-field'));
        const editableLists = [].slice.call(this.element.querySelectorAll('tag-edit-list'));
        // get any fields in editable lists
        editableLists.forEach(list => {
            const listFields = [].slice.call(list.shadowRoot.querySelectorAll('tag-edit-field'));
            fields.push.apply(fields, listFields);
        });
        return fields;
    }
    static get is() { return "tag-wizard-step"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "element": {
            "elementRef": true
        },
        "finishVisible": {
            "type": Boolean,
            "attr": "finish-visible"
        },
        "name": {
            "type": String,
            "attr": "name"
        },
        "nextEnabled": {
            "type": Boolean,
            "attr": "next-enabled"
        },
        "nextStep": {
            "type": String,
            "attr": "next-step"
        },
        "nextVisible": {
            "type": Boolean,
            "attr": "next-visible"
        },
        "previousEnabled": {
            "type": Boolean,
            "attr": "previous-enabled"
        },
        "previousStep": {
            "type": String,
            "attr": "previous-step"
        },
        "previousVisible": {
            "type": Boolean,
            "attr": "previous-visible"
        }
    }; }
    static get events() { return [{
            "name": "previousClick",
            "method": "previousClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "nextClick",
            "method": "nextClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "finishClick",
            "method": "finishClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-wizard-step:**/"; }
}
