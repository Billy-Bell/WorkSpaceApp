import { valueFormatter } from '../../shared/dataConversion';
export class TagSlider {
    constructor() {
        /** The minimum value */
        this.min = 0;
        /** The maximum value */
        this.max = 100;
        /** The increment value when using the keyboard arrow buttons */
        this.step = 1;
        /** The value */
        this.value = 0;
        /** The increment value */
        this.accent = 'dolphinblue';
        /** The type of the field that is used for value formatting */
        this.dataType = 'integer';
        /**
         * Handles when the user moves the slider
         * We need to update the CSS --val variable (Chrome hack for styling progress track)
         * Note that this is raised more frequently than the "change" event - hence we do not set the actual component value here
         */
        this.handleInput = () => {
            const rangeInput = this.getRangeInput();
            rangeInput.style.setProperty('--val', rangeInput.value);
        };
        /**
         * Handles when the range input changes value
         * We need to set the value prop and emit the valueChange event
         */
        this.handleChange = () => {
            const rangeInput = this.getRangeInput();
            const value = parseFloat(rangeInput.value);
            this.setValue(value);
        };
    }
    /**
     * Sets the focus to the slider
     */
    focusSlider() {
        const shadowRoot = this.element.shadowRoot ? this.element.shadowRoot : this.element;
        const input = shadowRoot.querySelector('input');
        if (input) {
            input.focus();
        }
    }
    /** Make sure the CSS variables are set (Chrome hack for styling progress track) when the component is first loaded  */
    componentDidLoad() {
        this.setCSSVariables();
    }
    /** Make sure the CSS variables are set (Chrome hack for styling progress track) when the props are updated */
    componentDidUpdate() {
        this.setCSSVariables();
    }
    render() {
        const { id, name, min, max, value, step, dataType, disabled } = this;
        const formattingOptionsObj = this.formattingOptions
            ? JSON.parse(this.formattingOptions)
            : undefined;
        return (h("div", { class: "tag-slider" },
            h("input", { id: id, name: name, type: "range", step: step, min: min, max: max, value: value, class: `tag-slider__range-input tag-slider__range-input__${this.accent} tag-slider__accent__background__${this.accent}`, onInput: this.handleInput, onChange: this.handleChange, disabled: disabled }),
            h("div", { class: `tag-slider__value` }, valueFormatter(value, dataType, formattingOptionsObj))));
    }
    /** Returns a reference to the range input */
    getRangeInput() {
        const rangeInput = this.element.shadowRoot
            ? this.element.shadowRoot.querySelector('.tag-slider__range-input')
            : this.element.querySelector('.tag-slider__range-input');
        return rangeInput;
    }
    /**
     * In order to colour the progress track in chrome we set the following CSS variables that are referenced in the css
     * --min - minimum value of the slider
     * --max - minimum value of the slider
     * --val - current value of the slider
     */
    setCSSVariables() {
        const rangeInput = this.getRangeInput();
        const { min, max, value } = this;
        rangeInput.style.setProperty('--min', min.toString());
        rangeInput.style.setProperty('--max', max.toString());
        rangeInput.style.setProperty('--val', value.toString());
    }
    /** Sets the value and raises valueChange */
    setValue(value) {
        this.value = value;
        this.valueChange.emit({ value });
    }
    static get is() { return "tag-slider"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "dataType": {
            "type": String,
            "attr": "data-type"
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled"
        },
        "element": {
            "elementRef": true
        },
        "focusSlider": {
            "method": true
        },
        "formattingOptions": {
            "type": String,
            "attr": "formatting-options"
        },
        "id": {
            "type": String,
            "attr": "id"
        },
        "max": {
            "type": Number,
            "attr": "max"
        },
        "min": {
            "type": Number,
            "attr": "min"
        },
        "name": {
            "type": String,
            "attr": "name"
        },
        "step": {
            "type": Number,
            "attr": "step"
        },
        "value": {
            "type": Number,
            "attr": "value",
            "mutable": true
        }
    }; }
    static get events() { return [{
            "name": "valueChange",
            "method": "valueChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-slider:**/"; }
}
