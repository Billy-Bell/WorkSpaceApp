var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TagCard {
    constructor() {
        /** The version of the card */
        this.version = '1';
        /* Whether the menu items are visible or not **/
        this.itemsVisible = false;
        /* Hides the menu item container **/
        this.hide = (e) => {
            if (!this.element.contains(e.target)) {
                this.itemsVisible = false;
            }
        };
        /*
         * Handles when the menu header is clicked.
         * This shows / hides the menu item container.
         **/
        this.handleMenuClick = () => {
            this.itemsVisible = !this.itemsVisible;
        };
    }
    /* Adds a click handler for the document that hides the the menu item container **/
    componentDidLoad() {
        document.addEventListener('click', this.hide);
    }
    /* Removes the document click handler **/
    componentDidUnload() {
        document.removeEventListener('click', this.hide);
    }
    /**
     * Subscribe to the menuItemClicked event from the menu items.
     * When menu items are clicked we should hide the menu
     */
    menuItemClickHandler() {
        return __awaiter(this, void 0, void 0, function* () {
            this.itemsVisible = false;
        });
    }
    handleKeyDown(e) {
        if (e.key === 'Enter') {
            this.itemsVisible = !this.itemsVisible;
        }
        else if (e.key === 'Escape' || e.key === 'Esc') {
            this.itemsVisible = false;
        }
    }
    render() {
        if (this.version === '1') {
            return this.renderV1();
        }
        return (h("div", { class: this.getClasses() },
            h("slot", null),
            h("div", { class: "tag-card__v2__image" })));
    }
    renderV1() {
        const haveMenu = this.element.querySelectorAll('tag-menu-item').length > 0;
        const haveButtons = this.button || this.element.querySelector('[slot="buttons"]');
        const ariaHasPopup = haveMenu ? 'true' : 'false';
        const ariaExpanded = this.itemsVisible ? 'true' : 'false';
        return (h("div", { class: this.getv1Classes() },
            h("div", { class: "tag-card__header" },
                this.heading && (h("tag-text", { type: this.headingType ? this.headingType : 'h3', class: "mt-0" }, this.heading)),
                haveMenu && (h("div", { role: "menu", class: "tag-card__header__menu-header", onClick: this.handleMenuClick, tabIndex: 0, "aria-haspopup": ariaHasPopup, "aria-expanded": ariaExpanded },
                    h("tag-icon", { icon: "ArrowDown", size: 14, accent: "title" }))),
                h("div", { class: "tag-card__header__menu-items", style: { display: this.itemsVisible === true ? 'flex' : 'none' } },
                    h("slot", { name: "menu" })),
                h("slot", { name: "header" })),
            h("div", { class: "tag-card__content" },
                this.avatar && (h("tag-avatar", { src: this.avatar, style: { marginTop: '5px', marginRight: '5px' } })),
                this.icon && (h("tag-icon", { icon: this.icon, size: this.iconSize ? this.iconSize : 30, accent: this.iconAccent ? this.iconAccent : undefined, style: { marginTop: '5px', marginRight: '5px' } })),
                this.text && (h("tag-text", { type: this.textType ? this.textType : 'span' }, this.text)),
                h("slot", { name: "content" })),
            h("div", { class: "tag-card__button", style: { display: haveButtons ? 'block' : 'none' } },
                this.button && (h("tag-button", { accent: this.buttonAccent ? this.buttonAccent : undefined, size: this.buttonSize ? this.buttonSize : undefined, icon: this.buttonIcon ? this.buttonIcon : undefined, disabled: this.buttonDisabled ? this.buttonDisabled : undefined }, this.button)),
                h("slot", { name: "buttons" })),
            h("slot", null)));
    }
    getClasses() {
        let cssClass = 'tag-card__v2';
        if (this.accent) {
            cssClass = cssClass + ` v2 tag-card__v2-accent-${this.accent}`;
        }
        if (this.backgroundImage) {
            cssClass = cssClass + ` v2 tag-card__v2-background-image-${this.backgroundImage}`;
        }
        return cssClass;
    }
    getv1Classes() {
        let cls = 'tag-card';
        if (this.accent) {
            cls = cls + ` tag-card__accent--${this.accent.toLowerCase()}`;
        }
        if (this.backgroundAccent) {
            cls = cls + ` tag-card__background--accent--${this.backgroundAccent.toLowerCase()}`;
        }
        return cls;
    }
    static get is() { return "tag-card"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "avatar": {
            "type": String,
            "attr": "avatar"
        },
        "backgroundAccent": {
            "type": String,
            "attr": "background-accent"
        },
        "backgroundImage": {
            "type": String,
            "attr": "background-image"
        },
        "button": {
            "type": String,
            "attr": "button"
        },
        "buttonAccent": {
            "type": String,
            "attr": "button-accent"
        },
        "buttonDisabled": {
            "type": Boolean,
            "attr": "button-disabled"
        },
        "buttonIcon": {
            "type": String,
            "attr": "button-icon"
        },
        "buttonSize": {
            "type": String,
            "attr": "button-size"
        },
        "element": {
            "elementRef": true
        },
        "heading": {
            "type": String,
            "attr": "heading"
        },
        "headingType": {
            "type": String,
            "attr": "heading-type"
        },
        "icon": {
            "type": String,
            "attr": "icon"
        },
        "iconAccent": {
            "type": String,
            "attr": "icon-accent"
        },
        "iconSize": {
            "type": Number,
            "attr": "icon-size"
        },
        "itemsVisible": {
            "state": true
        },
        "text": {
            "type": String,
            "attr": "text"
        },
        "textType": {
            "type": String,
            "attr": "text-type"
        },
        "version": {
            "type": String,
            "attr": "version"
        }
    }; }
    static get listeners() { return [{
            "name": "menuItemClick",
            "method": "menuItemClickHandler"
        }, {
            "name": "keydown",
            "method": "handleKeyDown"
        }]; }
    static get style() { return "/**style-placeholder:tag-card:**/"; }
}
