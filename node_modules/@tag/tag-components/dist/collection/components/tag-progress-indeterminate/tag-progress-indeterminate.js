export class TagProgressIndeterminate {
    constructor() {
        /** Whether the progress indicator overlays the whole screen */
        this.full = false;
        /** The colour of the progress indicator */
        this.accent = 'primary';
    }
    render() {
        const { full, text, accent } = this;
        return (h("div", { class: full
                ? 'tag-progress-indeterminate__progress-container-full'
                : 'tag-progress-indeterminate__progress-container' },
            h("div", { class: full
                    ? 'tag-progress-indeterminate__progress-circle-container-full'
                    : 'tag-progress-indeterminate__progress-circle-container' },
                h("div", { class: `tag-progress-indeterminate__progress-circle accent--${accent}` }),
                h("div", { class: "loading-phrases-container" },
                    h("div", { class: "loading-phrases" },
                        h("div", { class: "loading-phrase" }, text && h("tag-text", { type: "span" }, text)))),
                h("slot", null))));
    }
    static get is() { return "tag-progress-indeterminate"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "full": {
            "type": Boolean,
            "attr": "full"
        },
        "text": {
            "type": String,
            "attr": "text"
        }
    }; }
    static get style() { return "/**style-placeholder:tag-progress-indeterminate:**/"; }
}
