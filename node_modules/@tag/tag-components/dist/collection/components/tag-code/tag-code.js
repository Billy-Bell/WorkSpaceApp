var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Prism from 'prismjs';
import { nativeShadowDom } from '../../shared/utils';
// tslint:disable-next-line:no-submodule-imports
export class TagCode {
    constructor() {
        this.highlightedCode = '';
        this.showAlert = false;
        this.loading = false;
        /** Property description */
        this.code = `<div>Hello World!</div>`;
        this.language = 'markup';
        this.handleCopyToClipboardClick = () => {
            const doc = document;
            const elem = this.element.shadowRoot.querySelector('#tag-code__inner-code');
            this.selectText(elem);
            doc.execCommand('copy');
            this.showAlert = true;
            setTimeout(() => {
                this.showAlert = false;
            }, 2000);
            this.clearSelection();
        };
    }
    render() {
        if (this.loading) {
            return (h("div", { class: "tag-code__wrapped-markup" },
                h("div", { id: "tag-code__inner-code", innerHTML: "<div class='tag-code__loading-label'>Loading...</div" })));
        }
        const language = `language-${this.language}`;
        let alert = null;
        if (this.showAlert) {
            alert = (h("tag-alert", { class: "tag-code__clip-btn", inline: true }, "Copied to clipboard"));
        }
        else {
            alert = (h("div", { class: "tag-code__clip-btn" },
                h("div", { class: "tag-code__copy-to-clipboard" }),
                h("tag-icon", { icon: "Clipboard", accent: "light", size: 20, style: { padding: '0px', cursor: 'pointer' }, onClick: this.handleCopyToClipboardClick })));
        }
        const loadedHtml = (h("div", { class: "tag-code__wrapped-markup" },
            alert,
            h("pre", { class: "tag-code__pre" },
                h("code", { class: language, id: "tag-code__inner-code", innerHTML: this.highlightedCode }))));
        return loadedHtml;
    }
    componentWillLoad() {
        this.loading = true;
        this.addShadyDomStyles();
    }
    componentDidLoad() {
        this.loading = false;
    }
    componentWillUpdate() {
        return __awaiter(this, void 0, void 0, function* () {
            this.highlightedCode = yield this.highlightCode();
        });
    }
    addShadyDomStyles() {
        // if not native shadow dom we need to insert the stylesheet for the flatpickr
        // due to the flatpickr not supporting the shadow dom as standard
        if (!nativeShadowDom(document)) {
            this.addCss('prism_theme', 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism-okaidia.min.css');
        }
    }
    addCss(id, fileName) {
        if (document.getElementById(id) === null) {
            const head = document.head;
            const link = document.createElement('link');
            link.id = id;
            link.type = 'text/css';
            link.rel = 'stylesheet';
            link.href = fileName;
            head.appendChild(link);
        }
    }
    clearSelection() {
        const doc = document;
        if (window.getSelection) {
            if (window.getSelection().empty) {
                // chrome
                window.getSelection().empty();
            }
            else if (window.getSelection().removeAllRanges) {
                // firefox
                window.getSelection().removeAllRanges();
            }
        }
        else if (doc.selection) {
            // ie?
            doc.selection.empty();
        }
    }
    selectText(element) {
        const doc = document;
        const text = element;
        let range;
        let selection;
        if (doc.body.createTextRange) {
            // ms
            range = doc.body.createTextRange();
            range.moveToElementText(text);
            range.select();
        }
        else if (window.getSelection) {
            // all others
            selection = window.getSelection();
            range = doc.createRange();
            range.selectNodeContents(text);
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }
    highlightCode() {
        return __awaiter(this, void 0, void 0, function* () {
            const promise = new Promise((resolve, reject) => {
                switch (this.language) {
                    case 'markup': {
                        const hl = Prism.highlight(this.code, Prism.languages.markup);
                        resolve(hl);
                        break;
                    }
                    default: {
                        reject('The markup is not supported');
                    }
                }
            });
            return promise;
        });
    }
    static get is() { return "tag-code"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "code": {
            "type": String,
            "attr": "code"
        },
        "element": {
            "elementRef": true
        },
        "highlightedCode": {
            "state": true
        },
        "language": {
            "type": String,
            "attr": "language"
        },
        "loading": {
            "state": true
        },
        "showAlert": {
            "state": true
        }
    }; }
    static get style() { return "/**style-placeholder:tag-code:**/"; }
}
