import { guid } from '../../shared/utils';
export class TagCheckbox {
    constructor() {
        this.textAlign = 'left';
        /** The size  */
        this.size = 'normal';
        /** Handles a click to a checkbox */
        this.handleClick = () => {
            this.handleCheckboxChange();
        };
        /** Handles key press on the checkbox */
        this.handleKeydown = (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                this.handleCheckboxChange();
            }
        };
        /** Handles a change to a checkbox */
        this.handleCheckboxChange = () => {
            if (!this.disabled) {
                this.checked = !this.checked;
                const box = this.element.shadowRoot
                    ? this.element.shadowRoot.querySelector('.tag-checkbox')
                    : this.element.querySelector('.tag-checkbox');
                box.setAttribute('aria-checked', this.checked ? 'true' : 'false');
                this.valueChange.emit({ value: this.checked });
            }
        };
    }
    /**
     * Sets the focus to the checkbox
     */
    focusCheckbox() {
        const shadowRoot = this.element.shadowRoot ? this.element.shadowRoot : this.element;
        const span = shadowRoot.querySelector('span');
        if (span) {
            span.focus();
        }
    }
    render() {
        const { label, size, textAlign } = this;
        const id = this.id ? this.id : guid();
        const labelHeight = (size || 'normal') === 'normal' ? '20px' : '30px';
        const leftCheck = (h("label", { id: id, onClick: this.handleClick, class: "tag-checkbox--align--left", style: { height: labelHeight, lineHeight: labelHeight } },
            this.createCheckbox(id),
            label));
        const rightCheck = (h("label", { id: id, onClick: this.handleClick, class: "tag-checkbox--align--right", style: { height: labelHeight, lineHeight: labelHeight } },
            label,
            this.createCheckbox(id)));
        return [textAlign === 'left' ? leftCheck : rightCheck];
    }
    createCheckbox(id) {
        const { checked, disabled, accent, rounded, size } = this;
        const iconSize = (size || 'normal') === 'normal' ? 15 : 20;
        const spanClass = () => {
            const accentClass = accent
                ? `tag-checkbox--${accent.toLowerCase()}`
                : `tag-checkbox--default`;
            const roundedClass = rounded ? 'tag-checkbox--rounded' : '';
            const sizeClass = size || 'normal'
                ? `tag-checkbox--size--${size.toLowerCase()}`
                : 'tag-checkbox--size--normal';
            if (checked) {
                return disabled
                    ? `tag-checkbox ${roundedClass} ${sizeClass} checked disabled`
                    : `tag-checkbox ${roundedClass} ${sizeClass} checked ${accentClass}`;
            }
            else {
                return disabled
                    ? `tag-checkbox ${roundedClass} ${sizeClass} disabled`
                    : `tag-checkbox ${roundedClass} ${sizeClass}`;
            }
        };
        return (h("span", { class: spanClass(), tabIndex: 0, onKeyDown: this.handleKeydown, role: "checkbox", "aria-checked": checked, "aria-labelledby": id }, checked ? (disabled ? (h("tag-icon", { icon: "Tick", accent: "grey-4", size: iconSize })) : (h("tag-icon", { icon: "Tick", accent: "white", size: iconSize }))) : disabled ? null : (h("tag-icon", { icon: "Tick", accent: "grey-5", size: iconSize }))));
    }
    static get is() { return "tag-checkbox"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "checked": {
            "type": Boolean,
            "attr": "checked",
            "reflectToAttr": true,
            "mutable": true
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled",
            "reflectToAttr": true,
            "mutable": true
        },
        "element": {
            "elementRef": true
        },
        "focusCheckbox": {
            "method": true
        },
        "id": {
            "type": String,
            "attr": "id"
        },
        "label": {
            "type": String,
            "attr": "label"
        },
        "name": {
            "type": String,
            "attr": "name"
        },
        "rounded": {
            "type": Boolean,
            "attr": "rounded"
        },
        "size": {
            "type": String,
            "attr": "size"
        },
        "textAlign": {
            "type": String,
            "attr": "text-align"
        }
    }; }
    static get events() { return [{
            "name": "valueChange",
            "method": "valueChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-checkbox:**/"; }
}
