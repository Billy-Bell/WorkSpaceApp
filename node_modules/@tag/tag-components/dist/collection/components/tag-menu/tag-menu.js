var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TagMenu {
    constructor() {
        /* Whether the menu items are visible or not **/
        this.itemsVisible = false;
        /* Hides the menu item container **/
        this.hide = (e) => {
            if (!this.element.contains(e.target)) {
                this.itemsVisible = false;
            }
        };
        /*
         * Handles when the menu header is clicked.
         * This shows / hides the menu item container.
         **/
        this.handleClick = () => {
            this.itemsVisible = !this.itemsVisible;
        };
    }
    /* Adds a click handler for the document that hides the the menu item container **/
    componentDidLoad() {
        document.addEventListener('click', this.hide);
    }
    /* Removes the document click handler **/
    componentDidUnload() {
        document.removeEventListener('click', this.hide);
    }
    handleKeyDown(e) {
        if (e.key === 'Enter') {
            this.itemsVisible = !this.itemsVisible;
        }
        else if (e.key === 'Escape' || e.key === 'Esc') {
            this.itemsVisible = false;
        }
    }
    /**
     * Subscribe to the menuItemClicked event from the menu items.
     * When menu items are clicked we should hide the menu
     */
    menuItemClickHandler() {
        return __awaiter(this, void 0, void 0, function* () {
            this.itemsVisible = false;
        });
    }
    render() {
        const { icon, text, itemsVisible } = this;
        const expanded = itemsVisible ? 'true' : 'false';
        return (h("div", { class: "tag-menu" },
            h("div", { role: "menu", class: "tag-menu__header-container", onClick: this.handleClick, tabIndex: 0, "aria-haspopup": "true", "aria-expanded": expanded },
                icon && h("tag-icon", { icon: icon }),
                text && h("span", null, text),
                h("tag-icon", { icon: "ArrowDown", size: 14, accent: "title" })),
            h("div", { class: "tag-menu__items-container-outer", style: { display: itemsVisible ? 'block' : 'none' } },
                h("div", { class: "tag-menu__items-container" },
                    h("slot", null)))));
    }
    static get is() { return "tag-menu"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "element": {
            "elementRef": true
        },
        "icon": {
            "type": String,
            "attr": "icon"
        },
        "itemsVisible": {
            "state": true
        },
        "text": {
            "type": String,
            "attr": "text"
        }
    }; }
    static get listeners() { return [{
            "name": "keydown",
            "method": "handleKeyDown"
        }, {
            "name": "menuItemClick",
            "method": "menuItemClickHandler"
        }]; }
    static get style() { return "/**style-placeholder:tag-menu:**/"; }
}
