export class TagStats {
    constructor() {
        /** The text colour */
        this.accent = 'white';
    }
    render() {
        const { heading, subHeading, accent } = this;
        const firstStat = this.data && this.data.length >= 1 ? this.data[0] : null;
        const secondStat = this.data && this.data.length >= 2 ? this.data[1] : null;
        return (h("div", { class: "tag-stats" },
            h("div", { class: "tag-stats__content" },
                firstStat && (h("div", { class: "tag-stats__content__left" }, this.renderLabelAndValue(firstStat))),
                secondStat && (h("div", { class: "tag-stats__content__right" }, this.renderLabelAndValue(secondStat)))),
            h("div", { class: `tag-stats__heading tag-stats__heading-accent-${accent}` },
                h("div", { class: "tag-stats__heading__sub" },
                    h("span", null, subHeading)),
                h("div", { class: "tag-stats__heading__main" },
                    h("span", null, heading)))));
    }
    renderLabelAndValue(data) {
        const value = this.valueField && data && data[this.valueField] !== undefined ? data[this.valueField] : '';
        const label = this.labelField && data && data[this.labelField] !== undefined ? data[this.labelField] : '';
        return (h("div", null,
            h("div", { class: `tag-stats__content__value tag-stats__content__value-accent-${this.accent}` },
                h("span", null, value)),
            h("div", { class: `tag-stats__content__label tag-stats__content__value-accent-${this.accent}` },
                h("span", null, label))));
    }
    static get is() { return "tag-stats"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "data": {
            "type": "Any",
            "attr": "data"
        },
        "heading": {
            "type": String,
            "attr": "heading"
        },
        "labelField": {
            "type": String,
            "attr": "label-field"
        },
        "subHeading": {
            "type": String,
            "attr": "sub-heading"
        },
        "valueField": {
            "type": String,
            "attr": "value-field"
        }
    }; }
    static get style() { return "/**style-placeholder:tag-stats:**/"; }
}
