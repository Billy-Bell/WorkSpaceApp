import { createStyleFromJson } from '../../shared/utils';
/* A modal dialog that can show some content */
export class TagModal {
    constructor() {
        /** The border colour */
        this.borderAccent = 'background';
        /** The text type for the heading */
        this.headingType = 'h5';
        /** The heading colour */
        this.headingAccent = 'title';
        /** The icon colour */
        this.headingIconAccent = 'white';
        /** The backround colour of the header */
        this.headingBackgroundAccent = 'white';
        /** JSX style object in JSON to apply to the header */
        this.headingStyle = '';
        /** The width of the dialog */
        this.width = 'medium';
        /** The background colour */
        this.backgroundAccent = 'background';
        /** JSX style object in JSON to apply to the content slot */
        this.contentStyle = '';
        /** The accent of the primary button */
        this.primaryButtonAccent = 'background';
        /** The class name to add to the heading */
        this.headingClassName = '';
        /** The class name to add to the content */
        this.contentClassName = '';
        /* Handler for the dialog close button click **/
        this.handleCloseClick = () => {
            this.hide();
        };
        /**
         * Handler for the dialog keydown event.
         * If ESC is pressed, the dialog is hidden.
         */
        this.handleKeyDown = (e) => {
            if (e.key === 'Escape') {
                this.hide();
            }
        };
        /* Handler for primary button click **/
        this.handlePrimaryButtonClick = () => {
            const args = {
                cancel: false,
            };
            this.primaryButtonClick.emit(args);
            if (!args.cancel) {
                this.hide();
            }
        };
        /* Handler for cancel button click **/
        this.handleCancelButtonClick = () => {
            const args = {
                cancel: false,
            };
            this.cancelButtonClick.emit(args);
            if (!args.cancel) {
                this.hide();
            }
        };
    }
    componentDidLoad() {
        if (this.primaryButtonElement) {
            const button = this.primaryButtonElement.shadowRoot
                ? this.primaryButtonElement.shadowRoot.querySelector('button')
                : this.primaryButtonElement.querySelector('button');
            if (button) {
                button.focus();
            }
        }
    }
    /* Shows the modal dialog **/
    show() {
        this.visible = true;
    }
    // /* Hides the modal dialog **/
    hide() {
        this.visible = false;
        this.closed.emit();
    }
    render() {
        const { visible, borderAccent, heading, headingType, headingAccent, headingIcon, headingBackgroundAccent, backgroundAccent, primaryButton, primaryButtonAccent, cancelButton, contentClassName, headingClassName, } = this;
        const contentClass = `tag-modal__content ${contentClassName} tag-modal--${this.width} b-accent--${borderAccent} bg-accent--${backgroundAccent}`;
        let heightInt = this.height && this.height.indexOf('px') === this.height.length - 2
            ? parseInt(this.height.substr(0, this.height.length - 2), 10)
            : undefined;
        if (heightInt <= 120) {
            heightInt = 120;
        }
        const slotHeight = heightInt ? `${heightInt}px` : undefined;
        const slotContainerClassName = 'tag-modal__slot-container';
        return (h("div", { class: visible ? 'tag-modal modal--fade in' : 'tag-modal modal--fade', onKeyDown: this.handleKeyDown, role: "alert", "aria-live": "polite" },
            h("div", { class: `${contentClass} ${visible ? 'content--fade in' : 'content--fade'}`, style: { height: slotHeight } },
                h("div", { class: `tag-modal__header ${headingClassName} bg-accent--${headingBackgroundAccent}` },
                    headingIcon && (h("tag-icon", { icon: headingIcon, accent: this.headingIconAccent, style: { marginRight: '10px' } })),
                    h("tag-text", { type: headingType, accent: headingAccent, "text-style": this.headingStyle }, heading),
                    h("tag-icon", { icon: "CrossThin", class: "tag-modal__close-button", accent: headingAccent, onClick: this.handleCloseClick })),
                h("div", { class: slotContainerClassName, style: createStyleFromJson(this.contentStyle) },
                    h("slot", null)),
                (primaryButton || cancelButton) && (h("div", { class: "tag-modal__button-container" },
                    primaryButton && (h("tag-button", { class: "tag-modal__primary-button", accent: primaryButtonAccent, onClick: this.handlePrimaryButtonClick, ref: (el) => (this.primaryButtonElement = el) }, primaryButton)),
                    cancelButton && (h("tag-button", { class: "tag-modal__cancel-button", onClick: this.handleCancelButtonClick }, cancelButton)))))));
    }
    static get is() { return "tag-modal"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "backgroundAccent": {
            "type": String,
            "attr": "background-accent"
        },
        "borderAccent": {
            "type": String,
            "attr": "border-accent"
        },
        "cancelButton": {
            "type": String,
            "attr": "cancel-button"
        },
        "contentClassName": {
            "type": String,
            "attr": "content-class-name"
        },
        "contentStyle": {
            "type": String,
            "attr": "content-style"
        },
        "heading": {
            "type": String,
            "attr": "heading"
        },
        "headingAccent": {
            "type": String,
            "attr": "heading-accent"
        },
        "headingBackgroundAccent": {
            "type": String,
            "attr": "heading-background-accent"
        },
        "headingClassName": {
            "type": String,
            "attr": "heading-class-name"
        },
        "headingIcon": {
            "type": String,
            "attr": "heading-icon"
        },
        "headingIconAccent": {
            "type": String,
            "attr": "heading-icon-accent"
        },
        "headingStyle": {
            "type": String,
            "attr": "heading-style"
        },
        "headingType": {
            "type": String,
            "attr": "heading-type"
        },
        "height": {
            "type": String,
            "attr": "height"
        },
        "hide": {
            "method": true
        },
        "primaryButton": {
            "type": String,
            "attr": "primary-button"
        },
        "primaryButtonAccent": {
            "type": String,
            "attr": "primary-button-accent"
        },
        "show": {
            "method": true
        },
        "visible": {
            "type": Boolean,
            "attr": "visible",
            "mutable": true
        },
        "width": {
            "type": String,
            "attr": "width"
        }
    }; }
    static get events() { return [{
            "name": "closed",
            "method": "closed",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "primaryButtonClick",
            "method": "primaryButtonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "cancelButtonClick",
            "method": "cancelButtonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-modal:**/"; }
}
