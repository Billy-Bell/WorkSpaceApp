var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TagSearch {
    constructor() {
        /** The placeholder on the search input */
        this.placeholder = 'Search for records ...';
        /** The delay in milliseconds after the user stops typing before the search is invoked */
        this.delay = 500;
        /** Whether we are viewing the data as a list or record by record */
        this.viewMode = 'list';
        /** The search result data */
        this.data = [];
        /** Whether data is being loaded */
        this.isLoading = false;
        /** Whether there was an error loading data */
        this.haveError = false;
        /** Set the component ready to slide in */
        this.setSlideOn = () => {
            if (this.element.shadowRoot) {
                // shadowRoot doesn't exist in the jest tests in jsdom
                const div = this.element.shadowRoot.querySelector('.tag-search__slider');
                if (div) {
                    div.classList.add('on');
                }
            }
        };
        /** Turns the slide transition off the component */
        this.setSlideOff = () => {
            if (this.element.shadowRoot) {
                // shadowRoot doesn't exist in the jest tests in jsdom
                const div = this.element.shadowRoot.querySelector('.tag-search__slider');
                if (div) {
                    div.classList.remove('on');
                }
            }
        };
        /** Handles record view click */
        this.handleRecordViewClick = () => {
            this.showRecordView();
        };
        /** Handles list view click */
        this.handleListViewClick = () => {
            this.showListView();
        };
    }
    /** Show the nested list and hide the nested record and map any data when the component has loaded */
    componentDidLoad() {
        this.showListView();
    }
    /** This is a public method to get the search criteria */
    getSearch() {
        const searchbox = this.getSearchBox();
        if (searchbox) {
            const input = this.getSearchBoxInput(searchbox);
            return input.value;
        }
    }
    /**
     * This is a public method to set the search criteria
     * @param {string} search - The search criteria
     * @param {boolean} suppressSearch - Whether the search event is suppresed
     */
    setSearch(search, suppressSearch) {
        const searchbox = this.getSearchBox();
        if (searchbox) {
            const input = this.getSearchBoxInput(searchbox);
            input.value = search;
        }
        if (!suppressSearch) {
            this.search.emit({ criteria: search });
        }
    }
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http, tag-http
     * will call this method with the response data.
     * This method pushes data down to immediate child tag-list and tag-record components by
     * calling their setData method.
     * @param {IPagedData | any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data) {
        this.data = data.data ? data.data : data;
        if (data.error) {
            this.haveError = true;
        }
        const list = this.getList();
        if (list) {
            list.setData(data);
        }
        const record = this.getRecord();
        if (record) {
            record.setData(data);
        }
        const table = this.getTable();
        if (table) {
            table.setData(data);
        }
        if (record) {
            if (this.viewMode === 'list' && this.data.length === 1) {
                this.showRecordView();
            }
            else {
                this.showListView();
            }
        }
        this.isLoading = false;
    }
    /**
     * Sets the state in this component when a search is occurring
     * Note that the higher level tag-http will pick up this event as well and do the search
     */
    handleSearch() {
        return __awaiter(this, void 0, void 0, function* () {
            this.haveError = false;
        });
    }
    /** handles changes to the selected record */
    handleItemSelected(e) {
        const selectedArgs = e.detail;
        const record = this.getRecord();
        if (record) {
            record.selectedIndex = selectedArgs.itemIndex;
            this.showRecordView();
        }
    }
    render() {
        const { placeholder, delay, isLoading, viewMode, data, borderless } = this;
        const search = this.getSearch();
        const displayNoItems = search && !this.haveData() && !isLoading;
        return (h("div", null,
            h("div", { class: borderless ? `tag-search tag-search-borderless` : `tag-search` },
                h("tag-searchbox", { class: "tag-search__search-box", placeholder: placeholder, delay: delay, borderless: borderless })),
            !isLoading && (h("div", { class: "tag-search__slider" },
                h("slot", null))),
            isLoading && h("tag-progress-indeterminate", null),
            this.haveError && (h("tag-alert", { type: "danger" }, "Sorry, a problem has occurred. Please try again")),
            this.haveMultipleViews() && (h("div", { class: "tag-search__view-options" },
                data &&
                    data.length > 0 &&
                    viewMode === 'list' && (h("button", { onClick: this.handleRecordViewClick, title: "List View" },
                    h("tag-icon", { icon: "Doc" }))),
                data &&
                    data.length > 0 &&
                    viewMode === 'record' && (h("button", { onClick: this.handleListViewClick, title: "Record View" },
                    h("tag-icon", { icon: "ItemList" }))))),
            displayNoItems && (h("div", { class: "tag-search__no-items-container" },
                h("tag-icon", { icon: "CircleInfo", accent: "dolphinblue" }),
                h("span", { class: "no-items-text" }, "No items to display")))));
    }
    /** Gets the nested tag-list component */
    getList() {
        const list = this.element.querySelector('tag-list');
        return list;
    }
    /** Gets the nested tag-record component */
    getRecord() {
        const record = this.element.querySelector('tag-record');
        return record;
    }
    /** Gets the nested tag-list component */
    getTable() {
        const table = this.element.querySelector('tag-table');
        return table;
    }
    /** Shows the nested list and hides the nested record */
    showListView() {
        const list = this.getList();
        if (list) {
            list.style.display = 'block';
        }
        const table = this.getTable();
        if (table) {
            table.style.display = 'block';
        }
        const record = this.getRecord();
        if (record) {
            record.style.display = 'none';
        }
        this.viewMode = 'list';
        this.setSlideOn();
        setTimeout(this.setSlideOff, 500);
    }
    /** Shows the nested record and hides the nested list */
    showRecordView() {
        const list = this.getList();
        if (list) {
            list.style.display = 'none';
        }
        const table = this.getTable();
        if (table) {
            table.style.display = 'none';
        }
        const record = this.getRecord();
        if (record) {
            record.style.display = 'block';
        }
        this.viewMode = 'record';
        this.setSlideOn();
        setTimeout(this.setSlideOff, 500);
    }
    haveMultipleViews() {
        let haveList = false;
        const list = this.getList();
        if (list) {
            haveList = true;
        }
        const table = this.getTable();
        if (table) {
            haveList = true;
        }
        let haveRecord = false;
        const record = this.getRecord();
        if (record) {
            haveRecord = true;
        }
        return haveList && haveRecord;
    }
    /** Returns a reference to tag-searchbox */
    getSearchBox() {
        const searchbox = this.element.shadowRoot
            ? this.element.shadowRoot.querySelector('tag-searchbox')
            : this.element.querySelector('tag-searchbox');
        return searchbox;
    }
    /** Returns a reference to tag-search box input */
    getSearchBoxInput(searchbox) {
        return searchbox.shadowRoot
            ? searchbox.shadowRoot.querySelector('input')
            : searchbox.querySelector('input');
    }
    /** Whether there is any data */
    haveData() {
        if (!this.data || !this.data.length) {
            return false;
        }
        else {
            return this.data.length !== 0;
        }
    }
    static get is() { return "tag-search"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "borderless": {
            "type": Boolean,
            "attr": "borderless"
        },
        "data": {
            "state": true
        },
        "delay": {
            "type": Number,
            "attr": "delay"
        },
        "element": {
            "elementRef": true
        },
        "getSearch": {
            "method": true
        },
        "haveError": {
            "state": true
        },
        "isLoading": {
            "state": true
        },
        "placeholder": {
            "type": String,
            "attr": "placeholder"
        },
        "setData": {
            "method": true
        },
        "setSearch": {
            "method": true
        },
        "viewMode": {
            "state": true
        }
    }; }
    static get events() { return [{
            "name": "search",
            "method": "search",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get listeners() { return [{
            "name": "search",
            "method": "handleSearch"
        }, {
            "name": "listItemSelected",
            "method": "handleItemSelected"
        }]; }
    static get style() { return "/**style-placeholder:tag-search:**/"; }
}
