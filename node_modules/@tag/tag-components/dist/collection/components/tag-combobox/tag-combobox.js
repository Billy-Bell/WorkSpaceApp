var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createStyleFromJson } from '../../shared/utils';
export class TagCombobox {
    constructor() {
        /** The delay in milliseconds after the user stops typing before the filter is invoked */
        this.delay = 300;
        /** The accent for the secondary icon */
        this.secondaryFieldIconAccent = 'title';
        /** The accent for the left field 1 icon */
        this.leftField1IconAccent = 'title';
        /** The accent for the left field 2 icon */
        this.leftField2IconAccent = 'title';
        /** The accent for the left field 3 icon */
        this.leftField3IconAccent = 'title';
        /** The accent for the left field 1 icon */
        this.leftField4IconAccent = 'title';
        /** The accent for the left field 5 icon */
        this.leftField5IconAccent = 'title';
        /** The accent for the right field 1 icon */
        this.rightField1IconAccent = 'title';
        /** The accent for the right field 2 icon */
        this.rightField2IconAccent = 'title';
        /** The accent for the right field 3 icon */
        this.rightField3IconAccent = 'title';
        /** The accent for the right field 4 icon */
        this.rightField4IconAccent = 'title';
        /** The accent for the right field 5 icon */
        this.rightField5IconAccent = 'title';
        /** The primary field data type */
        this.primaryFieldType = 'string';
        /** The secondary field data type */
        this.secondaryFieldType = 'string';
        /** The left field 1 field data type */
        this.leftField1Type = 'string';
        /** The left field 2 field data type */
        this.leftField2Type = 'string';
        /** The left field 3 field data type */
        this.leftField3Type = 'string';
        /** The left field 4 field data type */
        this.leftField4Type = 'string';
        /** The left field 5 field data type */
        this.leftField5Type = 'string';
        /** The right field 1 field data type */
        this.rightField1Type = 'string';
        /** The right field 2 field data type */
        this.rightField2Type = 'string';
        /** The right field 3 field data type */
        this.rightField3Type = 'string';
        /** The right field 4 field data type */
        this.rightField4Type = 'string';
        /** The right field 5 field data type */
        this.rightField5Type = 'string';
        /**
         * The function to call to filter the data
         */
        this.filter = this.standardFilter;
        /** Whether the input has a border */
        this.borderless = false;
        /** Whether the input is disabled */
        this.inputDisabled = false;
        /** The timer that is used to trigger the search when the user stops typing */
        this.typingTimer = null;
        /** The selected list item index */
        this.listSelectedIndex = -1;
        /** A flag to prevent the list being closed straight after it has opened when a user clicks the input */
        this.disableInputClick = false;
        /** A flag to prevent the list being reopened straight after it has closed when a user clicks on a list item */
        this.disableFocus = false;
        /**
         * Invokes the filter when the user stops typing
         * Selects the current item when the user presses Enter
         * Selects the next / previous item in the list when the arrow keys are pressed
         */
        this.handleKeyUp = (e) => {
            clearTimeout(this.typingTimer);
            const key = this.ieFix(e.key);
            const alt = this.isAltPressed(e);
            if (key === 'Enter') {
                this.handleEnterPress();
            }
            else if (key === 'ArrowDown' && alt) {
                this.handleAltDownPress();
            }
            else if (key === 'ArrowDown') {
                this.handleDownPress();
            }
            else if (key === 'ArrowUp') {
                this.handleUpPress();
            }
            else if (key === 'Escape') {
                this.handleEscPress();
            }
            else if (key === 'Backspace') {
                this.handleBackspacePress();
            }
            else {
                this.handleCharacterPress(e);
            }
        };
        this.closeList = (e) => {
            let clickedOnSelf = this.element.contains(e.target);
            if (e.target && e.target.shadowRoot && e.target.shadowRoot.contains(this.element)) {
                clickedOnSelf = true;
            }
            if (!clickedOnSelf) {
                this.listOpen = false;
            }
        };
        this.handleInputFocus = () => {
            if (!this.disableFocus) {
                this.filteredData = this.data;
                this.listOpen = true;
                this.disableInputClick = true;
                // a click will trigger straight after focus if the user has clicked the input
                // so set a flag so that the list isn't closed
                setTimeout(() => {
                    this.disableInputClick = false;
                }, 300);
            }
        };
        this.handleInputClick = (e) => {
            if (!this.disableInputClick) {
                this.filteredData = this.data;
                this.listOpen = !this.listOpen;
                e.stopPropagation();
            }
        };
        this.handleDropDownArrowClick = () => {
            this.filteredData = this.data;
            this.listOpen = !this.listOpen;
            if (!this.inputDisabled) {
                const input = this.getInput();
                input.focus();
            }
        };
        this.handleListItemSelected = (e) => {
            this.listSelectedIndex = e.detail.itemIndex;
            this.selectItem(e.detail.item, true, e.detail.suppressItemSelectedEvent);
        };
    }
    /**
     * Sets the focus to the combobox
     */
    focusInput() {
        const shadowRoot = this.element.shadowRoot ? this.element.shadowRoot : this.element;
        const input = shadowRoot.querySelector('input');
        if (input) {
            input.focus();
        }
    }
    /**
     * Selects the text in the input
     */
    select() {
        const shadowRoot = this.element.shadowRoot ? this.element.shadowRoot : this.element;
        const input = shadowRoot.querySelector('input');
        if (input) {
            input.select();
        }
    }
    /* Adds a click handler for the document that closes the list **/
    componentDidLoad() {
        document.addEventListener('click', this.closeList);
    }
    /* Removes the document click handler **/
    componentDidUnload() {
        document.removeEventListener('click', this.closeList);
    }
    /** Set filteredData to data when data is first set */
    componentWillUpdate() {
        if (this.filteredData === undefined && this.data !== undefined) {
            this.filteredData = this.data;
        }
    }
    /** Selects the correct portion of the input text when it has just been updated */
    componentDidUpdate() {
        if (!this.doNotSuggest) {
            if (this.textSelectionStart && this.textSelectionEnd) {
                const input = this.getInput();
                input.setSelectionRange(this.textSelectionStart, this.textSelectionEnd);
            }
            if (this.listSelectedIndex > -1) {
                const list = this.getList();
                if (list) {
                    list.componentOnReady().then(() => {
                        list.select(this.filteredData[this.listSelectedIndex], true);
                    });
                }
            }
        }
    }
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http or tag-search component, the parent component
     * will call this method with the response data.
     * @param {IPagedData | any[]} data - The data which can be a simple array of objects or IPagedData
     */
    setData(data) {
        this.data = data.data ? data.data : data;
    }
    setValue(value, suppressChangeEvent) {
        // get matched item
        const items = this.data.filter(val => val[this.valueField] === value || val[this.textField] === value);
        // if we have a match set the text and value to the item found
        if (items && items.length > 0) {
            const item = items[0];
            this.text = this.getTextValueFromDataItem(item);
            this.value = this.getValueFromDataItem(item);
            if (!suppressChangeEvent) {
                this.valueChange.emit({ value: this.value, item });
            }
            // update the list
            const list = this.getList();
            if (list && list.select) {
                list.select(item, suppressChangeEvent);
            }
        }
        else {
            console.warn(`${value} not found using text-field or value-field`);
        }
    }
    render() {
        const { id, name, filteredData, placeholder, listOpen, textField, disabled, leftIcon, leftIconField, leftIconSize, rightIcon, rightIconField, rightIconSize, imageField, primaryField, primaryFieldInline, secondaryField, secondaryFieldIcon, secondaryFieldIconAccent, secondaryFieldInline, leftLabel1, leftLabel2, leftLabel3, leftLabel4, leftLabel5, leftField1, leftField2, leftField3, leftField4, leftField5, leftField1Icon, leftField1IconAccent, leftField1Inline, leftField2Icon, leftField2IconAccent, leftField2Inline, leftField3Icon, leftField3IconAccent, leftField3Inline, leftField4Icon, leftField4IconAccent, leftField4Inline, leftField5Icon, leftField5IconAccent, leftField5Inline, rightLabel1, rightLabel2, rightLabel3, rightLabel4, rightLabel5, rightField1, rightField2, rightField3, rightField4, rightField5, rightField1Icon, rightField1IconAccent, rightField1Inline, rightField2Icon, rightField2IconAccent, rightField2Inline, rightField3Icon, rightField3IconAccent, rightField3Inline, rightField4Icon, rightField4IconAccent, rightField4Inline, rightField5Icon, rightField5IconAccent, rightField5Inline, primaryFieldType, secondaryFieldType, leftField1Type, leftField2Type, leftField3Type, leftField4Type, leftField5Type, rightField1Type, rightField2Type, rightField3Type, rightField4Type, rightField5Type, secondaryFieldStyle, leftLabel1Style, leftLabel2Style, leftLabel3Style, leftLabel4Style, leftLabel5Style, rightLabel1Style, rightLabel2Style, rightLabel3Style, rightLabel4Style, rightLabel5Style, leftField1Style, leftField2Style, leftField3Style, leftField4Style, leftField5Style, rightField1Style, rightField2Style, rightField3Style, rightField4Style, rightField5Style, primaryFieldStyleField, secondaryFieldStyleField, leftField1StyleField, leftField2StyleField, leftField3StyleField, leftField4StyleField, leftField5StyleField, rightField1StyleField, rightField2StyleField, rightField3StyleField, rightField4StyleField, rightField5StyleField, leftIconAccent, rightIconAccent, inputDisabled, } = this;
        const primaryFieldStyle = this.primaryFieldStyle || this.secondaryField || this.leftField1
            ? this.primaryFieldStyle
            : '{"font-size": "13px","font-weight": "400", "margin-left": "-4px", "line-height": "15px"}';
        const inputValue = this.getInputValueForRender();
        return (h("div", { class: "tag-combobox" },
            h("div", { class: this.getInputContainerClass() },
                inputDisabled ? (h("span", { tabIndex: 0, style: createStyleFromJson(this.inputStyle), onClick: !disabled && this.handleInputClick, onFocus: !disabled && this.handleInputFocus }, inputValue === undefined || inputValue === null || inputValue === ''
                    ? placeholder
                    : inputValue)) : (h("input", { id: id, name: name, placeholder: placeholder, onKeyUp: this.handleKeyUp, value: inputValue, disabled: disabled, style: createStyleFromJson(this.inputStyle) })),
                h("div", { class: "tag-combobox__menu-icon-container", onClick: !disabled && this.handleDropDownArrowClick },
                    h("span", { class: "tag-combobox__menu-icon" }))),
            h("tag-list", { style: { display: listOpen ? 'block' : 'none' }, selectable: true, data: filteredData, containerClassName: this.borderless ? 'tag-combobox__list-borderless' : 'tag-combobox__list', itemContainerClassName: this.borderless ? 'tag-combobox__list-borderless-item' : 'tag-combobox__list-item', leftIcon: leftIcon, leftIconField: leftIconField, leftIconSize: leftIconSize, leftIconAccent: leftIconAccent, rightIcon: rightIcon, rightIconField: rightIconField, rightIconSize: rightIconSize, rightIconAccent: rightIconAccent, imageField: imageField, primaryField: primaryField ? primaryField : textField, primaryFieldInline: primaryFieldInline, secondaryField: secondaryField, secondaryFieldIcon: secondaryFieldIcon, secondaryFieldIconAccent: secondaryFieldIconAccent, secondaryFieldInline: secondaryFieldInline, leftLabel1: leftLabel1, leftLabel2: leftLabel2, leftLabel3: leftLabel3, leftLabel4: leftLabel4, leftLabel5: leftLabel5, leftField1: leftField1, leftField2: leftField2, leftField3: leftField3, leftField4: leftField4, leftField5: leftField5, leftField1Icon: leftField1Icon, leftField1IconAccent: leftField1IconAccent, leftField1Inline: leftField1Inline, leftField2Icon: leftField2Icon, leftField2IconAccent: leftField2IconAccent, leftField2Inline: leftField2Inline, leftField3Icon: leftField3Icon, leftField3IconAccent: leftField3IconAccent, leftField3Inline: leftField3Inline, leftField4Icon: leftField4Icon, leftField4IconAccent: leftField4IconAccent, leftField4Inline: leftField4Inline, leftField5Icon: leftField5Icon, leftField5IconAccent: leftField5IconAccent, leftField5Inline: leftField5Inline, rightLabel1: rightLabel1, rightLabel2: rightLabel2, rightLabel3: rightLabel3, rightLabel4: rightLabel4, rightLabel5: rightLabel5, rightField1: rightField1, rightField2: rightField2, rightField3: rightField3, rightField4: rightField4, rightField5: rightField5, rightField1Icon: rightField1Icon, rightField1IconAccent: rightField1IconAccent, rightField1Inline: rightField1Inline, rightField2Icon: rightField2Icon, rightField2IconAccent: rightField2IconAccent, rightField2Inline: rightField2Inline, rightField3Icon: rightField3Icon, rightField3IconAccent: rightField3IconAccent, rightField3Inline: rightField3Inline, rightField4Icon: rightField4Icon, rightField4IconAccent: rightField4IconAccent, rightField4Inline: rightField4Inline, rightField5Icon: rightField5Icon, rightField5IconAccent: rightField5IconAccent, rightField5Inline: rightField5Inline, primaryFieldType: primaryFieldType, secondaryFieldType: secondaryFieldType, leftField1Type: leftField1Type, leftField2Type: leftField2Type, leftField3Type: leftField3Type, leftField4Type: leftField4Type, leftField5Type: leftField5Type, rightField1Type: rightField1Type, rightField2Type: rightField2Type, rightField3Type: rightField3Type, rightField4Type: rightField4Type, rightField5Type: rightField5Type, primaryFieldStyle: primaryFieldStyle, secondaryFieldStyle: secondaryFieldStyle, leftLabel1Style: leftLabel1Style, leftLabel2Style: leftLabel2Style, leftLabel3Style: leftLabel3Style, leftLabel4Style: leftLabel4Style, leftLabel5Style: leftLabel5Style, rightLabel1Style: rightLabel1Style, rightLabel2Style: rightLabel2Style, rightLabel3Style: rightLabel3Style, rightLabel4Style: rightLabel4Style, rightLabel5Style: rightLabel5Style, leftField1Style: leftField1Style, leftField2Style: leftField2Style, leftField3Style: leftField3Style, leftField4Style: leftField4Style, leftField5Style: leftField5Style, rightField1Style: rightField1Style, rightField2Style: rightField2Style, rightField3Style: rightField3Style, rightField4Style: rightField4Style, rightField5Style: rightField5Style, primaryFieldStyleField: primaryFieldStyleField, secondaryFieldStyleField: secondaryFieldStyleField, leftField1StyleField: leftField1StyleField, leftField2StyleField: leftField2StyleField, leftField3StyleField: leftField3StyleField, leftField4StyleField: leftField4StyleField, leftField5StyleField: leftField5StyleField, rightField1StyleField: rightField1StyleField, rightField2StyleField: rightField2StyleField, rightField3StyleField: rightField3StyleField, rightField4StyleField: rightField4StyleField, rightField5StyleField: rightField5StyleField, onListItemSelected: this.handleListItemSelected, maxHeight: "221px" })));
    }
    getInputContainerClass() {
        let className = 'tag-combobox__input-container';
        if (this.borderless) {
            className = className + ' tag-combobox__input-container-borderless';
        }
        if (this.inputDisabled) {
            className = className + ' tag-combobox__input-container-inputdisabled';
        }
        if (this.disabled) {
            className = className + ' tag-combobox__input-container-disabled';
        }
        return className;
    }
    /** Gets a reference to the input */
    getInput() {
        return this.element.shadowRoot
            ? this.element.shadowRoot.querySelector('input')
            : this.element.querySelector('input');
    }
    /** Gets a reference to the list */
    getList() {
        return this.element.shadowRoot
            ? this.element.shadowRoot.querySelector('tag-list')
            : this.element.querySelector('tag-list');
    }
    /**
     * Returns whether ALT is pressed
     * There is a try-catch wrapper is because e.getModifierState errors in unit tests
     */
    isAltPressed(e) {
        let alt;
        try {
            alt = e.getModifierState('Alt');
        }
        catch (ex) {
            alt = false;
        }
        return alt;
    }
    /** IE fix for their none standard key names */
    ieFix(key) {
        if (key === 'Down') {
            return 'ArrowDown';
        }
        else if (key === 'Up') {
            return 'ArrowUp';
        }
        else if (key === 'Left') {
            return 'ArrowLeft';
        }
        else if (key === 'Right') {
            return 'ArrowRight';
        }
        else {
            return key;
        }
    }
    /**
     * Handles Enter being pressed
     * This should select the current item in the list
     */
    handleEnterPress() {
        const data = this.getDataForKeyPress();
        if (data) {
            const dataItem = data[this.listSelectedIndex];
            this.selectItem(dataItem, true);
        }
    }
    /**
     * Handles ALT+DOWN press
     * This should open the list
     */
    handleAltDownPress() {
        this.filteredData = this.data;
        this.listOpen = true;
    }
    /**
     * Handles ESC press
     * This should close the list
     */
    handleEscPress() {
        this.listOpen = false;
    }
    /**
     * Handles Backspace press
     * This should close the list
     */
    handleBackspacePress() {
        this.listOpen = false;
        const input = this.getInput();
        this.value = this.getValueFromDataItem(input.value);
        if (this.value === undefined) {
            this.listSelectedIndex = -1;
            this.filteredData = undefined;
        }
    }
    /**
     * Handles DOWN press
     * This go to the next item in the list
     */
    handleDownPress() {
        const data = this.getDataForKeyPress();
        if (data) {
            const nextIndex = this.listSelectedIndex < 0 ? 0 : this.listSelectedIndex + 1;
            this.listSelectedIndex = nextIndex < data.length - 1 ? nextIndex : data.length - 1;
            const dataItem = data[this.listSelectedIndex];
            this.selectItem(dataItem, false);
        }
    }
    /**
     * Handles UP press
     * This go to the previous item in the list
     */
    handleUpPress() {
        // go to the previous item in the list
        const data = this.getDataForKeyPress();
        if (data) {
            const previousIndex = this.listSelectedIndex <= 0 ? 0 : this.listSelectedIndex - 1;
            this.listSelectedIndex = previousIndex;
            const dataItem = data[this.listSelectedIndex];
            this.selectItem(dataItem, false);
        }
    }
    /**
     * Gets the data for key press logic
     * When the list is open we want the filtered data otherwise we want all the data
     */
    getDataForKeyPress() {
        const data = this.listOpen && this.filteredData ? this.filteredData : this.data;
        return data;
    }
    /**
     * Handles user typing into the input
     * This should filter the list and predict the value but only if the do-not-suggest attribute is not set
     * @param {any} e - The keyboard event arg
     */
    handleCharacterPress(e) {
        const criteria = e.target.value;
        const key = this.ieFix(e.key);
        if (this.doNotSuggest) {
            this.text = e.target.value;
        }
        else {
            const suppressedSearchKeys = [
                'Alt',
                'Enter',
                'ArrowDown',
                'ArrowUp',
                'ArrowRight',
                'ArrowLeft',
                'Escape',
                'Backspace',
                'Tab',
                'Shift',
            ];
            if (suppressedSearchKeys.indexOf(key) === -1) {
                this.typingTimer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    const filterResult = yield this.filter(criteria, this.data);
                    if (filterResult.data.length >= 1) {
                        this.value = filterResult.value;
                        this.text = filterResult.text;
                        this.textSelectionStart = filterResult.selectionStart;
                        this.textSelectionEnd = filterResult.selectionEnd;
                        this.listSelectedIndex = 0;
                    }
                    else {
                        this.textSelectionStart = 0;
                        this.textSelectionEnd = 0;
                        this.listSelectedIndex = -1;
                    }
                    this.filteredData = filterResult.data;
                    this.listOpen = filterResult.listOpen;
                }), this.delay);
            }
        }
    }
    standardFilter(criteria, data) {
        const result = {
            data: [],
            listOpen: true,
            selectionEnd: 0,
            selectionStart: 0,
            text: '',
            value: criteria,
        };
        if (criteria === '') {
            result.data = this.data;
            result.selectionStart = 0;
            result.text = '';
            result.selectionEnd = 0;
        }
        else if (data === undefined) {
            result.data = undefined;
            result.selectionStart = 0;
            result.text = criteria;
            result.selectionEnd = 0;
            result.listOpen = false;
        }
        else {
            result.selectionStart = criteria.length;
            result.data = data.filter(item => {
                const field = this.primaryField ? this.primaryField : this.textField;
                const itemValue = item[field] ? item[field].toLowerCase() : '';
                return itemValue.indexOf(criteria.toLowerCase()) === 0;
            });
            result.text = this.getTextValueFromFilteredData(result.data);
            result.selectionEnd = result.text.length;
            result.listOpen = true;
        }
        return result;
    }
    getTextValueFromFilteredData(data) {
        if (data && data.length > 0) {
            return this.getTextValueFromDataItem(data[0]);
        }
        else {
            return '';
        }
    }
    selectItem(item, close, suppressChangeEvent = false) {
        this.text = this.getTextValueFromDataItem(item);
        this.value = this.getValueFromDataItem(item);
        console.log('combo-box selectItem');
        if (!suppressChangeEvent) {
            this.valueChange.emit({ value: this.value, item });
        }
        if (close) {
            this.listOpen = false;
            this.textSelectionStart = this.text.length;
            this.textSelectionEnd = this.text.length;
            if (!this.inputDisabled) {
                const input = this.getInput();
                input.focus();
            }
            // in IE and Edge the focus is set to the input when inputDisabled = true
            // so this bit of code prevents the list from being re-opened
            this.disableFocus = true;
            setTimeout(() => {
                this.disableFocus = false;
            }, 300);
        }
    }
    /**
     * Gets the value to render in the input
     * This may be the predicated value or the value being keyed in (if no match has occurred)
     */
    getInputValueForRender() {
        if (this.listSelectedIndex >= 0) {
            /** We have a match, so, return the predicted value */
            return this.text
                ? this.text
                : this.getTextValueFromDataItem(this.getDataItemWithValue(this.value));
        }
        else {
            /** We have don't have a match, so, return the value that is being typed */
            const input = this.getInput();
            let value = input ? input.value : '';
            /** If the value is blank then try to get the text from value attribute */
            if (value === '' && this.value) {
                value = this.getTextValueFromDataItem(this.getDataItemWithValue(this.value));
            }
            return value;
        }
    }
    getTextValueFromDataItem(item) {
        if (item) {
            const field = this.textField ? this.textField : Object.keys(item)[0];
            return item[field];
        }
        else {
            return '';
        }
    }
    getValueFromDataItem(item) {
        if (item) {
            const field = this.valueField ? this.valueField : Object.keys(item)[0];
            return item[field];
        }
        else {
            return '';
        }
    }
    getDataItemWithValue(value) {
        if (value && this.valueField && this.data) {
            const found = this.data.filter(item => {
                if (typeof value === 'string') {
                    let itemValue = item[this.valueField];
                    if (typeof itemValue !== 'string') {
                        itemValue = itemValue.toString();
                    }
                    return itemValue.toLowerCase() === value.toLowerCase();
                }
                else {
                    const itemValue = item[this.valueField];
                    return itemValue === value;
                }
            });
            if (found.length > 0) {
                return found[0];
            }
            else {
                return undefined;
            }
        }
        else {
            return undefined;
        }
    }
    static get is() { return "tag-combobox"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "borderless": {
            "type": Boolean,
            "attr": "borderless"
        },
        "data": {
            "type": "Any",
            "attr": "data",
            "mutable": true
        },
        "delay": {
            "type": Number,
            "attr": "delay"
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled"
        },
        "doNotSuggest": {
            "type": Boolean,
            "attr": "do-not-suggest"
        },
        "element": {
            "elementRef": true
        },
        "filter": {
            "type": "Any",
            "attr": "filter"
        },
        "filteredData": {
            "state": true
        },
        "focusInput": {
            "method": true
        },
        "id": {
            "type": String,
            "attr": "id"
        },
        "imageField": {
            "type": String,
            "attr": "image-field"
        },
        "inputDisabled": {
            "type": Boolean,
            "attr": "input-disabled"
        },
        "inputStyle": {
            "type": String,
            "attr": "input-style"
        },
        "leftField1": {
            "type": String,
            "attr": "left-field-1"
        },
        "leftField1Icon": {
            "type": String,
            "attr": "left-field-1-icon"
        },
        "leftField1IconAccent": {
            "type": String,
            "attr": "left-field-1-icon-accent"
        },
        "leftField1Inline": {
            "type": Boolean,
            "attr": "left-field-1-inline"
        },
        "leftField1Style": {
            "type": String,
            "attr": "left-field-1-style"
        },
        "leftField1StyleField": {
            "type": String,
            "attr": "left-field-1-style-field"
        },
        "leftField1Type": {
            "type": String,
            "attr": "left-field-1-type"
        },
        "leftField2": {
            "type": String,
            "attr": "left-field-2"
        },
        "leftField2Icon": {
            "type": String,
            "attr": "left-field-2-icon"
        },
        "leftField2IconAccent": {
            "type": String,
            "attr": "left-field-2-icon-accent"
        },
        "leftField2Inline": {
            "type": Boolean,
            "attr": "left-field-2-inline"
        },
        "leftField2Style": {
            "type": String,
            "attr": "left-field-2-style"
        },
        "leftField2StyleField": {
            "type": String,
            "attr": "left-field-2-style-field"
        },
        "leftField2Type": {
            "type": String,
            "attr": "left-field-2-type"
        },
        "leftField3": {
            "type": String,
            "attr": "left-field-3"
        },
        "leftField3Icon": {
            "type": String,
            "attr": "left-field-3-icon"
        },
        "leftField3IconAccent": {
            "type": String,
            "attr": "left-field-3-icon-accent"
        },
        "leftField3Inline": {
            "type": Boolean,
            "attr": "left-field-3-inline"
        },
        "leftField3Style": {
            "type": String,
            "attr": "left-field-3-style"
        },
        "leftField3StyleField": {
            "type": String,
            "attr": "left-field-3-style-field"
        },
        "leftField3Type": {
            "type": String,
            "attr": "left-field-3-type"
        },
        "leftField4": {
            "type": String,
            "attr": "left-field-4"
        },
        "leftField4Icon": {
            "type": String,
            "attr": "left-field-4-icon"
        },
        "leftField4IconAccent": {
            "type": String,
            "attr": "left-field-4-icon-accent"
        },
        "leftField4Inline": {
            "type": Boolean,
            "attr": "left-field-4-inline"
        },
        "leftField4Style": {
            "type": String,
            "attr": "left-field-4-style"
        },
        "leftField4StyleField": {
            "type": String,
            "attr": "left-field-4-style-field"
        },
        "leftField4Type": {
            "type": String,
            "attr": "left-field-4-type"
        },
        "leftField5": {
            "type": String,
            "attr": "left-field-5"
        },
        "leftField5Icon": {
            "type": String,
            "attr": "left-field-5-icon"
        },
        "leftField5IconAccent": {
            "type": String,
            "attr": "left-field-5-icon-accent"
        },
        "leftField5Inline": {
            "type": Boolean,
            "attr": "left-field-5-inline"
        },
        "leftField5Style": {
            "type": String,
            "attr": "left-field-5-style"
        },
        "leftField5StyleField": {
            "type": String,
            "attr": "left-field-5-style-field"
        },
        "leftField5Type": {
            "type": String,
            "attr": "left-field-5-type"
        },
        "leftIcon": {
            "type": String,
            "attr": "left-icon"
        },
        "leftIconAccent": {
            "type": String,
            "attr": "left-icon-accent"
        },
        "leftIconField": {
            "type": String,
            "attr": "left-icon-field"
        },
        "leftIconSize": {
            "type": Number,
            "attr": "left-icon-size"
        },
        "leftLabel1": {
            "type": String,
            "attr": "left-label-1"
        },
        "leftLabel1Style": {
            "type": String,
            "attr": "left-label-1-style"
        },
        "leftLabel2": {
            "type": String,
            "attr": "left-label-2"
        },
        "leftLabel2Style": {
            "type": String,
            "attr": "left-label-2-style"
        },
        "leftLabel3": {
            "type": String,
            "attr": "left-label-3"
        },
        "leftLabel3Style": {
            "type": String,
            "attr": "left-label-3-style"
        },
        "leftLabel4": {
            "type": String,
            "attr": "left-label-4"
        },
        "leftLabel4Style": {
            "type": String,
            "attr": "left-label-4-style"
        },
        "leftLabel5": {
            "type": String,
            "attr": "left-label-5"
        },
        "leftLabel5Style": {
            "type": String,
            "attr": "left-label-5-style"
        },
        "listOpen": {
            "state": true
        },
        "listSelectedIndex": {
            "state": true
        },
        "name": {
            "type": String,
            "attr": "name"
        },
        "placeholder": {
            "type": String,
            "attr": "placeholder"
        },
        "primaryField": {
            "type": String,
            "attr": "primary-field"
        },
        "primaryFieldInline": {
            "type": Boolean,
            "attr": "primary-field-inline"
        },
        "primaryFieldStyle": {
            "type": String,
            "attr": "primary-field-style"
        },
        "primaryFieldStyleField": {
            "type": String,
            "attr": "primary-field-style-field"
        },
        "primaryFieldType": {
            "type": String,
            "attr": "primary-field-type"
        },
        "rightField1": {
            "type": String,
            "attr": "right-field-1"
        },
        "rightField1Icon": {
            "type": String,
            "attr": "right-field-1-icon"
        },
        "rightField1IconAccent": {
            "type": String,
            "attr": "right-field-1-icon-accent"
        },
        "rightField1Inline": {
            "type": Boolean,
            "attr": "right-field-1-inline"
        },
        "rightField1Style": {
            "type": String,
            "attr": "right-field-1-style"
        },
        "rightField1StyleField": {
            "type": String,
            "attr": "right-field-1-style-field"
        },
        "rightField1Type": {
            "type": String,
            "attr": "right-field-1-type"
        },
        "rightField2": {
            "type": String,
            "attr": "right-field-2"
        },
        "rightField2Icon": {
            "type": String,
            "attr": "right-field-2-icon"
        },
        "rightField2IconAccent": {
            "type": String,
            "attr": "right-field-2-icon-accent"
        },
        "rightField2Inline": {
            "type": Boolean,
            "attr": "right-field-2-inline"
        },
        "rightField2Style": {
            "type": String,
            "attr": "right-field-2-style"
        },
        "rightField2StyleField": {
            "type": String,
            "attr": "right-field-2-style-field"
        },
        "rightField2Type": {
            "type": String,
            "attr": "right-field-2-type"
        },
        "rightField3": {
            "type": String,
            "attr": "right-field-3"
        },
        "rightField3Icon": {
            "type": String,
            "attr": "right-field-3-icon"
        },
        "rightField3IconAccent": {
            "type": String,
            "attr": "right-field-3-icon-accent"
        },
        "rightField3Inline": {
            "type": Boolean,
            "attr": "right-field-3-inline"
        },
        "rightField3Style": {
            "type": String,
            "attr": "right-field-3-style"
        },
        "rightField3StyleField": {
            "type": String,
            "attr": "right-field-3-style-field"
        },
        "rightField3Type": {
            "type": String,
            "attr": "right-field-3-type"
        },
        "rightField4": {
            "type": String,
            "attr": "right-field-4"
        },
        "rightField4Icon": {
            "type": String,
            "attr": "right-field-4-icon"
        },
        "rightField4IconAccent": {
            "type": String,
            "attr": "right-field-4-icon-accent"
        },
        "rightField4Inline": {
            "type": Boolean,
            "attr": "right-field-4-inline"
        },
        "rightField4Style": {
            "type": String,
            "attr": "right-field-4-style"
        },
        "rightField4StyleField": {
            "type": String,
            "attr": "right-field-4-style-field"
        },
        "rightField4Type": {
            "type": String,
            "attr": "right-field-4-type"
        },
        "rightField5": {
            "type": String,
            "attr": "right-field-5"
        },
        "rightField5Icon": {
            "type": String,
            "attr": "right-field-5-icon"
        },
        "rightField5IconAccent": {
            "type": String,
            "attr": "right-field-5-icon-accent"
        },
        "rightField5Inline": {
            "type": Boolean,
            "attr": "right-field-5-inline"
        },
        "rightField5Style": {
            "type": String,
            "attr": "right-field-5-style"
        },
        "rightField5StyleField": {
            "type": String,
            "attr": "right-field-5-style-field"
        },
        "rightField5Type": {
            "type": String,
            "attr": "right-field-5-type"
        },
        "rightIcon": {
            "type": String,
            "attr": "right-icon"
        },
        "rightIconAccent": {
            "type": String,
            "attr": "right-icon-accent"
        },
        "rightIconField": {
            "type": String,
            "attr": "right-icon-field"
        },
        "rightIconSize": {
            "type": Number,
            "attr": "right-icon-size"
        },
        "rightLabel1": {
            "type": String,
            "attr": "right-label-1"
        },
        "rightLabel1Style": {
            "type": String,
            "attr": "right-label-1-style"
        },
        "rightLabel2": {
            "type": String,
            "attr": "right-label-2"
        },
        "rightLabel2Style": {
            "type": String,
            "attr": "right-label-2-style"
        },
        "rightLabel3": {
            "type": String,
            "attr": "right-label-3"
        },
        "rightLabel3Style": {
            "type": String,
            "attr": "right-label-3-style"
        },
        "rightLabel4": {
            "type": String,
            "attr": "right-label-4"
        },
        "rightLabel4Style": {
            "type": String,
            "attr": "right-label-4-style"
        },
        "rightLabel5": {
            "type": String,
            "attr": "right-label-5"
        },
        "rightLabel5Style": {
            "type": String,
            "attr": "right-label-5-style"
        },
        "secondaryField": {
            "type": String,
            "attr": "secondary-field"
        },
        "secondaryFieldIcon": {
            "type": String,
            "attr": "secondary-field-icon"
        },
        "secondaryFieldIconAccent": {
            "type": String,
            "attr": "secondary-field-icon-accent"
        },
        "secondaryFieldInline": {
            "type": Boolean,
            "attr": "secondary-field-inline"
        },
        "secondaryFieldStyle": {
            "type": String,
            "attr": "secondary-field-style"
        },
        "secondaryFieldStyleField": {
            "type": String,
            "attr": "secondary-field-style-field"
        },
        "secondaryFieldType": {
            "type": String,
            "attr": "secondary-field-type"
        },
        "select": {
            "method": true
        },
        "setData": {
            "method": true
        },
        "setValue": {
            "method": true
        },
        "text": {
            "state": true
        },
        "textField": {
            "type": String,
            "attr": "text-field"
        },
        "value": {
            "type": "Any",
            "attr": "value",
            "mutable": true
        },
        "valueField": {
            "type": String,
            "attr": "value-field"
        }
    }; }
    static get events() { return [{
            "name": "valueChange",
            "method": "valueChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-combobox:**/"; }
}
