var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class TagButton {
    constructor() {
        /** Colour of the button */
        this.accent = 'btndefault';
        /** The Size of the button */
        this.size = 'default';
        /** The type of the button */
        this.type = 'button';
        /** The text to display in the button badge */
        this.badgeAccent = 'primary';
        /** If set to true displays badge inline next to button text, else the badge is displayed top right */
        this.badgeInline = false;
        /** Whether the button is disabled */
        this.disabled = false;
        /** Whether the menu items are visible or not */
        this.itemsVisible = false;
        /* Hides the options container **/
        this.hideOptions = (e) => {
            if (!this.element.contains(e.target)) {
                this.itemsVisible = false;
            }
        };
        /*
         * Handles when the button is clicked.
         * This shows / hides the options container if there are button options.
         **/
        this.handleClick = (e) => {
            if (this.haveMenu()) {
                e.stopPropagation();
                this.itemsVisible = !this.itemsVisible;
            }
            else {
                this.buttonClick.emit();
            }
        };
    }
    handleKeyDown(e) {
        if (this.haveMenu()) {
            if (e.key === 'Enter') {
                this.itemsVisible = !this.itemsVisible;
            }
            else if (e.key === 'Escape' || e.key === 'Esc') {
                this.itemsVisible = false;
            }
        }
    }
    /* Adds a click handler for the document that hides the the button options container **/
    componentWillLoad() {
        document.addEventListener('click', this.hideOptions);
        this.internalElementTextContent = this.element.textContent;
    }
    /* Removes the document click handler **/
    componentDidUnload() {
        document.removeEventListener('click', this.hideOptions);
    }
    /**
     * Subscribe to the menuItemClicked event from the menu items.
     * When menu items are clicked we should hide the menu
     */
    menuItemClickHandler() {
        return __awaiter(this, void 0, void 0, function* () {
            this.itemsVisible = false;
        });
    }
    render() {
        const text = this.getText();
        const ariaHasPopup = this.haveMenu() ? 'true' : 'false';
        const ariaExpanded = this.itemsVisible ? 'true' : 'false';
        return (h("div", { class: "tag-button" },
            h("button", { type: this.type, class: this.getClass(), onClick: this.handleClick, disabled: this.disabled, style: {
                    minWidth: this.minWidth,
                }, "aria-haspopup": ariaHasPopup, "aria-expanded": ariaExpanded }, this.icon ? this.renderIconButton(text) : this.renderTextButton(text)),
            h("div", { class: "tag-button__menu-items-container-container", style: { display: this.itemsVisible ? 'block' : 'none' } },
                h("div", { role: "menu", class: "tag-button__menu-items-container" },
                    h("slot", null)))));
    }
    /** Gets the button text */
    getText() {
        if (this.text) {
            return this.text;
        }
        else if (!this.haveMenu()) {
            return this.internalElementTextContent;
        }
        else {
            return '';
        }
    }
    /** Gets the CSS class for the button */
    getClass() {
        const accent = this.accent ? [`accent--${this.accent.toLowerCase()}`] : [];
        const size = this.size ? [`size--${this.size}`] : [];
        const rounded = this.rounded ? [`rounded-button`] : [];
        const squared = this.squared ? [`squared-button`] : [];
        return ['tag-button', ...accent, ...size, ...rounded, ...squared].join(' ');
    }
    /** Whether the button has menu options */
    haveMenu() {
        const tagOptions = [].slice.call(this.element.querySelectorAll('tag-menu-item'));
        return tagOptions.length > 0;
    }
    renderBadge() {
        const badgeClass = this.badgeInline ? 'tag-button__badge--inline' : 'tag-button__badge';
        if (this.badge) {
            return (h("tag-badge", { size: 'small', class: badgeClass, value: this.badge, accent: this.badgeAccent }));
        }
        else {
            return null;
        }
    }
    getIconAccent() {
        if (this.iconAccent) {
            return this.iconAccent;
        }
        else {
            return 'title';
        }
    }
    renderIconButton(text) {
        const theIconAccent = this.getIconAccent();
        return (h("div", null,
            h("tag-icon", { icon: this.icon, accent: theIconAccent }),
            (text || this.haveMenu()) && (h("span", { class: this.haveMenu() ? 'tag-button__text tag-button__menu-icon' : 'tag-button__text', style: { marginLeft: '3px', marginRight: text ? undefined : '1px' } }, text)),
            this.renderBadge()));
    }
    renderTextButton(text) {
        return (h("div", null,
            text && (h("div", { class: this.haveMenu() ? 'tag-button__text tag-button__menu-icon' : 'tag-button__text' },
                h("div", null, text))),
            this.renderBadge()));
    }
    static get is() { return "tag-button"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "badge": {
            "type": String,
            "attr": "badge"
        },
        "badgeAccent": {
            "type": String,
            "attr": "badge-accent"
        },
        "badgeInline": {
            "type": Boolean,
            "attr": "badge-inline"
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled"
        },
        "element": {
            "elementRef": true
        },
        "icon": {
            "type": String,
            "attr": "icon"
        },
        "iconAccent": {
            "type": String,
            "attr": "icon-accent"
        },
        "itemsVisible": {
            "state": true
        },
        "minWidth": {
            "type": String,
            "attr": "min-width"
        },
        "rounded": {
            "type": Boolean,
            "attr": "rounded"
        },
        "size": {
            "type": String,
            "attr": "size"
        },
        "squared": {
            "type": Boolean,
            "attr": "squared"
        },
        "text": {
            "type": String,
            "attr": "text"
        },
        "type": {
            "type": String,
            "attr": "type"
        }
    }; }
    static get events() { return [{
            "name": "buttonClick",
            "method": "buttonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get listeners() { return [{
            "name": "keydown",
            "method": "handleKeyDown"
        }, {
            "name": "menuItemClick",
            "method": "menuItemClickHandler"
        }]; }
    static get style() { return "/**style-placeholder:tag-button:**/"; }
}
