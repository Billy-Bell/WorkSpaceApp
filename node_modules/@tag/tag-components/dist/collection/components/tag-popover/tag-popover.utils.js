export function buildPointClass() {
    return '';
}
function geYtPositions(targetPos, selfPos, windowHeight, popoverPosition) {
    const bottomGap = windowHeight - targetPos.bottom;
    const topGap = targetPos.top;
    const isOffTheBottom = targetPos.bottom + selfPos.height > windowHeight;
    // if the popover is off the bottom then display the popover on top of the source element
    // but only if bottom-align-left hasn't been specified
    //          and there is more room above the source element than underneath it
    if (isOffTheBottom && popoverPosition !== 'bottom-align-left' && bottomGap < topGap) {
        return {
            arrowPosition: 'bottom',
            firstPositionY: targetPos.top - selfPos.height,
            lastPositionY: targetPos.top - selfPos.height - 10,
        };
    }
    return {
        arrowPosition: 'top',
        firstPositionY: targetPos.bottom,
        lastPositionY: targetPos.bottom + 10,
    };
}
function getXPositions(targetPos, selfPos, windowWidth, popoverPosition) {
    if (popoverPosition === 'bottom-align-left') {
        return {
            arrowOffset: targetPos.left + 10,
            lastPositionX: targetPos.left,
        };
    }
    const targetCenterPosition = (targetPos.left + targetPos.right) / 2;
    const defaultPositionLeft = targetCenterPosition - selfPos.width / 2;
    const viewportPadding = 5;
    if (defaultPositionLeft <= viewportPadding) {
        return {
            arrowOffset: targetCenterPosition - viewportPadding - 7,
            lastPositionX: viewportPadding,
        };
    }
    if (defaultPositionLeft + selfPos.width > windowWidth) {
        const scrollBar = 10;
        const positionLeft = windowWidth - selfPos.width - viewportPadding - scrollBar;
        return {
            arrowOffset: targetCenterPosition - positionLeft - 7,
            lastPositionX: positionLeft,
        };
    }
    return {
        arrowOffset: targetCenterPosition - defaultPositionLeft - 7,
        lastPositionX: defaultPositionLeft,
    };
}
export function getPositions(targetPos, selfPos, windowHeight, windowWidth, popoverPosition) {
    const { arrowOffset, lastPositionX } = getXPositions(targetPos, selfPos, windowWidth, popoverPosition);
    const { arrowPosition, firstPositionY, lastPositionY } = geYtPositions(targetPos, selfPos, windowHeight, popoverPosition);
    return {
        arrowOffset,
        arrowPosition,
        firstPositionY,
        lastPositionX,
        lastPositionY,
    };
}
