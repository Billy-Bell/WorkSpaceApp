import { valueConvertor, valueFormatter } from '../../shared/dataConversion';
import { areDatesEqual, dateAddDays, getDayNumberForName, getLongMonthName, getShortDayNames, } from '../../shared/dateUtils';
import { createStyleFromJson } from '../../shared/utils';
import { getDayRows } from './tag-date-picker.utils';
export class TagDatePicker {
    constructor() {
        /** The first day of the week. 0 is sunday */
        this.firstDayOfWeek = 1;
        /** The locale for the date formatting */
        this.locale = 'en-GB';
        /** Whether the input has a border */
        this.borderless = false;
        /** Whether the input is disabled */
        this.inputDisabled = false;
        /** Whether the popover is open */
        this.popoverOpen = false;
        /** Whether the year pager is visible or not */
        this.yearPagerVisible = false;
        /** The selected year */
        this.selectedYear = new Date().getFullYear();
        /** The selected month */
        this.selectedMonth = new Date().getMonth();
        /** A flag to prevent the popover being closed straight after it has opened when a user clicks the input */
        this.disableInputClick = false;
        /**
         * handler for when the cursor goes into the year element
         * We make the year pager visible when this happens
         */
        this.handlerYearMouseEnter = () => {
            this.yearPagerVisible = true;
        };
        /**
         * handler for when the cursor moves our the year element
         * We hide the year pager when this happens
         */
        this.handlerYearMouseLeave = () => {
            this.yearPagerVisible = false;
        };
        /**
         * handler for when the up button is clicked in the year pager
         * We move to the next year when this happens
         */
        this.handleYearUpClick = () => {
            this.selectedYear = this.selectedYear + 1;
            // hack - clicking the year pager causes the mouse leave to occur
            //      - so ensure it remains true
            setTimeout(() => (this.yearPagerVisible = true), 100);
        };
        /**
         * handler for when the down button is clicked in the year pager
         * We move to the previous year when this happens
         */
        this.handleYearDownClick = () => {
            this.selectedYear = this.selectedYear - 1;
            // hack - clicking the year pager causes the mouse leave to occur
            //      - so ensure it remains true
            setTimeout(() => (this.yearPagerVisible = true), 100);
        };
        /**
         * handler for when the previous month button is clicked
         * We move to the previous month when this happens
         */
        this.handlePreviousMonthClick = () => {
            const firstDayInMonth = new Date(this.selectedYear, this.selectedMonth, 1);
            const firstDayInPreviousMonth = dateAddDays(firstDayInMonth, -1);
            this.selectedMonth = firstDayInPreviousMonth.getMonth();
        };
        /**
         * handler for when the previous month button is clicked
         * We move to the previous month when this happens
         */
        this.handleNextMonthClick = () => {
            const firstDayInMonth = new Date(this.selectedYear, this.selectedMonth, 1);
            const aDayInNextMonth = dateAddDays(firstDayInMonth, 32);
            this.selectedMonth = aDayInNextMonth.getMonth();
        };
        /**
         * handler for when a day is clicked
         * We set the selected date and close the popover when this happens
         */
        this.handleDayClick = (day) => {
            this.changeValue(day.date);
            this.popoverOpen = false;
        };
        this.handlePopoverOpened = () => {
            if (this.popoverOpen !== true) {
                this.popoverOpen = true;
            }
        };
        this.handlePopoverClosed = () => {
            if (this.popoverOpen !== false) {
                this.popoverOpen = false;
            }
        };
        this.handleInputFocus = () => {
            this.popoverOpen = true;
            this.disableInputClick = true;
            // a click will trigger straight after focus if the user has clicked the input
            // so set a flag so that the list isn't closed
            setTimeout(() => {
                this.disableInputClick = false;
            }, 300);
        };
        this.handleInputClick = (e) => {
            if (!this.disableInputClick) {
                this.popoverOpen = !this.popoverOpen;
                e.stopPropagation();
            }
        };
        /**
         * Opens the picker when ALT + Down is pressed
         * Closes the picker when ESC is pressed
         */
        this.handleInputKeyUp = (e) => {
            const key = this.ieFix(e.key);
            const alt = this.isAltPressed(e);
            const input = this.getInput();
            this.valueBeingTyped = input.value;
            if (key === 'ArrowDown' && alt) {
                this.popoverOpen = true;
            }
            else if (key === 'Escape') {
                this.popoverOpen = false;
            }
        };
        this.handleInputBlur = () => {
            if (this.valueBeingTyped) {
                const input = this.getInput();
                const newValue = input.value === '' ? null : valueConvertor(input.value, 'date');
                this.changeValue(newValue);
            }
        };
        this.handleDocumentClick = () => {
            this.popoverOpen = false;
        };
        this.handleYearKeyUp = () => {
            const input = this.getYearInput();
            if (input.value && input.value.length === 4) {
                this.selectedYear = parseInt(input.value, 10);
            }
        };
    }
    /**
     * Sets the focus to the combobox
     */
    focusInput() {
        const input = this.getInput();
        if (input) {
            input.focus();
        }
    }
    /**
     * Selects the text in the input
     */
    select() {
        const input = this.getInput();
        if (input) {
            input.select();
        }
    }
    /** Attach event handlers to keep the popoverOpen state up to date */
    componentDidLoad() {
        this.element.addEventListener('opened', this.handlePopoverOpened);
        this.element.addEventListener('closed', this.handlePopoverClosed);
        document.addEventListener('click', this.handleDocumentClick);
        // convert the initial value to date
        if (this.value && typeof this.value === 'string') {
            const newValue = valueConvertor(this.value, 'date');
            this.changeValue(newValue, true);
        }
        else if (!this.value && this.element.getAttribute('value')) {
            // when value set as an attribute, this.value may be undefined because stencil was unable to convert it to a date
            const newValue = valueConvertor(this.element.getAttribute('value'), 'date');
            this.changeValue(newValue, true);
        }
    }
    /** Remove any event handlers */
    componentDidUnload() {
        this.element.removeEventListener('opened', this.handlePopoverOpened);
        this.element.removeEventListener('closed', this.handlePopoverClosed);
        document.removeEventListener('click', this.handleDocumentClick);
    }
    render() {
        const formattingOptionsObj = this.formattingOptions
            ? JSON.parse(this.formattingOptions)
            : undefined;
        const formattedDate = typeof this.value === 'string' && this.value === ''
            ? ''
            : valueFormatter(this.value, 'date', formattingOptionsObj, this.locale);
        const displayValue = this.valueBeingTyped ? this.valueBeingTyped : formattedDate;
        const selectedDayNumber = this.value && this.value.getDay ? this.value.getDay() : -1;
        const monthName = getLongMonthName(this.selectedMonth);
        const dayNames = getShortDayNames(this.firstDayOfWeek);
        const dayRows = getDayRows(this.selectedYear, this.selectedMonth, this.firstDayOfWeek);
        return (h("div", { class: "tag-date-picker" },
            h("div", { class: this.getInputContainerClass(), tabIndex: 0 },
                h("tag-icon", { icon: "Calendar" }),
                this.inputDisabled ? (h("span", { tabIndex: 0, style: createStyleFromJson(this.inputStyle), onClick: !this.disabled && this.handleInputClick, onFocus: !this.disabled && this.handleInputFocus }, displayValue === undefined || displayValue === null || displayValue === ''
                    ? this.placeholder
                    : displayValue)) : (h("input", { id: this.id, name: this.name, placeholder: this.placeholder, onKeyUp: this.handleInputKeyUp, value: displayValue, disabled: this.disabled, onBlur: this.handleInputBlur, class: "tag-date-picker__input", style: createStyleFromJson(this.inputStyle) })),
                h("div", { class: "tag-date-picker__menu-icon-container" },
                    h("span", { class: "tag-date-picker__menu-icon" }))),
            !this.disabled && (h("div", { class: "tag-date-picker__popover-container" },
                h("tag-popover", { alwaysOpenWhenClick: true, open: this.popoverOpen, suppressCloseIcon: true, "popover-for": ".tag-date-picker__input-container", position: "bottom-align-left" },
                    h("div", { class: "tag-date-picker__calendar" },
                        h("div", { class: "tag-date-picker__calendar__months" },
                            h("div", { class: "tag-date-picker__calendar__months__current" },
                                h("div", { class: "tag-date-picker__calendar__months__current__title" }, monthName),
                                h("div", { class: "tag-date-picker__calendar__months__current__year", onMouseEnter: this.handlerYearMouseEnter, onMouseLeave: this.handlerYearMouseLeave },
                                    h("input", { type: "text", value: this.selectedYear, class: "tag-date-picker__calendar__months__current__year__input", onKeyUp: this.handleYearKeyUp }),
                                    this.yearPagerVisible && (h("div", { class: "tag-date-picker__calendar__months__current__year__pager-container" },
                                        h("div", { class: "tag-date-picker__calendar__months__current__year__pager-button-wrap tag-date-picker__calendar__months__current__year__pager-button-wrap-up" },
                                            h("span", { class: "tag-date-picker__calendar__months__current__year__pager-button tag-date-picker__calendar__months__current__year__pager-button-up", onClick: this.handleYearUpClick })),
                                        h("div", { class: "tag-date-picker__calendar__months__current__year__pager-button-wrap tag-date-picker__calendar__months__current__year__pager-button-wrap-down" },
                                            h("span", { class: "tag-date-picker__calendar__months__current__year__pager-button tag-date-picker__calendar__months__current__year__pager-button-down", onClick: this.handleYearDownClick })))))),
                            h("div", { tabIndex: 0, class: "tag-date-picker__calendar__months__pager-button tag-date-picker__calendar__months__pager-button-previous", onKeyDown: e => e.key === 'Enter' && this.handlePreviousMonthClick(), onClick: this.handlePreviousMonthClick }),
                            h("div", { tabIndex: 0, class: "tag-date-picker__calendar__months__pager-button tag-date-picker__calendar__months__pager-button-next", onKeyDown: e => e.key === 'Enter' && this.handleNextMonthClick(), onClick: this.handleNextMonthClick })),
                        h("div", { class: "tag-date-picker__calendar__days" },
                            h("div", { class: "tag-date-picker__calendar__days__headings" }, dayNames.map(dayName => (h("span", { class: getDayNumberForName(dayName) === selectedDayNumber
                                    ? 'tag-date-picker__calendar__days__headings__name tag-date-picker__calendar__days__headings__name-selected'
                                    : 'tag-date-picker__calendar__days__headings__name' }, dayName)))),
                            h("div", { class: "tag-date-picker__calendar__days__container" }, dayRows.map(dayRow => (h("div", { class: "tag-date-picker__calendar__days__container__day-row" }, dayRow.days.map(day => (h("span", { tabindex: 0, onKeyDown: e => e.key === 'Enter' && this.handleDayClick(day), onClick: () => this.handleDayClick(day), "data-number": day.number, class: this.getDayRowClass(day) }, day.number))))))))))))));
    }
    getDayRowClass(day) {
        let className = '';
        const currentDate = new Date();
        const defaultDate = valueConvertor(new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()), 'date');
        const selectedDate = areDatesEqual(day.date, this.value);
        const today = areDatesEqual(day.date, defaultDate);
        if (selectedDate) {
            className +=
                'tag-date-picker__calendar__days__container__day tag-date-picker__calendar__days__container__day-selected ';
        }
        if (today && !selectedDate) {
            className +=
                'tag-date-picker__calendar__days__container__day tag-date-picker__calendar__days__container__day-today ';
        }
        if (!today && !selectedDate && day.inMonth) {
            className +=
                'tag-date-picker__calendar__days__container__day tag-date-picker__calendar__days__container__day-in-month ';
        }
        else if (!today && !selectedDate && !day.inMonth) {
            className += 'tag-date-picker__calendar__days__container__day';
        }
        return className;
    }
    getInputContainerClass() {
        let className = 'tag-date-picker__input-container';
        if (this.borderless) {
            className = className + ' tag-date-picker__input-container-borderless';
        }
        if (this.inputDisabled) {
            className = className + ' tag-date-picker__input-container-inputdisabled';
        }
        if (this.disabled) {
            className = className + ' tag-date-picker__input-container-disabled';
        }
        return className;
    }
    /** Gets a reference to the input */
    getInput() {
        return this.element.shadowRoot
            ? this.element.shadowRoot.querySelector('.tag-date-picker__input')
            : this.element.querySelector('.tag-date-picker__input');
    }
    /** Gets a reference to the input */
    getYearInput() {
        return this.element.shadowRoot
            ? this.element.shadowRoot.querySelector('.tag-date-picker__calendar__months__current__year__input')
            : this.element.querySelector('.tag-date-picker__calendar__months__current__year__input');
    }
    /**
     * Returns whether ALT is pressed
     * There is a try-catch wrapper is because e.getModifierState errors in unit tests
     */
    isAltPressed(e) {
        let alt;
        try {
            alt = e.getModifierState('Alt');
        }
        catch (ex) {
            alt = false;
        }
        return alt;
    }
    /** IE fix for their none standard key names */
    ieFix(key) {
        if (key === 'Down') {
            return 'ArrowDown';
        }
        else if (key === 'Up') {
            return 'ArrowUp';
        }
        else if (key === 'Left') {
            return 'ArrowLeft';
        }
        else if (key === 'Right') {
            return 'ArrowRight';
        }
        else {
            return key;
        }
    }
    changeValue(newValue, suppressEvent = false) {
        this.value = newValue;
        if (this.value) {
            this.selectedMonth = this.value.getMonth();
            this.selectedYear = this.value.getFullYear();
        }
        this.valueBeingTyped = '';
        if (!suppressEvent) {
            this.valueChange.emit({ value: this.value });
        }
    }
    static get is() { return "tag-date-picker"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "borderless": {
            "type": Boolean,
            "attr": "borderless"
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled"
        },
        "element": {
            "elementRef": true
        },
        "firstDayOfWeek": {
            "type": Number,
            "attr": "first-day-of-week"
        },
        "focusInput": {
            "method": true
        },
        "formattingOptions": {
            "type": String,
            "attr": "formatting-options"
        },
        "id": {
            "type": String,
            "attr": "id"
        },
        "inputDisabled": {
            "type": Boolean,
            "attr": "input-disabled"
        },
        "inputStyle": {
            "type": String,
            "attr": "input-style"
        },
        "locale": {
            "type": String,
            "attr": "locale"
        },
        "name": {
            "type": String,
            "attr": "name"
        },
        "placeholder": {
            "type": String,
            "attr": "placeholder"
        },
        "popoverOpen": {
            "state": true
        },
        "select": {
            "method": true
        },
        "selectedMonth": {
            "state": true
        },
        "selectedYear": {
            "state": true
        },
        "value": {
            "type": "Any",
            "attr": "value",
            "mutable": true
        },
        "valueBeingTyped": {
            "state": true
        },
        "yearPagerVisible": {
            "state": true
        }
    }; }
    static get events() { return [{
            "name": "valueChange",
            "method": "valueChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-date-picker:**/"; }
}
