var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { nodeVariableReplacer, setFieldData } from '../../shared/dataBinder';
export class TagRecord {
    constructor() {
        /**
         * The index of the selected record in the array
         */
        this.selectedIndex = 0;
        /**
         * The class name for the container.
         * Any utility class can be referenced
         */
        /**
         * The class name for the container
         * The default class is "container" which gives a 1px border with 10px padding
         */
        this.containerClassName = 'tag-record';
        /** Set the component ready to slide in */
        this.setSlideOn = () => {
            const div = this.element.shadowRoot.querySelector('.tag-record__slider');
            div.classList.add('on');
        };
        /** Turns the slide transition off the component */
        this.setSlideOff = () => {
            const div = this.element.shadowRoot.querySelector('.tag-record__slider');
            div.classList.remove('on');
        };
    }
    componentDidUpdate() {
        this.setDataOnChildren();
        /**
         * Note that we don't use state to toggle the 'slide'
         *  CSS class on and off because we end up in a circular
         *  loop because componentDidUpdate() keeps getting triggered
         */
        this.setSlideOn();
        setTimeout(this.setSlideOff, 500);
    }
    /**
     * This is a public method to set the data and paging information for this component.
     * If this component is used with a parent tag-http or tag-search component, the parent component
     * will call this method with the response data.
     * @param {any} data - The data to bind to the record. This can be IPagedData (for an array of data) or just an object (for a single record)
     */
    setData(data) {
        this.data = data && data.data ? data.data : data;
        this.selectedIndex = 0;
        this.setDataOnChildren();
    }
    /** Handles showing a different record in the data array */
    handleRecordRequest(e) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = e.detail;
            this.selectedIndex = args.recordNumber - 1;
            this.setDataOnChildren();
        });
    }
    render() {
        return (h("div", { class: this.containerClassName },
            h("div", { class: "tag-record__slider" },
                h("slot", null),
                h("div", { class: "tag-record__columns-container" },
                    h("div", { class: "tag-record__col1", slot: "col1" },
                        h("slot", { name: "col1" })),
                    h("div", { class: "tag-record__col2", slot: "col2" },
                        h("slot", { name: "col2" })))),
            h("slot", { name: "options" }),
            this.data &&
                this.data.length &&
                this.data.length > 1 && (h("tag-record-nav", { record: this.selectedIndex + 1, "record-count": this.data.length }))));
    }
    /** Gets the fields in this component */
    getFields() {
        const fields = [].slice.call(this.element.querySelectorAll('tag-field'));
        return fields;
    }
    getSelectedRecord() {
        let record;
        if (Array.isArray(this.data)) {
            record =
                this.data && this.data.length - 1 >= this.selectedIndex
                    ? this.data[this.selectedIndex]
                    : undefined;
        }
        else {
            record = this.data;
        }
        return record;
    }
    /** Sets the field values on child nodes */
    setDataOnChildren() {
        const fields = this.getFields();
        const record = this.getSelectedRecord();
        setFieldData(fields, record);
        nodeVariableReplacer(this.element, record);
    }
    static get is() { return "tag-record"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "containerClassName": {
            "type": String,
            "attr": "container-class-name"
        },
        "data": {
            "type": "Any",
            "attr": "data",
            "mutable": true
        },
        "element": {
            "elementRef": true
        },
        "selectedIndex": {
            "type": Number,
            "attr": "selected-index",
            "mutable": true
        },
        "setData": {
            "method": true
        }
    }; }
    static get listeners() { return [{
            "name": "recordRequest",
            "method": "handleRecordRequest"
        }]; }
    static get style() { return "/**style-placeholder:tag-record:**/"; }
}
