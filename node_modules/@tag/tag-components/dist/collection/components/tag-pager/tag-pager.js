export class TagPager {
    constructor() {
        /** The current page number  */
        this.page = 1;
        /** The total number of pages which could be guessed if pageCount wasn't passed as a prop  */
        this.derivedPageCount = 1;
        /** Information about the pages in the pager to display  */
        this.pages = [];
    }
    /** Setup the pages array just before the 1st render */
    componentWillLoad() {
        this.derivedPageCount = this.pageCount ? this.pageCount : this.page + 1;
        this.setPageArray();
    }
    componentWillUpdate() {
        this.derivedPageCount = this.pageCount ? this.pageCount : this.page + 1;
        this.setPageArray();
    }
    render() {
        const previousPage = this.page > 1 ? this.page - 1 : 1;
        const nextPage = this.page < this.derivedPageCount ? this.page + 1 : this.derivedPageCount;
        const firstPageButtonVisible = false;
        const previousPageButtonVisible = this.derivedPageCount > 1;
        const nextPageButtonVisible = this.derivedPageCount > 1;
        const lastPageButtonVisible = this.derivedPageCount > 1 && this.derivedPageCount !== this.pages[this.pages.length - 1].page;
        const firstPageButtonEnabled = this.page > 1;
        const previousPageButtonEnabled = this.page > 1;
        const nextPageButtonEnabled = this.page < this.derivedPageCount;
        const lastPageButtonEnabled = this.pageCount && this.page < this.pageCount;
        const lowerMoreVisible = this.pages && this.pages.length > 0 && this.pages[0].page > 1;
        const higherMoreVisible = this.pages &&
            this.pages.length > 0 &&
            this.pages[this.pages.length - 1].page < this.derivedPageCount;
        return (h("div", { class: "tag-pager" },
            h("div", { class: "tag-pager__pager-button-container" },
                firstPageButtonVisible &&
                    firstPageButtonEnabled && (h("a", { class: "tag-pager__pager-button", tabIndex: 0, onClick: () => this.handleClick(1) },
                    h("tag-icon", { size: 15, icon: "EndLeft" }))),
                firstPageButtonVisible &&
                    !firstPageButtonEnabled && (h("a", { class: "tag-pager__pager-button disabled", tabIndex: 0 },
                    h("tag-icon", { size: 15, icon: "EndLeft" }))),
                previousPageButtonVisible &&
                    previousPageButtonEnabled && (h("a", { class: "tag-pager__pager-button", tabIndex: 0, onClick: () => this.handleClick(previousPage) },
                    h("tag-icon", { size: 15, icon: "ArrowLeft" }))),
                previousPageButtonVisible &&
                    !previousPageButtonEnabled && (h("a", { class: "tag-pager__pager-button disabled", tabIndex: 0 },
                    h("tag-icon", { size: 15, icon: "ArrowLeft" }))),
                lowerMoreVisible && h("a", { class: "tag-pager__pager-button" }, "..."),
                this.pages &&
                    this.pages.length > 0 &&
                    this.pages.map(page => page.visible && (h("a", { class: page.class, tabIndex: 0, onClick: () => this.handleClick(page.page) }, page.page))),
                higherMoreVisible && h("a", { class: "tag-pager__pager-button" }, "..."),
                lastPageButtonVisible &&
                    lastPageButtonEnabled && (h("a", { class: "tag-pager__pager-button", tabIndex: 0, onClick: () => this.handleClick(this.derivedPageCount) }, this.derivedPageCount)),
                lastPageButtonVisible &&
                    !lastPageButtonEnabled && (h("a", { class: "tag-pager__pager-button disabled", tabIndex: 0, onClick: () => this.handleClick(this.derivedPageCount) }, this.derivedPageCount)),
                nextPageButtonVisible &&
                    nextPageButtonEnabled && (h("a", { class: "tag-pager__pager-button", tabIndex: 0, onClick: () => this.handleClick(nextPage) },
                    h("tag-icon", { size: 15, icon: "ArrowRight" }))),
                nextPageButtonVisible &&
                    !nextPageButtonEnabled && (h("a", { class: "tag-pager__pager-button disabled", tabIndex: 0 },
                    h("tag-icon", { size: 15, icon: "ArrowRight" }))))));
    }
    /** Sets up the pages array */
    setPageArray() {
        const range = this.getPageRange(this.page, this.derivedPageCount);
        this.pages = [];
        for (let i = range.min; i <= range.max; i++) {
            const btnInfo = {
                class: i === this.page ? 'tag-pager__pager-button active' : 'tag-pager__pager-button',
                page: i,
                visible: i <= this.derivedPageCount,
            };
            this.pages.push(btnInfo);
        }
    }
    /** Gets the bounds of the pages array */
    getPageRange(page, pageCount) {
        let minPage;
        let maxPage;
        if (pageCount < 5) {
            return {
                max: pageCount,
                min: 1,
            };
        }
        if (page < 3) {
            minPage = 1;
            maxPage = 5;
        }
        if (page >= 3 && page <= pageCount - 2) {
            minPage = page - 2;
            maxPage = page + 2;
        }
        if (page > pageCount - 2) {
            minPage = pageCount - 4;
            maxPage = pageCount;
        }
        return {
            max: maxPage,
            min: minPage,
        };
    }
    handleClick(goToPage) {
        this.pageRequest.emit({
            page: goToPage,
        });
    }
    static get is() { return "tag-pager"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "page": {
            "type": Number,
            "attr": "page"
        },
        "pageCount": {
            "type": Number,
            "attr": "page-count"
        }
    }; }
    static get events() { return [{
            "name": "pageRequest",
            "method": "pageRequest",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-pager:**/"; }
}
