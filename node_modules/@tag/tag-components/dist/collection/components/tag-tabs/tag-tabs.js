import { createStyleFromJson } from '../../shared/utils';
export class TagTabs {
    constructor() {
        /** The type of tabs to render */
        this.type = 'underline';
        /** The accent colour for the selected tab */
        this.accent = 'viridiangreen';
        /** Internal state for each tab */
        this.tabs = [];
    }
    /** Gets the child tab components */
    componentDidLoad() {
        this.tabs = this.getTabsObject();
    }
    /**
     * Selects a tab
     * @param {string} tabCaption - The caption of the tab to select
     */
    select(key) {
        const newTabs = this.getTabsObject().map(t => {
            t.selected = key === t.key;
            return t;
        });
        this.tabs = newTabs;
    }
    render() {
        const { tabs } = this;
        this.showSelectedTabContent();
        return (h("div", null,
            h("ul", { role: "tablist", class: `tag-tabs-list-${this.type}`, style: createStyleFromJson(this.headerStyle) }, tabs.filter(tab => !tab.hidden).map(tab => this.renderTab(tab))),
            h("div", { role: "tabpanel", class: `tag-tabs-content-${this.type}`, style: createStyleFromJson(this.panelStyle) },
                h("slot", null))));
    }
    /** Gets the tabs object from the tag-tab child components */
    getTabsObject() {
        const tagTabs = [].slice.call(this.element.querySelectorAll('tag-tab'));
        let first = true;
        const tabs = tagTabs.map(t => {
            const tab = {
                caption: t.caption,
                content: t.innerHTML,
                hidden: t.hidden,
                key: t.key || t.caption,
                selected: first,
            };
            first = false;
            return tab;
        });
        return tabs;
    }
    /** Handles when a tab is clicked */
    handleTabClick(tab) {
        this.select(tab.key);
        this.tabChange.emit(tab);
    }
    /** Renders a tab header */
    renderTab(tab) {
        const { type } = this;
        const selectedAccentClass = `tag-selected-accent--${this.accent}`;
        const className = tab.selected
            ? `tag-tabs-list-${type}-tab selected ${selectedAccentClass}`
            : `tag-tabs-list-${type}-tab`;
        return (h("li", { role: "tab", class: className, onClick: () => this.handleTabClick(tab) },
            h("div", { tabIndex: 0 }, tab.caption)));
    }
    /**
     * Shows the selected tab content.
     * Note that all the tabs content is rendered
     * - this method simply shows or hides the content.
     */
    showSelectedTabContent() {
        const tagTabs = [].slice.call(this.element.querySelectorAll('tag-tab'));
        for (let i = 0; i < this.tabs.length; i++) {
            tagTabs[i].style.display = this.tabs[i].selected ? 'block' : 'none';
        }
    }
    static get is() { return "tag-tabs"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accent": {
            "type": String,
            "attr": "accent"
        },
        "element": {
            "elementRef": true
        },
        "headerStyle": {
            "type": String,
            "attr": "header-style"
        },
        "panelStyle": {
            "type": String,
            "attr": "panel-style"
        },
        "select": {
            "method": true
        },
        "tabs": {
            "state": true
        },
        "type": {
            "type": String,
            "attr": "type"
        }
    }; }
    static get events() { return [{
            "name": "tabChange",
            "method": "tabChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-tabs:**/"; }
}
