import { Machine } from 'xstate';
export var SortStates;
(function (SortStates) {
    SortStates["unsorted"] = "unsorted";
    SortStates["ascending"] = "ascending";
    SortStates["descending"] = "descending";
})(SortStates || (SortStates = {}));
const sortStateChart = {
    initial: SortStates.unsorted,
    states: {
        [SortStates.unsorted]: {
            on: {
                SORT: {
                    ascending: {},
                },
            },
        },
        [SortStates.ascending]: {
            on: {
                SORT: {
                    descending: {},
                },
            },
            onEntry: ['sortAscending'],
        },
        [SortStates.descending]: {
            on: {
                SORT: 'ascending',
            },
            onEntry: ['sortDescending'],
        },
    },
};
const sortMachine = Machine(sortStateChart);
const comparer = key => (a, b) => {
    if (a[key] < b[key]) {
        return -1;
    }
    if (a[key] > b[key]) {
        return 1;
    }
    return 0;
};
const sortAscending = (data, key) => {
    return data.sort(comparer(key));
};
const sortDescending = (data, key) => {
    return data.sort(comparer(key)).reverse();
};
export const sortStateMapper = () => new Map();
const actionMap = {
    sortAscending,
    sortDescending,
};
export const sort = (sortState, key, data) => {
    const sortEvent = {
        type: 'SORT',
    };
    const nextState = sortMachine.transition(sortState || sortMachine.initialState.value, sortEvent);
    const action = actionMap[nextState.actions[0]];
    const nextData = action(data, key);
    return {
        data: nextData,
        state: nextState.value,
    };
};
