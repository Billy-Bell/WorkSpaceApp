export class TagSearchbox {
    constructor() {
        /** The placeholder on the search input */
        this.placeholder = 'Search for records ...';
        /** The delay in milliseconds after the user stops typing before the search is invoked */
        this.delay = 500;
        /** The timer that is used to trigger the search when the user stops typing */
        this.typingTimer = null;
        /**
         * Invokes the search when the user presses Enter or stops typing
         */
        this.handleKeyUp = (e) => {
            const criteria = e.target.value;
            clearTimeout(this.typingTimer);
            if (e.key === 'Enter') {
                this.value = criteria;
                this.search.emit({ criteria });
            }
            else {
                // we only want to fire events if the values are different
                this.value = criteria;
                this.typingTimer = setTimeout(() => {
                    this.search.emit({ criteria });
                }, this.delay);
            }
        };
        /**
         * Invokes the search when the tab key is pressed
         * Note that the tab key isn't detected on keyUp
         */
        this.handleKeyDown = (e) => {
            if (e.key === 'Tab') {
                const criteria = e.target.value;
                clearTimeout(this.typingTimer);
                this.value = criteria;
                this.search.emit({ criteria });
            }
        };
    }
    /** This is a public method to get the search criteria */
    getSearch() {
        return this.value;
    }
    /**
     * This is a public method to set the search criteria
     * @param {string} search - The search criteria
     * @param {boolean} suppressSearch - Whether the search event is suppresed
     */
    setSearch(search, suppressSearch) {
        this.value = search;
        if (!suppressSearch) {
            this.search.emit({ criteria: search });
        }
    }
    render() {
        const { placeholder, value } = this;
        const inputClass = this.borderless ? 'tag-searchbox-borderless' : '';
        const iconContainerClass = this.borderless
            ? 'tag-searchbox__icon-container tag-searchbox__icon-container-borderless'
            : 'tag-searchbox__icon-container';
        return [
            h("input", { inputmode: "search", placeholder: placeholder, onKeyDown: this.handleKeyDown, onKeyUp: this.handleKeyUp, onClick: e => this.handleClick(e), "aria-label": placeholder, value: value, class: inputClass }),
            h("span", { class: iconContainerClass },
                h("tag-icon", { icon: "Search", style: { color: '#707070' } })),
        ];
    }
    handleClick(e) {
        // we call this so that clicking on the input box
        // does not close a popup menu container
        e.stopPropagation();
    }
    static get is() { return "tag-searchbox"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "borderless": {
            "type": Boolean,
            "attr": "borderless"
        },
        "delay": {
            "type": Number,
            "attr": "delay"
        },
        "getSearch": {
            "method": true
        },
        "placeholder": {
            "type": String,
            "attr": "placeholder"
        },
        "setSearch": {
            "method": true
        },
        "value": {
            "type": String,
            "attr": "value",
            "mutable": true
        }
    }; }
    static get events() { return [{
            "name": "search",
            "method": "search",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-searchbox:**/"; }
}
