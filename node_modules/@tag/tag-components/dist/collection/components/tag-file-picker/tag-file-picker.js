export class TagFilePicker {
    constructor() {
        /**
         * The id of the file input
         * This is important if there are multiple uploads on the page
         */
        this.id = 'file';
        /** The message to display in the drop area  */
        this.dragDropMessage = 'Drag and drop files here to upload';
        /** The template text to display when files have been selected */
        this.multipleFilesCaption = '{{fileCount}} files selected';
        /** The class to display for the drag container when a drag drop is occurring */
        this.dragClass = '';
        /*
         * Handles the file upload change event
         * This indicates to the user what files has been selected
         **/
        this.handleFileUploadChange = () => {
            const fileUpload = this.element.shadowRoot
                ? this.element.shadowRoot.querySelector('input[type="file"]')
                : this.element.querySelector('input[type="file"]');
            this.displayText = this.getFileDisplayText(fileUpload.files);
            this.selectedFiles = fileUpload.files;
            this.raiseFileChangeEvent(this.selectedFiles);
        };
        this.handleDragEnter = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.dragClass = 'drag';
        };
        this.handleDragLeave = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.dragClass = '';
        };
        this.handleDragOver = (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.dragClass = 'drag';
        };
        this.handleDrop = (e) => {
            e.preventDefault();
            e.stopPropagation();
            let files = e.dataTransfer.files;
            // if multiple files then select te first item in the list
            if (!this.multiple && e.dataTransfer && e.dataTransfer.files.length > 1) {
                files = [e.dataTransfer.files[0]];
            }
            this.dragClass = '';
            this.displayText = this.getFileDisplayText(files);
            this.selectedFiles = files;
            this.raiseFileChangeEvent(this.selectedFiles);
        };
    }
    /**
     * Sets the focus to the file picker button
     */
    focusButton() {
        const shadowRoot = this.element.shadowRoot ? this.element.shadowRoot : this.element;
        const label = shadowRoot.querySelector('label');
        if (label) {
            label.focus();
        }
    }
    render() {
        const labelText = this.getLabelText();
        const { id, allowDragDrop, large, dragDropMessage, multiple, disabled } = this;
        if (allowDragDrop) {
            return (h("div", { class: large
                    ? 'tag-file-picker__drag-container tag-file-picker__drag-container--large ' +
                        this.dragClass
                    : 'tag-file-picker__drag-container ' + this.dragClass, onDragEnter: disabled ? null : this.handleDragEnter, onDragOver: disabled ? null : this.handleDragOver, onDragLeave: disabled ? null : this.handleDragLeave, onDrop: disabled ? null : this.handleDrop },
                h("div", { style: {
                        alignItems: 'center',
                        display: 'flex',
                        justifyContent: 'center',
                    } },
                    h("tag-icon", { icon: large ? 'Upload2' : 'Upload', size: large ? 50 : 24, style: large ? { marginBottom: '20px' } : { marginRight: '10px' }, accent: "title" }),
                    h("tag-text", { type: "feature", text: dragDropMessage, style: large ? { marginBottom: '30px' } : null })),
                this.renderFileInput(id, multiple, disabled),
                h("div", { style: {
                        flexDirection: 'row',
                        justifyContent: 'right',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                    } },
                    this.selectedFiles != null && this.selectedFiles.length > 0 && this.renderClear(),
                    h("label", { class: "tag-file-picker__label", htmlFor: id, tabIndex: 0, style: large ? null : { marginLeft: 'auto' } },
                        h("tag-icon", { icon: "Folder" }),
                        labelText))));
        }
        else {
            return (h("div", null,
                this.renderFileInput(id, multiple, disabled),
                h("div", { style: { display: 'flex' } },
                    this.selectedFiles != null && this.selectedFiles.length > 0 && this.renderClear(),
                    h("label", { class: "tag-file-picker__label", htmlFor: id, tabIndex: 0 },
                        h("tag-icon", { icon: "Folder" }),
                        labelText))));
        }
    }
    getLabelText() {
        return this.displayText
            ? this.displayText
            : this.buttonText
                ? this.buttonText
                : this.allowDragDrop
                    ? 'or Select a File'
                    : 'Select a File';
    }
    renderClear() {
        this.displayText = null;
        return (h("label", { class: "tag-file-picker__label tag-file-picker__clear", onClick: () => this.clearSelection() },
            h("tag-icon", { icon: "Delete" }),
            "Clear"));
    }
    clearSelection() {
        this.selectedFiles = null;
    }
    renderFileInput(id, multiple, disabled) {
        return (h("input", { type: "file", name: id, id: id, class: "tag-file-picker__inputfile", multiple: multiple, disabled: disabled, autocomplete: "off", onChange: this.handleFileUploadChange }));
    }
    getFileDisplayText(files) {
        const fileName = files.length > 1
            ? this.multipleFilesCaption.replace('{{fileCount}}', files.length.toString())
            : files[0].name;
        return fileName ? fileName : this.buttonText;
    }
    raiseFileChangeEvent(files) {
        this.fileChange.emit({ files });
    }
    static get is() { return "tag-file-picker"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "allowDragDrop": {
            "type": Boolean,
            "attr": "allow-drag-drop"
        },
        "buttonText": {
            "type": String,
            "attr": "button-text"
        },
        "disabled": {
            "type": Boolean,
            "attr": "disabled"
        },
        "displayText": {
            "state": true
        },
        "dragClass": {
            "state": true
        },
        "dragDropMessage": {
            "type": String,
            "attr": "drag-drop-message"
        },
        "element": {
            "elementRef": true
        },
        "focusButton": {
            "method": true
        },
        "id": {
            "type": String,
            "attr": "id"
        },
        "large": {
            "type": Boolean,
            "attr": "large"
        },
        "multiple": {
            "type": Boolean,
            "attr": "multiple"
        },
        "multipleFilesCaption": {
            "type": String,
            "attr": "multiple-files-caption"
        },
        "selectedFiles": {
            "state": true
        }
    }; }
    static get events() { return [{
            "name": "fileChange",
            "method": "fileChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:tag-file-picker:**/"; }
}
